
f411ceu6_bmp180.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4dc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  0800c680  0800c680  0001c680  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb40  0800cb40  00020354  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb40  0800cb40  0001cb40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb48  0800cb48  00020354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb48  0800cb48  0001cb48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb4c  0800cb4c  0001cb4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  0800cb50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bf0  20000354  0800cea4  00020354  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f44  0800cea4  00021f44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001818c  00000000  00000000  00020384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000374f  00000000  00000000  00038510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  0003bc60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d80  00000000  00000000  0003cb30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019cfb  00000000  00000000  0003d8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c73  00000000  00000000  000575ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b83c  00000000  00000000  0006b21e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f6a5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fd4  00000000  00000000  000f6ab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000354 	.word	0x20000354
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c664 	.word	0x0800c664

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000358 	.word	0x20000358
 80001dc:	0800c664 	.word	0x0800c664

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96e 	b.w	8000f8c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468c      	mov	ip, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8083 	bne.w	8000dde <__udivmoddi4+0x116>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d947      	bls.n	8000d6e <__udivmoddi4+0xa6>
 8000cde:	fab2 f282 	clz	r2, r2
 8000ce2:	b142      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	f1c2 0020 	rsb	r0, r2, #32
 8000ce8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cec:	4091      	lsls	r1, r2
 8000cee:	4097      	lsls	r7, r2
 8000cf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000d00:	fa1f fe87 	uxth.w	lr, r7
 8000d04:	fb08 c116 	mls	r1, r8, r6, ip
 8000d08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1a:	f080 8119 	bcs.w	8000f50 <__udivmoddi4+0x288>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8116 	bls.w	8000f50 <__udivmoddi4+0x288>
 8000d24:	3e02      	subs	r6, #2
 8000d26:	443b      	add	r3, r7
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d30:	fb08 3310 	mls	r3, r8, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	193c      	adds	r4, r7, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8105 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	f240 8102 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d50:	3802      	subs	r0, #2
 8000d52:	443c      	add	r4, r7
 8000d54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d58:	eba4 040e 	sub.w	r4, r4, lr
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	b11d      	cbz	r5, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c5 4300 	strd	r4, r3, [r5]
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	b902      	cbnz	r2, 8000d72 <__udivmoddi4+0xaa>
 8000d70:	deff      	udf	#255	; 0xff
 8000d72:	fab2 f282 	clz	r2, r2
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	d150      	bne.n	8000e1c <__udivmoddi4+0x154>
 8000d7a:	1bcb      	subs	r3, r1, r7
 8000d7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d80:	fa1f f887 	uxth.w	r8, r7
 8000d84:	2601      	movs	r6, #1
 8000d86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d8a:	0c21      	lsrs	r1, r4, #16
 8000d8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb08 f30c 	mul.w	r3, r8, ip
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0xe2>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	f200 80e9 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1ac9      	subs	r1, r1, r3
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000db8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x10c>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x10a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80d9 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e7bf      	b.n	8000d5e <__udivmoddi4+0x96>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0x12e>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80b1 	beq.w	8000f4a <__udivmoddi4+0x282>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x1cc>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0x140>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80b8 	bhi.w	8000f78 <__udivmoddi4+0x2b0>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	468c      	mov	ip, r1
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0a8      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000e16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e1a:	e7a5      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f603 	lsr.w	r6, r0, r3
 8000e24:	4097      	lsls	r7, r2
 8000e26:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2e:	40d9      	lsrs	r1, r3
 8000e30:	4330      	orrs	r0, r6
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e38:	fa1f f887 	uxth.w	r8, r7
 8000e3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e44:	fb06 f108 	mul.w	r1, r6, r8
 8000e48:	4299      	cmp	r1, r3
 8000e4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x19c>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e56:	f080 808d 	bcs.w	8000f74 <__udivmoddi4+0x2ac>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 808a 	bls.w	8000f74 <__udivmoddi4+0x2ac>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b281      	uxth	r1, r0
 8000e68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e74:	fb00 f308 	mul.w	r3, r0, r8
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	d907      	bls.n	8000e8c <__udivmoddi4+0x1c4>
 8000e7c:	1879      	adds	r1, r7, r1
 8000e7e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e82:	d273      	bcs.n	8000f6c <__udivmoddi4+0x2a4>
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d971      	bls.n	8000f6c <__udivmoddi4+0x2a4>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	4439      	add	r1, r7
 8000e8c:	1acb      	subs	r3, r1, r3
 8000e8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e92:	e778      	b.n	8000d86 <__udivmoddi4+0xbe>
 8000e94:	f1c6 0c20 	rsb	ip, r6, #32
 8000e98:	fa03 f406 	lsl.w	r4, r3, r6
 8000e9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ea0:	431c      	orrs	r4, r3
 8000ea2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	0c3b      	lsrs	r3, r7, #16
 8000eb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eba:	fa1f f884 	uxth.w	r8, r4
 8000ebe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ec2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ec6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eca:	458a      	cmp	sl, r1
 8000ecc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x220>
 8000ed6:	1861      	adds	r1, r4, r1
 8000ed8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000edc:	d248      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000ede:	458a      	cmp	sl, r1
 8000ee0:	d946      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000ee2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ee6:	4421      	add	r1, r4
 8000ee8:	eba1 010a 	sub.w	r1, r1, sl
 8000eec:	b2bf      	uxth	r7, r7
 8000eee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000efa:	fb00 f808 	mul.w	r8, r0, r8
 8000efe:	45b8      	cmp	r8, r7
 8000f00:	d907      	bls.n	8000f12 <__udivmoddi4+0x24a>
 8000f02:	19e7      	adds	r7, r4, r7
 8000f04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f08:	d22e      	bcs.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0a:	45b8      	cmp	r8, r7
 8000f0c:	d92c      	bls.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	4427      	add	r7, r4
 8000f12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f16:	eba7 0708 	sub.w	r7, r7, r8
 8000f1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f1e:	454f      	cmp	r7, r9
 8000f20:	46c6      	mov	lr, r8
 8000f22:	4649      	mov	r1, r9
 8000f24:	d31a      	bcc.n	8000f5c <__udivmoddi4+0x294>
 8000f26:	d017      	beq.n	8000f58 <__udivmoddi4+0x290>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x27a>
 8000f2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f36:	40f2      	lsrs	r2, r6
 8000f38:	ea4c 0202 	orr.w	r2, ip, r2
 8000f3c:	40f7      	lsrs	r7, r6
 8000f3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f42:	2600      	movs	r6, #0
 8000f44:	4631      	mov	r1, r6
 8000f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e70b      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6fd      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f58:	4543      	cmp	r3, r8
 8000f5a:	d2e5      	bcs.n	8000f28 <__udivmoddi4+0x260>
 8000f5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f60:	eb69 0104 	sbc.w	r1, r9, r4
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7df      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e7d2      	b.n	8000f12 <__udivmoddi4+0x24a>
 8000f6c:	4660      	mov	r0, ip
 8000f6e:	e78d      	b.n	8000e8c <__udivmoddi4+0x1c4>
 8000f70:	4681      	mov	r9, r0
 8000f72:	e7b9      	b.n	8000ee8 <__udivmoddi4+0x220>
 8000f74:	4666      	mov	r6, ip
 8000f76:	e775      	b.n	8000e64 <__udivmoddi4+0x19c>
 8000f78:	4630      	mov	r0, r6
 8000f7a:	e74a      	b.n	8000e12 <__udivmoddi4+0x14a>
 8000f7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f80:	4439      	add	r1, r7
 8000f82:	e713      	b.n	8000dac <__udivmoddi4+0xe4>
 8000f84:	3802      	subs	r0, #2
 8000f86:	443c      	add	r4, r7
 8000f88:	e724      	b.n	8000dd4 <__udivmoddi4+0x10c>
 8000f8a:	bf00      	nop

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <read_calliberation_data>:
#define atmPress 101325 //Pa



void read_calliberation_data (void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	; 0x28
 8000f94:	af04      	add	r7, sp, #16
	uint8_t Callib_Data[22] = {0};
 8000f96:	2300      	movs	r3, #0
 8000f98:	603b      	str	r3, [r7, #0]
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 8000fa8:	23aa      	movs	r3, #170	; 0xaa
 8000faa:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, Callib_Start, 1, Callib_Data,22, HAL_MAX_DELAY);
 8000fac:	8afa      	ldrh	r2, [r7, #22]
 8000fae:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb2:	9302      	str	r3, [sp, #8]
 8000fb4:	2316      	movs	r3, #22
 8000fb6:	9301      	str	r3, [sp, #4]
 8000fb8:	463b      	mov	r3, r7
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	21ee      	movs	r1, #238	; 0xee
 8000fc0:	4836      	ldr	r0, [pc, #216]	; (800109c <read_calliberation_data+0x10c>)
 8000fc2:	f001 fc81 	bl	80028c8 <HAL_I2C_Mem_Read>

	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
 8000fc6:	783b      	ldrb	r3, [r7, #0]
 8000fc8:	021b      	lsls	r3, r3, #8
 8000fca:	b21a      	sxth	r2, r3
 8000fcc:	787b      	ldrb	r3, [r7, #1]
 8000fce:	b21b      	sxth	r3, r3
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	b21a      	sxth	r2, r3
 8000fd4:	4b32      	ldr	r3, [pc, #200]	; (80010a0 <read_calliberation_data+0x110>)
 8000fd6:	801a      	strh	r2, [r3, #0]
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
 8000fd8:	78bb      	ldrb	r3, [r7, #2]
 8000fda:	021b      	lsls	r3, r3, #8
 8000fdc:	b21a      	sxth	r2, r3
 8000fde:	78fb      	ldrb	r3, [r7, #3]
 8000fe0:	b21b      	sxth	r3, r3
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	4b2f      	ldr	r3, [pc, #188]	; (80010a4 <read_calliberation_data+0x114>)
 8000fe8:	801a      	strh	r2, [r3, #0]
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
 8000fea:	793b      	ldrb	r3, [r7, #4]
 8000fec:	021b      	lsls	r3, r3, #8
 8000fee:	b21a      	sxth	r2, r3
 8000ff0:	797b      	ldrb	r3, [r7, #5]
 8000ff2:	b21b      	sxth	r3, r3
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	b21a      	sxth	r2, r3
 8000ff8:	4b2b      	ldr	r3, [pc, #172]	; (80010a8 <read_calliberation_data+0x118>)
 8000ffa:	801a      	strh	r2, [r3, #0]
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
 8000ffc:	79bb      	ldrb	r3, [r7, #6]
 8000ffe:	021b      	lsls	r3, r3, #8
 8001000:	b21a      	sxth	r2, r3
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	b21b      	sxth	r3, r3
 8001006:	4313      	orrs	r3, r2
 8001008:	b21b      	sxth	r3, r3
 800100a:	b29a      	uxth	r2, r3
 800100c:	4b27      	ldr	r3, [pc, #156]	; (80010ac <read_calliberation_data+0x11c>)
 800100e:	801a      	strh	r2, [r3, #0]
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
 8001010:	7a3b      	ldrb	r3, [r7, #8]
 8001012:	021b      	lsls	r3, r3, #8
 8001014:	b21a      	sxth	r2, r3
 8001016:	7a7b      	ldrb	r3, [r7, #9]
 8001018:	b21b      	sxth	r3, r3
 800101a:	4313      	orrs	r3, r2
 800101c:	b21b      	sxth	r3, r3
 800101e:	b29a      	uxth	r2, r3
 8001020:	4b23      	ldr	r3, [pc, #140]	; (80010b0 <read_calliberation_data+0x120>)
 8001022:	801a      	strh	r2, [r3, #0]
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
 8001024:	7abb      	ldrb	r3, [r7, #10]
 8001026:	021b      	lsls	r3, r3, #8
 8001028:	b21a      	sxth	r2, r3
 800102a:	7afb      	ldrb	r3, [r7, #11]
 800102c:	b21b      	sxth	r3, r3
 800102e:	4313      	orrs	r3, r2
 8001030:	b21b      	sxth	r3, r3
 8001032:	b29a      	uxth	r2, r3
 8001034:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <read_calliberation_data+0x124>)
 8001036:	801a      	strh	r2, [r3, #0]
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
 8001038:	7b3b      	ldrb	r3, [r7, #12]
 800103a:	021b      	lsls	r3, r3, #8
 800103c:	b21a      	sxth	r2, r3
 800103e:	7b7b      	ldrb	r3, [r7, #13]
 8001040:	b21b      	sxth	r3, r3
 8001042:	4313      	orrs	r3, r2
 8001044:	b21a      	sxth	r2, r3
 8001046:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <read_calliberation_data+0x128>)
 8001048:	801a      	strh	r2, [r3, #0]
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
 800104a:	7bbb      	ldrb	r3, [r7, #14]
 800104c:	021b      	lsls	r3, r3, #8
 800104e:	b21a      	sxth	r2, r3
 8001050:	7bfb      	ldrb	r3, [r7, #15]
 8001052:	b21b      	sxth	r3, r3
 8001054:	4313      	orrs	r3, r2
 8001056:	b21a      	sxth	r2, r3
 8001058:	4b18      	ldr	r3, [pc, #96]	; (80010bc <read_calliberation_data+0x12c>)
 800105a:	801a      	strh	r2, [r3, #0]
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
 800105c:	7c3b      	ldrb	r3, [r7, #16]
 800105e:	021b      	lsls	r3, r3, #8
 8001060:	b21a      	sxth	r2, r3
 8001062:	7c7b      	ldrb	r3, [r7, #17]
 8001064:	b21b      	sxth	r3, r3
 8001066:	4313      	orrs	r3, r2
 8001068:	b21a      	sxth	r2, r3
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <read_calliberation_data+0x130>)
 800106c:	801a      	strh	r2, [r3, #0]
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
 800106e:	7cbb      	ldrb	r3, [r7, #18]
 8001070:	021b      	lsls	r3, r3, #8
 8001072:	b21a      	sxth	r2, r3
 8001074:	7cfb      	ldrb	r3, [r7, #19]
 8001076:	b21b      	sxth	r3, r3
 8001078:	4313      	orrs	r3, r2
 800107a:	b21a      	sxth	r2, r3
 800107c:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <read_calliberation_data+0x134>)
 800107e:	801a      	strh	r2, [r3, #0]
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
 8001080:	7d3b      	ldrb	r3, [r7, #20]
 8001082:	021b      	lsls	r3, r3, #8
 8001084:	b21a      	sxth	r2, r3
 8001086:	7d7b      	ldrb	r3, [r7, #21]
 8001088:	b21b      	sxth	r3, r3
 800108a:	4313      	orrs	r3, r2
 800108c:	b21a      	sxth	r2, r3
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <read_calliberation_data+0x138>)
 8001090:	801a      	strh	r2, [r3, #0]

}
 8001092:	bf00      	nop
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	200005e8 	.word	0x200005e8
 80010a0:	20000370 	.word	0x20000370
 80010a4:	20000372 	.word	0x20000372
 80010a8:	20000374 	.word	0x20000374
 80010ac:	20000376 	.word	0x20000376
 80010b0:	20000378 	.word	0x20000378
 80010b4:	2000037a 	.word	0x2000037a
 80010b8:	2000037c 	.word	0x2000037c
 80010bc:	2000037e 	.word	0x2000037e
 80010c0:	20000380 	.word	0x20000380
 80010c4:	20000382 	.word	0x20000382
 80010c8:	20000384 	.word	0x20000384

080010cc <Get_UTemp>:


// Get uncompensated Temp
uint16_t Get_UTemp (void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af04      	add	r7, sp, #16
	uint8_t datatowrite = 0x2E;
 80010d2:	232e      	movs	r3, #46	; 0x2e
 80010d4:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_RAW[2] = {0};
 80010d6:	2300      	movs	r3, #0
 80010d8:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 80010da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010de:	9302      	str	r3, [sp, #8]
 80010e0:	2301      	movs	r3, #1
 80010e2:	9301      	str	r3, [sp, #4]
 80010e4:	1dfb      	adds	r3, r7, #7
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	2301      	movs	r3, #1
 80010ea:	22f4      	movs	r2, #244	; 0xf4
 80010ec:	21ee      	movs	r1, #238	; 0xee
 80010ee:	480f      	ldr	r0, [pc, #60]	; (800112c <Get_UTemp+0x60>)
 80010f0:	f001 faf0 	bl	80026d4 <HAL_I2C_Mem_Write>
	HAL_Delay (5);  // wait 4.5 ms
 80010f4:	2005      	movs	r0, #5
 80010f6:	f000 feef 	bl	8001ed8 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Temp_RAW, 2, 1000);
 80010fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fe:	9302      	str	r3, [sp, #8]
 8001100:	2302      	movs	r3, #2
 8001102:	9301      	str	r3, [sp, #4]
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	2301      	movs	r3, #1
 800110a:	22f6      	movs	r2, #246	; 0xf6
 800110c:	21ee      	movs	r1, #238	; 0xee
 800110e:	4807      	ldr	r0, [pc, #28]	; (800112c <Get_UTemp+0x60>)
 8001110:	f001 fbda 	bl	80028c8 <HAL_I2C_Mem_Read>
	return ((Temp_RAW[0]<<8) + Temp_RAW[1]);
 8001114:	793b      	ldrb	r3, [r7, #4]
 8001116:	b29b      	uxth	r3, r3
 8001118:	021b      	lsls	r3, r3, #8
 800111a:	b29a      	uxth	r2, r3
 800111c:	797b      	ldrb	r3, [r7, #5]
 800111e:	b29b      	uxth	r3, r3
 8001120:	4413      	add	r3, r2
 8001122:	b29b      	uxth	r3, r3
}
 8001124:	4618      	mov	r0, r3
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	200005e8 	.word	0x200005e8

08001130 <BMP180_GetTemp>:

float BMP180_GetTemp (void)
{
 8001130:	b5b0      	push	{r4, r5, r7, lr}
 8001132:	af00      	add	r7, sp, #0
	UT = Get_UTemp();
 8001134:	f7ff ffca 	bl	80010cc <Get_UTemp>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	4b3e      	ldr	r3, [pc, #248]	; (8001238 <BMP180_GetTemp+0x108>)
 800113e:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8001140:	4b3d      	ldr	r3, [pc, #244]	; (8001238 <BMP180_GetTemp+0x108>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a3d      	ldr	r2, [pc, #244]	; (800123c <BMP180_GetTemp+0x10c>)
 8001146:	8812      	ldrh	r2, [r2, #0]
 8001148:	1a9b      	subs	r3, r3, r2
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff f9f2 	bl	8000534 <__aeabi_i2d>
 8001150:	4604      	mov	r4, r0
 8001152:	460d      	mov	r5, r1
 8001154:	4b3a      	ldr	r3, [pc, #232]	; (8001240 <BMP180_GetTemp+0x110>)
 8001156:	881b      	ldrh	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff f9eb 	bl	8000534 <__aeabi_i2d>
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	4b38      	ldr	r3, [pc, #224]	; (8001244 <BMP180_GetTemp+0x114>)
 8001164:	f7ff fb7a 	bl	800085c <__aeabi_ddiv>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4620      	mov	r0, r4
 800116e:	4629      	mov	r1, r5
 8001170:	f7ff fa4a 	bl	8000608 <__aeabi_dmul>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4610      	mov	r0, r2
 800117a:	4619      	mov	r1, r3
 800117c:	f7ff fcf4 	bl	8000b68 <__aeabi_d2iz>
 8001180:	4603      	mov	r3, r0
 8001182:	4a31      	ldr	r2, [pc, #196]	; (8001248 <BMP180_GetTemp+0x118>)
 8001184:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8001186:	4b31      	ldr	r3, [pc, #196]	; (800124c <BMP180_GetTemp+0x11c>)
 8001188:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff f9d1 	bl	8000534 <__aeabi_i2d>
 8001192:	f04f 0200 	mov.w	r2, #0
 8001196:	4b2e      	ldr	r3, [pc, #184]	; (8001250 <BMP180_GetTemp+0x120>)
 8001198:	f7ff fa36 	bl	8000608 <__aeabi_dmul>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4614      	mov	r4, r2
 80011a2:	461d      	mov	r5, r3
 80011a4:	4b2b      	ldr	r3, [pc, #172]	; (8001254 <BMP180_GetTemp+0x124>)
 80011a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011aa:	461a      	mov	r2, r3
 80011ac:	4b26      	ldr	r3, [pc, #152]	; (8001248 <BMP180_GetTemp+0x118>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4413      	add	r3, r2
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff f9be 	bl	8000534 <__aeabi_i2d>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	4620      	mov	r0, r4
 80011be:	4629      	mov	r1, r5
 80011c0:	f7ff fb4c 	bl	800085c <__aeabi_ddiv>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4610      	mov	r0, r2
 80011ca:	4619      	mov	r1, r3
 80011cc:	f7ff fccc 	bl	8000b68 <__aeabi_d2iz>
 80011d0:	4603      	mov	r3, r0
 80011d2:	4a21      	ldr	r2, [pc, #132]	; (8001258 <BMP180_GetTemp+0x128>)
 80011d4:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 80011d6:	4b1c      	ldr	r3, [pc, #112]	; (8001248 <BMP180_GetTemp+0x118>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <BMP180_GetTemp+0x128>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4413      	add	r3, r2
 80011e0:	4a1e      	ldr	r2, [pc, #120]	; (800125c <BMP180_GetTemp+0x12c>)
 80011e2:	6013      	str	r3, [r2, #0]
	Temp = (B5+8)/(pow(2,4));
 80011e4:	4b1d      	ldr	r3, [pc, #116]	; (800125c <BMP180_GetTemp+0x12c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	3308      	adds	r3, #8
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff f9a2 	bl	8000534 <__aeabi_i2d>
 80011f0:	f04f 0200 	mov.w	r2, #0
 80011f4:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <BMP180_GetTemp+0x130>)
 80011f6:	f7ff fb31 	bl	800085c <__aeabi_ddiv>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	4610      	mov	r0, r2
 8001200:	4619      	mov	r1, r3
 8001202:	f7ff fcb1 	bl	8000b68 <__aeabi_d2iz>
 8001206:	4603      	mov	r3, r0
 8001208:	4a16      	ldr	r2, [pc, #88]	; (8001264 <BMP180_GetTemp+0x134>)
 800120a:	6013      	str	r3, [r2, #0]
	return Temp/10.0;
 800120c:	4b15      	ldr	r3, [pc, #84]	; (8001264 <BMP180_GetTemp+0x134>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff f98f 	bl	8000534 <__aeabi_i2d>
 8001216:	f04f 0200 	mov.w	r2, #0
 800121a:	4b13      	ldr	r3, [pc, #76]	; (8001268 <BMP180_GetTemp+0x138>)
 800121c:	f7ff fb1e 	bl	800085c <__aeabi_ddiv>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	f7ff fce6 	bl	8000bf8 <__aeabi_d2f>
 800122c:	4603      	mov	r3, r0
 800122e:	ee07 3a90 	vmov	s15, r3
}
 8001232:	eeb0 0a67 	vmov.f32	s0, s15
 8001236:	bdb0      	pop	{r4, r5, r7, pc}
 8001238:	20000388 	.word	0x20000388
 800123c:	2000037a 	.word	0x2000037a
 8001240:	20000378 	.word	0x20000378
 8001244:	40e00000 	.word	0x40e00000
 8001248:	20000390 	.word	0x20000390
 800124c:	20000382 	.word	0x20000382
 8001250:	40a00000 	.word	0x40a00000
 8001254:	20000384 	.word	0x20000384
 8001258:	20000394 	.word	0x20000394
 800125c:	200003a0 	.word	0x200003a0
 8001260:	40300000 	.word	0x40300000
 8001264:	200003b4 	.word	0x200003b4
 8001268:	40240000 	.word	0x40240000

0800126c <Get_UPress>:

// Get uncompensated Pressure
uint32_t Get_UPress (int oss)   // oversampling setting 0,1,2,3
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b088      	sub	sp, #32
 8001270:	af04      	add	r7, sp, #16
 8001272:	6078      	str	r0, [r7, #4]
	uint8_t datatowrite = 0x34+(oss<<6);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	b2db      	uxtb	r3, r3
 8001278:	019b      	lsls	r3, r3, #6
 800127a:	b2db      	uxtb	r3, r3
 800127c:	3334      	adds	r3, #52	; 0x34
 800127e:	b2db      	uxtb	r3, r3
 8001280:	73fb      	strb	r3, [r7, #15]
	uint8_t Press_RAW[3] = {0};
 8001282:	4b27      	ldr	r3, [pc, #156]	; (8001320 <Get_UPress+0xb4>)
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	81bb      	strh	r3, [r7, #12]
 8001288:	2300      	movs	r3, #0
 800128a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 800128c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001290:	9302      	str	r3, [sp, #8]
 8001292:	2301      	movs	r3, #1
 8001294:	9301      	str	r3, [sp, #4]
 8001296:	f107 030f 	add.w	r3, r7, #15
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	2301      	movs	r3, #1
 800129e:	22f4      	movs	r2, #244	; 0xf4
 80012a0:	21ee      	movs	r1, #238	; 0xee
 80012a2:	4820      	ldr	r0, [pc, #128]	; (8001324 <Get_UPress+0xb8>)
 80012a4:	f001 fa16 	bl	80026d4 <HAL_I2C_Mem_Write>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b03      	cmp	r3, #3
 80012ac:	d81a      	bhi.n	80012e4 <Get_UPress+0x78>
 80012ae:	a201      	add	r2, pc, #4	; (adr r2, 80012b4 <Get_UPress+0x48>)
 80012b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b4:	080012c5 	.word	0x080012c5
 80012b8:	080012cd 	.word	0x080012cd
 80012bc:	080012d5 	.word	0x080012d5
 80012c0:	080012dd 	.word	0x080012dd
	switch (oss)
	{
		case (0):
			HAL_Delay (5);
 80012c4:	2005      	movs	r0, #5
 80012c6:	f000 fe07 	bl	8001ed8 <HAL_Delay>
			break;
 80012ca:	e00b      	b.n	80012e4 <Get_UPress+0x78>
		case (1):
			HAL_Delay (8);
 80012cc:	2008      	movs	r0, #8
 80012ce:	f000 fe03 	bl	8001ed8 <HAL_Delay>
			break;
 80012d2:	e007      	b.n	80012e4 <Get_UPress+0x78>
		case (2):
			HAL_Delay (14);
 80012d4:	200e      	movs	r0, #14
 80012d6:	f000 fdff 	bl	8001ed8 <HAL_Delay>
			break;
 80012da:	e003      	b.n	80012e4 <Get_UPress+0x78>
		case (3):
			HAL_Delay (26);
 80012dc:	201a      	movs	r0, #26
 80012de:	f000 fdfb 	bl	8001ed8 <HAL_Delay>
			break;
 80012e2:	bf00      	nop
	}
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Press_RAW, 3, 1000);
 80012e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e8:	9302      	str	r3, [sp, #8]
 80012ea:	2303      	movs	r3, #3
 80012ec:	9301      	str	r3, [sp, #4]
 80012ee:	f107 030c 	add.w	r3, r7, #12
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	2301      	movs	r3, #1
 80012f6:	22f6      	movs	r2, #246	; 0xf6
 80012f8:	21ee      	movs	r1, #238	; 0xee
 80012fa:	480a      	ldr	r0, [pc, #40]	; (8001324 <Get_UPress+0xb8>)
 80012fc:	f001 fae4 	bl	80028c8 <HAL_I2C_Mem_Read>
	return (((Press_RAW[0]<<16)+(Press_RAW[1]<<8)+Press_RAW[2]) >> (8-oss));
 8001300:	7b3b      	ldrb	r3, [r7, #12]
 8001302:	041a      	lsls	r2, r3, #16
 8001304:	7b7b      	ldrb	r3, [r7, #13]
 8001306:	021b      	lsls	r3, r3, #8
 8001308:	4413      	add	r3, r2
 800130a:	7bba      	ldrb	r2, [r7, #14]
 800130c:	441a      	add	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f1c3 0308 	rsb	r3, r3, #8
 8001314:	fa42 f303 	asr.w	r3, r2, r3
}
 8001318:	4618      	mov	r0, r3
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	0800c680 	.word	0x0800c680
 8001324:	200005e8 	.word	0x200005e8

08001328 <BMP180_GetPress>:


float BMP180_GetPress (int oss)
{
 8001328:	b5b0      	push	{r4, r5, r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	UP = Get_UPress(oss);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff ff9b 	bl	800126c <Get_UPress>
 8001336:	4603      	mov	r3, r0
 8001338:	461a      	mov	r2, r3
 800133a:	4ba8      	ldr	r3, [pc, #672]	; (80015dc <BMP180_GetPress+0x2b4>)
 800133c:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 800133e:	4ba8      	ldr	r3, [pc, #672]	; (80015e0 <BMP180_GetPress+0x2b8>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4aa8      	ldr	r2, [pc, #672]	; (80015e4 <BMP180_GetPress+0x2bc>)
 8001344:	8812      	ldrh	r2, [r2, #0]
 8001346:	1a9b      	subs	r3, r3, r2
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff f8f3 	bl	8000534 <__aeabi_i2d>
 800134e:	4604      	mov	r4, r0
 8001350:	460d      	mov	r5, r1
 8001352:	4ba5      	ldr	r3, [pc, #660]	; (80015e8 <BMP180_GetPress+0x2c0>)
 8001354:	881b      	ldrh	r3, [r3, #0]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff f8ec 	bl	8000534 <__aeabi_i2d>
 800135c:	f04f 0200 	mov.w	r2, #0
 8001360:	4ba2      	ldr	r3, [pc, #648]	; (80015ec <BMP180_GetPress+0x2c4>)
 8001362:	f7ff fa7b 	bl	800085c <__aeabi_ddiv>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4620      	mov	r0, r4
 800136c:	4629      	mov	r1, r5
 800136e:	f7ff f94b 	bl	8000608 <__aeabi_dmul>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4610      	mov	r0, r2
 8001378:	4619      	mov	r1, r3
 800137a:	f7ff fbf5 	bl	8000b68 <__aeabi_d2iz>
 800137e:	4603      	mov	r3, r0
 8001380:	4a9b      	ldr	r2, [pc, #620]	; (80015f0 <BMP180_GetPress+0x2c8>)
 8001382:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8001384:	4b9b      	ldr	r3, [pc, #620]	; (80015f4 <BMP180_GetPress+0x2cc>)
 8001386:	f9b3 3000 	ldrsh.w	r3, [r3]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff f8d2 	bl	8000534 <__aeabi_i2d>
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	4b98      	ldr	r3, [pc, #608]	; (80015f8 <BMP180_GetPress+0x2d0>)
 8001396:	f7ff f937 	bl	8000608 <__aeabi_dmul>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	4614      	mov	r4, r2
 80013a0:	461d      	mov	r5, r3
 80013a2:	4b96      	ldr	r3, [pc, #600]	; (80015fc <BMP180_GetPress+0x2d4>)
 80013a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a8:	461a      	mov	r2, r3
 80013aa:	4b91      	ldr	r3, [pc, #580]	; (80015f0 <BMP180_GetPress+0x2c8>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4413      	add	r3, r2
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff f8bf 	bl	8000534 <__aeabi_i2d>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4620      	mov	r0, r4
 80013bc:	4629      	mov	r1, r5
 80013be:	f7ff fa4d 	bl	800085c <__aeabi_ddiv>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4610      	mov	r0, r2
 80013c8:	4619      	mov	r1, r3
 80013ca:	f7ff fbcd 	bl	8000b68 <__aeabi_d2iz>
 80013ce:	4603      	mov	r3, r0
 80013d0:	4a8b      	ldr	r2, [pc, #556]	; (8001600 <BMP180_GetPress+0x2d8>)
 80013d2:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 80013d4:	4b86      	ldr	r3, [pc, #536]	; (80015f0 <BMP180_GetPress+0x2c8>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4b89      	ldr	r3, [pc, #548]	; (8001600 <BMP180_GetPress+0x2d8>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4413      	add	r3, r2
 80013de:	4a89      	ldr	r2, [pc, #548]	; (8001604 <BMP180_GetPress+0x2dc>)
 80013e0:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 80013e2:	4b88      	ldr	r3, [pc, #544]	; (8001604 <BMP180_GetPress+0x2dc>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 80013ea:	4a87      	ldr	r2, [pc, #540]	; (8001608 <BMP180_GetPress+0x2e0>)
 80013ec:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 80013ee:	4b87      	ldr	r3, [pc, #540]	; (800160c <BMP180_GetPress+0x2e4>)
 80013f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff f89d 	bl	8000534 <__aeabi_i2d>
 80013fa:	4604      	mov	r4, r0
 80013fc:	460d      	mov	r5, r1
 80013fe:	4b82      	ldr	r3, [pc, #520]	; (8001608 <BMP180_GetPress+0x2e0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a81      	ldr	r2, [pc, #516]	; (8001608 <BMP180_GetPress+0x2e0>)
 8001404:	6812      	ldr	r2, [r2, #0]
 8001406:	fb02 f303 	mul.w	r3, r2, r3
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff f892 	bl	8000534 <__aeabi_i2d>
 8001410:	f04f 0200 	mov.w	r2, #0
 8001414:	4b7e      	ldr	r3, [pc, #504]	; (8001610 <BMP180_GetPress+0x2e8>)
 8001416:	f7ff fa21 	bl	800085c <__aeabi_ddiv>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4620      	mov	r0, r4
 8001420:	4629      	mov	r1, r5
 8001422:	f7ff f8f1 	bl	8000608 <__aeabi_dmul>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4610      	mov	r0, r2
 800142c:	4619      	mov	r1, r3
 800142e:	f04f 0200 	mov.w	r2, #0
 8001432:	4b71      	ldr	r3, [pc, #452]	; (80015f8 <BMP180_GetPress+0x2d0>)
 8001434:	f7ff fa12 	bl	800085c <__aeabi_ddiv>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4610      	mov	r0, r2
 800143e:	4619      	mov	r1, r3
 8001440:	f7ff fb92 	bl	8000b68 <__aeabi_d2iz>
 8001444:	4603      	mov	r3, r0
 8001446:	4a6a      	ldr	r2, [pc, #424]	; (80015f0 <BMP180_GetPress+0x2c8>)
 8001448:	6013      	str	r3, [r2, #0]
	X2 = AC2*B6/(pow(2,11));
 800144a:	4b72      	ldr	r3, [pc, #456]	; (8001614 <BMP180_GetPress+0x2ec>)
 800144c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001450:	461a      	mov	r2, r3
 8001452:	4b6d      	ldr	r3, [pc, #436]	; (8001608 <BMP180_GetPress+0x2e0>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	fb03 f302 	mul.w	r3, r3, r2
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff f86a 	bl	8000534 <__aeabi_i2d>
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	4b64      	ldr	r3, [pc, #400]	; (80015f8 <BMP180_GetPress+0x2d0>)
 8001466:	f7ff f9f9 	bl	800085c <__aeabi_ddiv>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	4610      	mov	r0, r2
 8001470:	4619      	mov	r1, r3
 8001472:	f7ff fb79 	bl	8000b68 <__aeabi_d2iz>
 8001476:	4603      	mov	r3, r0
 8001478:	4a61      	ldr	r2, [pc, #388]	; (8001600 <BMP180_GetPress+0x2d8>)
 800147a:	6013      	str	r3, [r2, #0]
	X3 = X1+X2;
 800147c:	4b5c      	ldr	r3, [pc, #368]	; (80015f0 <BMP180_GetPress+0x2c8>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4b5f      	ldr	r3, [pc, #380]	; (8001600 <BMP180_GetPress+0x2d8>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4413      	add	r3, r2
 8001486:	4a64      	ldr	r2, [pc, #400]	; (8001618 <BMP180_GetPress+0x2f0>)
 8001488:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 800148a:	4b64      	ldr	r3, [pc, #400]	; (800161c <BMP180_GetPress+0x2f4>)
 800148c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001490:	009a      	lsls	r2, r3, #2
 8001492:	4b61      	ldr	r3, [pc, #388]	; (8001618 <BMP180_GetPress+0x2f0>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	441a      	add	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	3302      	adds	r3, #2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	da00      	bge.n	80014a6 <BMP180_GetPress+0x17e>
 80014a4:	3303      	adds	r3, #3
 80014a6:	109b      	asrs	r3, r3, #2
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b5d      	ldr	r3, [pc, #372]	; (8001620 <BMP180_GetPress+0x2f8>)
 80014ac:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 80014ae:	4b5d      	ldr	r3, [pc, #372]	; (8001624 <BMP180_GetPress+0x2fc>)
 80014b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b54      	ldr	r3, [pc, #336]	; (8001608 <BMP180_GetPress+0x2e0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	fb03 f302 	mul.w	r3, r3, r2
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff f838 	bl	8000534 <__aeabi_i2d>
 80014c4:	f04f 0200 	mov.w	r2, #0
 80014c8:	4b57      	ldr	r3, [pc, #348]	; (8001628 <BMP180_GetPress+0x300>)
 80014ca:	f7ff f9c7 	bl	800085c <__aeabi_ddiv>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4610      	mov	r0, r2
 80014d4:	4619      	mov	r1, r3
 80014d6:	f7ff fb47 	bl	8000b68 <__aeabi_d2iz>
 80014da:	4603      	mov	r3, r0
 80014dc:	4a44      	ldr	r2, [pc, #272]	; (80015f0 <BMP180_GetPress+0x2c8>)
 80014de:	6013      	str	r3, [r2, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 80014e0:	4b52      	ldr	r3, [pc, #328]	; (800162c <BMP180_GetPress+0x304>)
 80014e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff f824 	bl	8000534 <__aeabi_i2d>
 80014ec:	4604      	mov	r4, r0
 80014ee:	460d      	mov	r5, r1
 80014f0:	4b45      	ldr	r3, [pc, #276]	; (8001608 <BMP180_GetPress+0x2e0>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a44      	ldr	r2, [pc, #272]	; (8001608 <BMP180_GetPress+0x2e0>)
 80014f6:	6812      	ldr	r2, [r2, #0]
 80014f8:	fb02 f303 	mul.w	r3, r2, r3
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff f819 	bl	8000534 <__aeabi_i2d>
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	4b42      	ldr	r3, [pc, #264]	; (8001610 <BMP180_GetPress+0x2e8>)
 8001508:	f7ff f9a8 	bl	800085c <__aeabi_ddiv>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4620      	mov	r0, r4
 8001512:	4629      	mov	r1, r5
 8001514:	f7ff f878 	bl	8000608 <__aeabi_dmul>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4610      	mov	r0, r2
 800151e:	4619      	mov	r1, r3
 8001520:	f04f 0200 	mov.w	r2, #0
 8001524:	4b42      	ldr	r3, [pc, #264]	; (8001630 <BMP180_GetPress+0x308>)
 8001526:	f7ff f999 	bl	800085c <__aeabi_ddiv>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4610      	mov	r0, r2
 8001530:	4619      	mov	r1, r3
 8001532:	f7ff fb19 	bl	8000b68 <__aeabi_d2iz>
 8001536:	4603      	mov	r3, r0
 8001538:	4a31      	ldr	r2, [pc, #196]	; (8001600 <BMP180_GetPress+0x2d8>)
 800153a:	6013      	str	r3, [r2, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 800153c:	4b2c      	ldr	r3, [pc, #176]	; (80015f0 <BMP180_GetPress+0x2c8>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	4b2f      	ldr	r3, [pc, #188]	; (8001600 <BMP180_GetPress+0x2d8>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4413      	add	r3, r2
 8001546:	3302      	adds	r3, #2
 8001548:	4618      	mov	r0, r3
 800154a:	f7fe fff3 	bl	8000534 <__aeabi_i2d>
 800154e:	f04f 0200 	mov.w	r2, #0
 8001552:	4b38      	ldr	r3, [pc, #224]	; (8001634 <BMP180_GetPress+0x30c>)
 8001554:	f7ff f982 	bl	800085c <__aeabi_ddiv>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4610      	mov	r0, r2
 800155e:	4619      	mov	r1, r3
 8001560:	f7ff fb02 	bl	8000b68 <__aeabi_d2iz>
 8001564:	4603      	mov	r3, r0
 8001566:	4a2c      	ldr	r2, [pc, #176]	; (8001618 <BMP180_GetPress+0x2f0>)
 8001568:	6013      	str	r3, [r2, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 800156a:	4b33      	ldr	r3, [pc, #204]	; (8001638 <BMP180_GetPress+0x310>)
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	461a      	mov	r2, r3
 8001570:	4b29      	ldr	r3, [pc, #164]	; (8001618 <BMP180_GetPress+0x2f0>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001578:	fb03 f302 	mul.w	r3, r3, r2
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe ffc9 	bl	8000514 <__aeabi_ui2d>
 8001582:	f04f 0200 	mov.w	r2, #0
 8001586:	4b19      	ldr	r3, [pc, #100]	; (80015ec <BMP180_GetPress+0x2c4>)
 8001588:	f7ff f968 	bl	800085c <__aeabi_ddiv>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	4610      	mov	r0, r2
 8001592:	4619      	mov	r1, r3
 8001594:	f7ff fb10 	bl	8000bb8 <__aeabi_d2uiz>
 8001598:	4603      	mov	r3, r0
 800159a:	4a28      	ldr	r2, [pc, #160]	; (800163c <BMP180_GetPress+0x314>)
 800159c:	6013      	str	r3, [r2, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>oss);
 800159e:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <BMP180_GetPress+0x2b4>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	461a      	mov	r2, r3
 80015a4:	4b1e      	ldr	r3, [pc, #120]	; (8001620 <BMP180_GetPress+0x2f8>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	f24c 3150 	movw	r1, #50000	; 0xc350
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	fa41 f202 	asr.w	r2, r1, r2
 80015b4:	fb02 f303 	mul.w	r3, r2, r3
 80015b8:	4a21      	ldr	r2, [pc, #132]	; (8001640 <BMP180_GetPress+0x318>)
 80015ba:	6013      	str	r3, [r2, #0]
	if (B7<0x80000000) Press = (B7*2)/B4;
 80015bc:	4b20      	ldr	r3, [pc, #128]	; (8001640 <BMP180_GetPress+0x318>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	db41      	blt.n	8001648 <BMP180_GetPress+0x320>
 80015c4:	4b1e      	ldr	r3, [pc, #120]	; (8001640 <BMP180_GetPress+0x318>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	005a      	lsls	r2, r3, #1
 80015ca:	4b1c      	ldr	r3, [pc, #112]	; (800163c <BMP180_GetPress+0x314>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d2:	461a      	mov	r2, r3
 80015d4:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <BMP180_GetPress+0x31c>)
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	e040      	b.n	800165c <BMP180_GetPress+0x334>
 80015da:	bf00      	nop
 80015dc:	2000038c 	.word	0x2000038c
 80015e0:	20000388 	.word	0x20000388
 80015e4:	2000037a 	.word	0x2000037a
 80015e8:	20000378 	.word	0x20000378
 80015ec:	40e00000 	.word	0x40e00000
 80015f0:	20000390 	.word	0x20000390
 80015f4:	20000382 	.word	0x20000382
 80015f8:	40a00000 	.word	0x40a00000
 80015fc:	20000384 	.word	0x20000384
 8001600:	20000394 	.word	0x20000394
 8001604:	200003a0 	.word	0x200003a0
 8001608:	200003a8 	.word	0x200003a8
 800160c:	2000037e 	.word	0x2000037e
 8001610:	40b00000 	.word	0x40b00000
 8001614:	20000372 	.word	0x20000372
 8001618:	20000398 	.word	0x20000398
 800161c:	20000370 	.word	0x20000370
 8001620:	2000039c 	.word	0x2000039c
 8001624:	20000374 	.word	0x20000374
 8001628:	40c00000 	.word	0x40c00000
 800162c:	2000037c 	.word	0x2000037c
 8001630:	40f00000 	.word	0x40f00000
 8001634:	40100000 	.word	0x40100000
 8001638:	20000376 	.word	0x20000376
 800163c:	200003a4 	.word	0x200003a4
 8001640:	200003ac 	.word	0x200003ac
 8001644:	200003b0 	.word	0x200003b0
	else Press = (B7/B4)*2;
 8001648:	4b46      	ldr	r3, [pc, #280]	; (8001764 <BMP180_GetPress+0x43c>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	4b46      	ldr	r3, [pc, #280]	; (8001768 <BMP180_GetPress+0x440>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	fbb2 f3f3 	udiv	r3, r2, r3
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	461a      	mov	r2, r3
 8001658:	4b44      	ldr	r3, [pc, #272]	; (800176c <BMP180_GetPress+0x444>)
 800165a:	601a      	str	r2, [r3, #0]
	X1 = (Press/(pow(2,8)))*(Press/(pow(2,8)));
 800165c:	4b43      	ldr	r3, [pc, #268]	; (800176c <BMP180_GetPress+0x444>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe ff67 	bl	8000534 <__aeabi_i2d>
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	4b41      	ldr	r3, [pc, #260]	; (8001770 <BMP180_GetPress+0x448>)
 800166c:	f7ff f8f6 	bl	800085c <__aeabi_ddiv>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4614      	mov	r4, r2
 8001676:	461d      	mov	r5, r3
 8001678:	4b3c      	ldr	r3, [pc, #240]	; (800176c <BMP180_GetPress+0x444>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe ff59 	bl	8000534 <__aeabi_i2d>
 8001682:	f04f 0200 	mov.w	r2, #0
 8001686:	4b3a      	ldr	r3, [pc, #232]	; (8001770 <BMP180_GetPress+0x448>)
 8001688:	f7ff f8e8 	bl	800085c <__aeabi_ddiv>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4620      	mov	r0, r4
 8001692:	4629      	mov	r1, r5
 8001694:	f7fe ffb8 	bl	8000608 <__aeabi_dmul>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4610      	mov	r0, r2
 800169e:	4619      	mov	r1, r3
 80016a0:	f7ff fa62 	bl	8000b68 <__aeabi_d2iz>
 80016a4:	4603      	mov	r3, r0
 80016a6:	4a33      	ldr	r2, [pc, #204]	; (8001774 <BMP180_GetPress+0x44c>)
 80016a8:	6013      	str	r3, [r2, #0]
	X1 = (X1*3038)/(pow(2,16));
 80016aa:	4b32      	ldr	r3, [pc, #200]	; (8001774 <BMP180_GetPress+0x44c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f640 32de 	movw	r2, #3038	; 0xbde
 80016b2:	fb02 f303 	mul.w	r3, r2, r3
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7fe ff3c 	bl	8000534 <__aeabi_i2d>
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	4b2d      	ldr	r3, [pc, #180]	; (8001778 <BMP180_GetPress+0x450>)
 80016c2:	f7ff f8cb 	bl	800085c <__aeabi_ddiv>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	4610      	mov	r0, r2
 80016cc:	4619      	mov	r1, r3
 80016ce:	f7ff fa4b 	bl	8000b68 <__aeabi_d2iz>
 80016d2:	4603      	mov	r3, r0
 80016d4:	4a27      	ldr	r2, [pc, #156]	; (8001774 <BMP180_GetPress+0x44c>)
 80016d6:	6013      	str	r3, [r2, #0]
	X2 = (-7357*Press)/(pow(2,16));
 80016d8:	4b24      	ldr	r3, [pc, #144]	; (800176c <BMP180_GetPress+0x444>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a27      	ldr	r2, [pc, #156]	; (800177c <BMP180_GetPress+0x454>)
 80016de:	fb02 f303 	mul.w	r3, r2, r3
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7fe ff26 	bl	8000534 <__aeabi_i2d>
 80016e8:	f04f 0200 	mov.w	r2, #0
 80016ec:	4b22      	ldr	r3, [pc, #136]	; (8001778 <BMP180_GetPress+0x450>)
 80016ee:	f7ff f8b5 	bl	800085c <__aeabi_ddiv>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4610      	mov	r0, r2
 80016f8:	4619      	mov	r1, r3
 80016fa:	f7ff fa35 	bl	8000b68 <__aeabi_d2iz>
 80016fe:	4603      	mov	r3, r0
 8001700:	4a1f      	ldr	r2, [pc, #124]	; (8001780 <BMP180_GetPress+0x458>)
 8001702:	6013      	str	r3, [r2, #0]
	Press = Press + (X1+X2+3791)/(pow(2,4));
 8001704:	4b19      	ldr	r3, [pc, #100]	; (800176c <BMP180_GetPress+0x444>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe ff13 	bl	8000534 <__aeabi_i2d>
 800170e:	4604      	mov	r4, r0
 8001710:	460d      	mov	r5, r1
 8001712:	4b18      	ldr	r3, [pc, #96]	; (8001774 <BMP180_GetPress+0x44c>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <BMP180_GetPress+0x458>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4413      	add	r3, r2
 800171c:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001720:	4618      	mov	r0, r3
 8001722:	f7fe ff07 	bl	8000534 <__aeabi_i2d>
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	4b16      	ldr	r3, [pc, #88]	; (8001784 <BMP180_GetPress+0x45c>)
 800172c:	f7ff f896 	bl	800085c <__aeabi_ddiv>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4620      	mov	r0, r4
 8001736:	4629      	mov	r1, r5
 8001738:	f7fe fdb0 	bl	800029c <__adddf3>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	f7ff fa10 	bl	8000b68 <__aeabi_d2iz>
 8001748:	4603      	mov	r3, r0
 800174a:	4a08      	ldr	r2, [pc, #32]	; (800176c <BMP180_GetPress+0x444>)
 800174c:	6013      	str	r3, [r2, #0]

	return Press;
 800174e:	4b07      	ldr	r3, [pc, #28]	; (800176c <BMP180_GetPress+0x444>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	ee07 3a90 	vmov	s15, r3
 8001756:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800175a:	eeb0 0a67 	vmov.f32	s0, s15
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bdb0      	pop	{r4, r5, r7, pc}
 8001764:	200003ac 	.word	0x200003ac
 8001768:	200003a4 	.word	0x200003a4
 800176c:	200003b0 	.word	0x200003b0
 8001770:	40700000 	.word	0x40700000
 8001774:	20000390 	.word	0x20000390
 8001778:	40f00000 	.word	0x40f00000
 800177c:	ffffe343 	.word	0xffffe343
 8001780:	20000394 	.word	0x20000394
 8001784:	40300000 	.word	0x40300000

08001788 <BMP180_GetAlt>:


float BMP180_GetAlt (int oss)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	BMP180_GetPress (oss);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff fdc9 	bl	8001328 <BMP180_GetPress>
	return 44330*(1-(pow((Press/(float)atmPress), 0.19029495718)));
 8001796:	4b1e      	ldr	r3, [pc, #120]	; (8001810 <BMP180_GetAlt+0x88>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	ee07 3a90 	vmov	s15, r3
 800179e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017a2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001814 <BMP180_GetAlt+0x8c>
 80017a6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80017aa:	ee16 0a90 	vmov	r0, s13
 80017ae:	f7fe fed3 	bl	8000558 <__aeabi_f2d>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8001800 <BMP180_GetAlt+0x78>
 80017ba:	ec43 2b10 	vmov	d0, r2, r3
 80017be:	f009 ff9d 	bl	800b6fc <pow>
 80017c2:	ec53 2b10 	vmov	r2, r3, d0
 80017c6:	f04f 0000 	mov.w	r0, #0
 80017ca:	4913      	ldr	r1, [pc, #76]	; (8001818 <BMP180_GetAlt+0x90>)
 80017cc:	f7fe fd64 	bl	8000298 <__aeabi_dsub>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	a30b      	add	r3, pc, #44	; (adr r3, 8001808 <BMP180_GetAlt+0x80>)
 80017da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017de:	f7fe ff13 	bl	8000608 <__aeabi_dmul>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4610      	mov	r0, r2
 80017e8:	4619      	mov	r1, r3
 80017ea:	f7ff fa05 	bl	8000bf8 <__aeabi_d2f>
 80017ee:	4603      	mov	r3, r0
 80017f0:	ee07 3a90 	vmov	s15, r3
}
 80017f4:	eeb0 0a67 	vmov.f32	s0, s15
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	ccd745e4 	.word	0xccd745e4
 8001804:	3fc85b95 	.word	0x3fc85b95
 8001808:	00000000 	.word	0x00000000
 800180c:	40e5a540 	.word	0x40e5a540
 8001810:	200003b0 	.word	0x200003b0
 8001814:	47c5e680 	.word	0x47c5e680
 8001818:	3ff00000 	.word	0x3ff00000

0800181c <BMP180_Start>:

void BMP180_Start (void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
	read_calliberation_data();
 8001820:	f7ff fbb6 	bl	8000f90 <read_calliberation_data>
}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}

08001828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800182c:	f000 fae2 	bl	8001df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001830:	f000 f868 	bl	8001904 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001834:	f000 f8fc 	bl	8001a30 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001838:	f000 f8cc 	bl	80019d4 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 800183c:	f006 fb86 	bl	8007f4c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  BMP180_Start();
 8001840:	f7ff ffec 	bl	800181c <BMP180_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Temp = BMP180_GetTemp();
 8001844:	f7ff fc74 	bl	8001130 <BMP180_GetTemp>
 8001848:	eef0 7a40 	vmov.f32	s15, s0
 800184c:	4b26      	ldr	r3, [pc, #152]	; (80018e8 <main+0xc0>)
 800184e:	edc3 7a00 	vstr	s15, [r3]
	  sprintf(buffer,"Temperature:%.2f\n",Temp);
 8001852:	4b25      	ldr	r3, [pc, #148]	; (80018e8 <main+0xc0>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe fe7e 	bl	8000558 <__aeabi_f2d>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4922      	ldr	r1, [pc, #136]	; (80018ec <main+0xc4>)
 8001862:	4823      	ldr	r0, [pc, #140]	; (80018f0 <main+0xc8>)
 8001864:	f007 fd1e 	bl	80092a4 <siprintf>
	  CDC_Transmit_FS(buffer,sizeof(buffer));
 8001868:	2114      	movs	r1, #20
 800186a:	4821      	ldr	r0, [pc, #132]	; (80018f0 <main+0xc8>)
 800186c:	f006 fc2c 	bl	80080c8 <CDC_Transmit_FS>
	  HAL_Delay(1000);
 8001870:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001874:	f000 fb30 	bl	8001ed8 <HAL_Delay>
	  Pressude=BMP180_GetPress(0);
 8001878:	2000      	movs	r0, #0
 800187a:	f7ff fd55 	bl	8001328 <BMP180_GetPress>
 800187e:	eef0 7a40 	vmov.f32	s15, s0
 8001882:	4b1c      	ldr	r3, [pc, #112]	; (80018f4 <main+0xcc>)
 8001884:	edc3 7a00 	vstr	s15, [r3]
	  sprintf(buffer,"Pressude:%.2f\n",Pressude);
 8001888:	4b1a      	ldr	r3, [pc, #104]	; (80018f4 <main+0xcc>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fe63 	bl	8000558 <__aeabi_f2d>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4918      	ldr	r1, [pc, #96]	; (80018f8 <main+0xd0>)
 8001898:	4815      	ldr	r0, [pc, #84]	; (80018f0 <main+0xc8>)
 800189a:	f007 fd03 	bl	80092a4 <siprintf>
	  CDC_Transmit_FS(buffer,sizeof(buffer));
 800189e:	2114      	movs	r1, #20
 80018a0:	4813      	ldr	r0, [pc, #76]	; (80018f0 <main+0xc8>)
 80018a2:	f006 fc11 	bl	80080c8 <CDC_Transmit_FS>
	  HAL_Delay(1000);
 80018a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018aa:	f000 fb15 	bl	8001ed8 <HAL_Delay>
	  Altitude=BMP180_GetAlt(0);
 80018ae:	2000      	movs	r0, #0
 80018b0:	f7ff ff6a 	bl	8001788 <BMP180_GetAlt>
 80018b4:	eef0 7a40 	vmov.f32	s15, s0
 80018b8:	4b10      	ldr	r3, [pc, #64]	; (80018fc <main+0xd4>)
 80018ba:	edc3 7a00 	vstr	s15, [r3]
	  sprintf(buffer,"Altitude:%.2f\n",Altitude);
 80018be:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <main+0xd4>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7fe fe48 	bl	8000558 <__aeabi_f2d>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	490c      	ldr	r1, [pc, #48]	; (8001900 <main+0xd8>)
 80018ce:	4808      	ldr	r0, [pc, #32]	; (80018f0 <main+0xc8>)
 80018d0:	f007 fce8 	bl	80092a4 <siprintf>
	  CDC_Transmit_FS(buffer,sizeof(buffer));
 80018d4:	2114      	movs	r1, #20
 80018d6:	4806      	ldr	r0, [pc, #24]	; (80018f0 <main+0xc8>)
 80018d8:	f006 fbf6 	bl	80080c8 <CDC_Transmit_FS>
	  HAL_Delay(1000);
 80018dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018e0:	f000 fafa 	bl	8001ed8 <HAL_Delay>
  {
 80018e4:	e7ae      	b.n	8001844 <main+0x1c>
 80018e6:	bf00      	nop
 80018e8:	200003b4 	.word	0x200003b4
 80018ec:	0800c684 	.word	0x0800c684
 80018f0:	20000644 	.word	0x20000644
 80018f4:	2000063c 	.word	0x2000063c
 80018f8:	0800c698 	.word	0x0800c698
 80018fc:	20000640 	.word	0x20000640
 8001900:	0800c6a8 	.word	0x0800c6a8

08001904 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b094      	sub	sp, #80	; 0x50
 8001908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800190a:	f107 0320 	add.w	r3, r7, #32
 800190e:	2230      	movs	r2, #48	; 0x30
 8001910:	2100      	movs	r1, #0
 8001912:	4618      	mov	r0, r3
 8001914:	f007 f854 	bl	80089c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001918:	f107 030c 	add.w	r3, r7, #12
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001928:	2300      	movs	r3, #0
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	4b27      	ldr	r3, [pc, #156]	; (80019cc <SystemClock_Config+0xc8>)
 800192e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001930:	4a26      	ldr	r2, [pc, #152]	; (80019cc <SystemClock_Config+0xc8>)
 8001932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001936:	6413      	str	r3, [r2, #64]	; 0x40
 8001938:	4b24      	ldr	r3, [pc, #144]	; (80019cc <SystemClock_Config+0xc8>)
 800193a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001944:	2300      	movs	r3, #0
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	4b21      	ldr	r3, [pc, #132]	; (80019d0 <SystemClock_Config+0xcc>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a20      	ldr	r2, [pc, #128]	; (80019d0 <SystemClock_Config+0xcc>)
 800194e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001952:	6013      	str	r3, [r2, #0]
 8001954:	4b1e      	ldr	r3, [pc, #120]	; (80019d0 <SystemClock_Config+0xcc>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001960:	2301      	movs	r3, #1
 8001962:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001964:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800196a:	2302      	movs	r3, #2
 800196c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800196e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001972:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001974:	230f      	movs	r3, #15
 8001976:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001978:	2390      	movs	r3, #144	; 0x90
 800197a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800197c:	2304      	movs	r3, #4
 800197e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001980:	2305      	movs	r3, #5
 8001982:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001984:	f107 0320 	add.w	r3, r7, #32
 8001988:	4618      	mov	r0, r3
 800198a:	f002 fea1 	bl	80046d0 <HAL_RCC_OscConfig>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001994:	f000 f882 	bl	8001a9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001998:	230f      	movs	r3, #15
 800199a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800199c:	2302      	movs	r3, #2
 800199e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019aa:	2300      	movs	r3, #0
 80019ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80019ae:	f107 030c 	add.w	r3, r7, #12
 80019b2:	2101      	movs	r1, #1
 80019b4:	4618      	mov	r0, r3
 80019b6:	f003 f903 	bl	8004bc0 <HAL_RCC_ClockConfig>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80019c0:	f000 f86c 	bl	8001a9c <Error_Handler>
  }
}
 80019c4:	bf00      	nop
 80019c6:	3750      	adds	r7, #80	; 0x50
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40007000 	.word	0x40007000

080019d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <MX_I2C1_Init+0x50>)
 80019da:	4a13      	ldr	r2, [pc, #76]	; (8001a28 <MX_I2C1_Init+0x54>)
 80019dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019de:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <MX_I2C1_Init+0x50>)
 80019e0:	4a12      	ldr	r2, [pc, #72]	; (8001a2c <MX_I2C1_Init+0x58>)
 80019e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019e4:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <MX_I2C1_Init+0x50>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019ea:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <MX_I2C1_Init+0x50>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <MX_I2C1_Init+0x50>)
 80019f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019f8:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <MX_I2C1_Init+0x50>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <MX_I2C1_Init+0x50>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a04:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <MX_I2C1_Init+0x50>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a0a:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <MX_I2C1_Init+0x50>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a10:	4804      	ldr	r0, [pc, #16]	; (8001a24 <MX_I2C1_Init+0x50>)
 8001a12:	f000 fd1b 	bl	800244c <HAL_I2C_Init>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a1c:	f000 f83e 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	200005e8 	.word	0x200005e8
 8001a28:	40005400 	.word	0x40005400
 8001a2c:	000186a0 	.word	0x000186a0

08001a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <MX_GPIO_Init+0x68>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a16      	ldr	r2, [pc, #88]	; (8001a98 <MX_GPIO_Init+0x68>)
 8001a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
 8001a46:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <MX_GPIO_Init+0x68>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <MX_GPIO_Init+0x68>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	4a0f      	ldr	r2, [pc, #60]	; (8001a98 <MX_GPIO_Init+0x68>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	6313      	str	r3, [r2, #48]	; 0x30
 8001a62:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <MX_GPIO_Init+0x68>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	60bb      	str	r3, [r7, #8]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	607b      	str	r3, [r7, #4]
 8001a72:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <MX_GPIO_Init+0x68>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	4a08      	ldr	r2, [pc, #32]	; (8001a98 <MX_GPIO_Init+0x68>)
 8001a78:	f043 0302 	orr.w	r3, r3, #2
 8001a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7e:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <MX_GPIO_Init+0x68>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]

}
 8001a8a:	bf00      	nop
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	40023800 	.word	0x40023800

08001a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa0:	b672      	cpsid	i
}
 8001aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <Error_Handler+0x8>
	...

08001aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	607b      	str	r3, [r7, #4]
 8001ab2:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <HAL_MspInit+0x4c>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	4a0f      	ldr	r2, [pc, #60]	; (8001af4 <HAL_MspInit+0x4c>)
 8001ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001abc:	6453      	str	r3, [r2, #68]	; 0x44
 8001abe:	4b0d      	ldr	r3, [pc, #52]	; (8001af4 <HAL_MspInit+0x4c>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ac6:	607b      	str	r3, [r7, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	603b      	str	r3, [r7, #0]
 8001ace:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <HAL_MspInit+0x4c>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	4a08      	ldr	r2, [pc, #32]	; (8001af4 <HAL_MspInit+0x4c>)
 8001ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8001ada:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <HAL_MspInit+0x4c>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae2:	603b      	str	r3, [r7, #0]
 8001ae4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800

08001af8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08a      	sub	sp, #40	; 0x28
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b00:	f107 0314 	add.w	r3, r7, #20
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a19      	ldr	r2, [pc, #100]	; (8001b7c <HAL_I2C_MspInit+0x84>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d12b      	bne.n	8001b72 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	4b18      	ldr	r3, [pc, #96]	; (8001b80 <HAL_I2C_MspInit+0x88>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	4a17      	ldr	r2, [pc, #92]	; (8001b80 <HAL_I2C_MspInit+0x88>)
 8001b24:	f043 0302 	orr.w	r3, r3, #2
 8001b28:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2a:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <HAL_I2C_MspInit+0x88>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b36:	23c0      	movs	r3, #192	; 0xc0
 8001b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b3a:	2312      	movs	r3, #18
 8001b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b42:	2303      	movs	r3, #3
 8001b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b46:	2304      	movs	r3, #4
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b4a:	f107 0314 	add.w	r3, r7, #20
 8001b4e:	4619      	mov	r1, r3
 8001b50:	480c      	ldr	r0, [pc, #48]	; (8001b84 <HAL_I2C_MspInit+0x8c>)
 8001b52:	f000 faf7 	bl	8002144 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <HAL_I2C_MspInit+0x88>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	4a08      	ldr	r2, [pc, #32]	; (8001b80 <HAL_I2C_MspInit+0x88>)
 8001b60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b64:	6413      	str	r3, [r2, #64]	; 0x40
 8001b66:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <HAL_I2C_MspInit+0x88>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b72:	bf00      	nop
 8001b74:	3728      	adds	r7, #40	; 0x28
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40005400 	.word	0x40005400
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40020400 	.word	0x40020400

08001b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b8c:	e7fe      	b.n	8001b8c <NMI_Handler+0x4>

08001b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b92:	e7fe      	b.n	8001b92 <HardFault_Handler+0x4>

08001b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b98:	e7fe      	b.n	8001b98 <MemManage_Handler+0x4>

08001b9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b9e:	e7fe      	b.n	8001b9e <BusFault_Handler+0x4>

08001ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ba4:	e7fe      	b.n	8001ba4 <UsageFault_Handler+0x4>

08001ba6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bd4:	f000 f960 	bl	8001e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001be0:	4802      	ldr	r0, [pc, #8]	; (8001bec <OTG_FS_IRQHandler+0x10>)
 8001be2:	f001 fd42 	bl	800366a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20001b2c 	.word	0x20001b2c

08001bf0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
	return 1;
 8001bf4:	2301      	movs	r3, #1
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <_kill>:

int _kill(int pid, int sig)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c0a:	f006 feaf 	bl	800896c <__errno>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2216      	movs	r2, #22
 8001c12:	601a      	str	r2, [r3, #0]
	return -1;
 8001c14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <_exit>:

void _exit (int status)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c28:	f04f 31ff 	mov.w	r1, #4294967295
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f7ff ffe7 	bl	8001c00 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c32:	e7fe      	b.n	8001c32 <_exit+0x12>

08001c34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
 8001c44:	e00a      	b.n	8001c5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c46:	f3af 8000 	nop.w
 8001c4a:	4601      	mov	r1, r0
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	1c5a      	adds	r2, r3, #1
 8001c50:	60ba      	str	r2, [r7, #8]
 8001c52:	b2ca      	uxtb	r2, r1
 8001c54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	617b      	str	r3, [r7, #20]
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	dbf0      	blt.n	8001c46 <_read+0x12>
	}

return len;
 8001c64:	687b      	ldr	r3, [r7, #4]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b086      	sub	sp, #24
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	60f8      	str	r0, [r7, #12]
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	e009      	b.n	8001c94 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	1c5a      	adds	r2, r3, #1
 8001c84:	60ba      	str	r2, [r7, #8]
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	3301      	adds	r3, #1
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	dbf1      	blt.n	8001c80 <_write+0x12>
	}
	return len;
 8001c9c:	687b      	ldr	r3, [r7, #4]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <_close>:

int _close(int file)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
	return -1;
 8001cae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cce:	605a      	str	r2, [r3, #4]
	return 0;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <_isatty>:

int _isatty(int file)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
	return 1;
 8001ce6:	2301      	movs	r3, #1
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
	return 0;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3714      	adds	r7, #20
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
	...

08001d10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d18:	4a14      	ldr	r2, [pc, #80]	; (8001d6c <_sbrk+0x5c>)
 8001d1a:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <_sbrk+0x60>)
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d24:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <_sbrk+0x64>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d102      	bne.n	8001d32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d2c:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <_sbrk+0x64>)
 8001d2e:	4a12      	ldr	r2, [pc, #72]	; (8001d78 <_sbrk+0x68>)
 8001d30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d32:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <_sbrk+0x64>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d207      	bcs.n	8001d50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d40:	f006 fe14 	bl	800896c <__errno>
 8001d44:	4603      	mov	r3, r0
 8001d46:	220c      	movs	r2, #12
 8001d48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4e:	e009      	b.n	8001d64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d50:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <_sbrk+0x64>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d56:	4b07      	ldr	r3, [pc, #28]	; (8001d74 <_sbrk+0x64>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	4a05      	ldr	r2, [pc, #20]	; (8001d74 <_sbrk+0x64>)
 8001d60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d62:	68fb      	ldr	r3, [r7, #12]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20020000 	.word	0x20020000
 8001d70:	00000400 	.word	0x00000400
 8001d74:	200003b8 	.word	0x200003b8
 8001d78:	20001f48 	.word	0x20001f48

08001d7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d80:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <SystemInit+0x20>)
 8001d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d86:	4a05      	ldr	r2, [pc, #20]	; (8001d9c <SystemInit+0x20>)
 8001d88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001da0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001da4:	480d      	ldr	r0, [pc, #52]	; (8001ddc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001da6:	490e      	ldr	r1, [pc, #56]	; (8001de0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001da8:	4a0e      	ldr	r2, [pc, #56]	; (8001de4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001daa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dac:	e002      	b.n	8001db4 <LoopCopyDataInit>

08001dae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001db0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001db2:	3304      	adds	r3, #4

08001db4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001db4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001db6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001db8:	d3f9      	bcc.n	8001dae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dba:	4a0b      	ldr	r2, [pc, #44]	; (8001de8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001dbc:	4c0b      	ldr	r4, [pc, #44]	; (8001dec <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dc0:	e001      	b.n	8001dc6 <LoopFillZerobss>

08001dc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dc4:	3204      	adds	r2, #4

08001dc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dc8:	d3fb      	bcc.n	8001dc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001dca:	f7ff ffd7 	bl	8001d7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dce:	f006 fdd3 	bl	8008978 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dd2:	f7ff fd29 	bl	8001828 <main>
  bx  lr    
 8001dd6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001dd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001de0:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 8001de4:	0800cb50 	.word	0x0800cb50
  ldr r2, =_sbss
 8001de8:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 8001dec:	20001f44 	.word	0x20001f44

08001df0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001df0:	e7fe      	b.n	8001df0 <ADC_IRQHandler>
	...

08001df4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001df8:	4b0e      	ldr	r3, [pc, #56]	; (8001e34 <HAL_Init+0x40>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a0d      	ldr	r2, [pc, #52]	; (8001e34 <HAL_Init+0x40>)
 8001dfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e04:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <HAL_Init+0x40>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a0a      	ldr	r2, [pc, #40]	; (8001e34 <HAL_Init+0x40>)
 8001e0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e10:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <HAL_Init+0x40>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a07      	ldr	r2, [pc, #28]	; (8001e34 <HAL_Init+0x40>)
 8001e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e1c:	2003      	movs	r0, #3
 8001e1e:	f000 f94f 	bl	80020c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e22:	2000      	movs	r0, #0
 8001e24:	f000 f808 	bl	8001e38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e28:	f7ff fe3e 	bl	8001aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40023c00 	.word	0x40023c00

08001e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e40:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <HAL_InitTick+0x54>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <HAL_InitTick+0x58>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	4619      	mov	r1, r3
 8001e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e56:	4618      	mov	r0, r3
 8001e58:	f000 f967 	bl	800212a <HAL_SYSTICK_Config>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e00e      	b.n	8001e84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b0f      	cmp	r3, #15
 8001e6a:	d80a      	bhi.n	8001e82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	f04f 30ff 	mov.w	r0, #4294967295
 8001e74:	f000 f92f 	bl	80020d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e78:	4a06      	ldr	r2, [pc, #24]	; (8001e94 <HAL_InitTick+0x5c>)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	e000      	b.n	8001e84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20000000 	.word	0x20000000
 8001e90:	20000008 	.word	0x20000008
 8001e94:	20000004 	.word	0x20000004

08001e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e9c:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <HAL_IncTick+0x20>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <HAL_IncTick+0x24>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	4a04      	ldr	r2, [pc, #16]	; (8001ebc <HAL_IncTick+0x24>)
 8001eaa:	6013      	str	r3, [r2, #0]
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	20000008 	.word	0x20000008
 8001ebc:	20000658 	.word	0x20000658

08001ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec4:	4b03      	ldr	r3, [pc, #12]	; (8001ed4 <HAL_GetTick+0x14>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	20000658 	.word	0x20000658

08001ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ee0:	f7ff ffee 	bl	8001ec0 <HAL_GetTick>
 8001ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef0:	d005      	beq.n	8001efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ef2:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <HAL_Delay+0x44>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4413      	add	r3, r2
 8001efc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001efe:	bf00      	nop
 8001f00:	f7ff ffde 	bl	8001ec0 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d8f7      	bhi.n	8001f00 <HAL_Delay+0x28>
  {
  }
}
 8001f10:	bf00      	nop
 8001f12:	bf00      	nop
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000008 	.word	0x20000008

08001f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f30:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <__NVIC_SetPriorityGrouping+0x44>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f52:	4a04      	ldr	r2, [pc, #16]	; (8001f64 <__NVIC_SetPriorityGrouping+0x44>)
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	60d3      	str	r3, [r2, #12]
}
 8001f58:	bf00      	nop
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f6c:	4b04      	ldr	r3, [pc, #16]	; (8001f80 <__NVIC_GetPriorityGrouping+0x18>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	0a1b      	lsrs	r3, r3, #8
 8001f72:	f003 0307 	and.w	r3, r3, #7
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	db0b      	blt.n	8001fae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	f003 021f 	and.w	r2, r3, #31
 8001f9c:	4907      	ldr	r1, [pc, #28]	; (8001fbc <__NVIC_EnableIRQ+0x38>)
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	095b      	lsrs	r3, r3, #5
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8001faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	e000e100 	.word	0xe000e100

08001fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	6039      	str	r1, [r7, #0]
 8001fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	db0a      	blt.n	8001fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	490c      	ldr	r1, [pc, #48]	; (800200c <__NVIC_SetPriority+0x4c>)
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	0112      	lsls	r2, r2, #4
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe8:	e00a      	b.n	8002000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	4908      	ldr	r1, [pc, #32]	; (8002010 <__NVIC_SetPriority+0x50>)
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	3b04      	subs	r3, #4
 8001ff8:	0112      	lsls	r2, r2, #4
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	761a      	strb	r2, [r3, #24]
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	e000e100 	.word	0xe000e100
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002014:	b480      	push	{r7}
 8002016:	b089      	sub	sp, #36	; 0x24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f1c3 0307 	rsb	r3, r3, #7
 800202e:	2b04      	cmp	r3, #4
 8002030:	bf28      	it	cs
 8002032:	2304      	movcs	r3, #4
 8002034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3304      	adds	r3, #4
 800203a:	2b06      	cmp	r3, #6
 800203c:	d902      	bls.n	8002044 <NVIC_EncodePriority+0x30>
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3b03      	subs	r3, #3
 8002042:	e000      	b.n	8002046 <NVIC_EncodePriority+0x32>
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002048:	f04f 32ff 	mov.w	r2, #4294967295
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43da      	mvns	r2, r3
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	401a      	ands	r2, r3
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800205c:	f04f 31ff 	mov.w	r1, #4294967295
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	fa01 f303 	lsl.w	r3, r1, r3
 8002066:	43d9      	mvns	r1, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800206c:	4313      	orrs	r3, r2
         );
}
 800206e:	4618      	mov	r0, r3
 8002070:	3724      	adds	r7, #36	; 0x24
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
	...

0800207c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3b01      	subs	r3, #1
 8002088:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800208c:	d301      	bcc.n	8002092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800208e:	2301      	movs	r3, #1
 8002090:	e00f      	b.n	80020b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002092:	4a0a      	ldr	r2, [pc, #40]	; (80020bc <SysTick_Config+0x40>)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3b01      	subs	r3, #1
 8002098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800209a:	210f      	movs	r1, #15
 800209c:	f04f 30ff 	mov.w	r0, #4294967295
 80020a0:	f7ff ff8e 	bl	8001fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020a4:	4b05      	ldr	r3, [pc, #20]	; (80020bc <SysTick_Config+0x40>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020aa:	4b04      	ldr	r3, [pc, #16]	; (80020bc <SysTick_Config+0x40>)
 80020ac:	2207      	movs	r2, #7
 80020ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	e000e010 	.word	0xe000e010

080020c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff ff29 	bl	8001f20 <__NVIC_SetPriorityGrouping>
}
 80020ce:	bf00      	nop
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b086      	sub	sp, #24
 80020da:	af00      	add	r7, sp, #0
 80020dc:	4603      	mov	r3, r0
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	607a      	str	r2, [r7, #4]
 80020e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020e8:	f7ff ff3e 	bl	8001f68 <__NVIC_GetPriorityGrouping>
 80020ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	68b9      	ldr	r1, [r7, #8]
 80020f2:	6978      	ldr	r0, [r7, #20]
 80020f4:	f7ff ff8e 	bl	8002014 <NVIC_EncodePriority>
 80020f8:	4602      	mov	r2, r0
 80020fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020fe:	4611      	mov	r1, r2
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff ff5d 	bl	8001fc0 <__NVIC_SetPriority>
}
 8002106:	bf00      	nop
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
 8002114:	4603      	mov	r3, r0
 8002116:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff ff31 	bl	8001f84 <__NVIC_EnableIRQ>
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b082      	sub	sp, #8
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff ffa2 	bl	800207c <SysTick_Config>
 8002138:	4603      	mov	r3, r0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
	...

08002144 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002144:	b480      	push	{r7}
 8002146:	b089      	sub	sp, #36	; 0x24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800214e:	2300      	movs	r3, #0
 8002150:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002152:	2300      	movs	r3, #0
 8002154:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002156:	2300      	movs	r3, #0
 8002158:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800215a:	2300      	movs	r3, #0
 800215c:	61fb      	str	r3, [r7, #28]
 800215e:	e159      	b.n	8002414 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002160:	2201      	movs	r2, #1
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	4013      	ands	r3, r2
 8002172:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	429a      	cmp	r2, r3
 800217a:	f040 8148 	bne.w	800240e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	2b01      	cmp	r3, #1
 8002188:	d005      	beq.n	8002196 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002192:	2b02      	cmp	r3, #2
 8002194:	d130      	bne.n	80021f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	2203      	movs	r2, #3
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43db      	mvns	r3, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4013      	ands	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4313      	orrs	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021cc:	2201      	movs	r2, #1
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4013      	ands	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	091b      	lsrs	r3, r3, #4
 80021e2:	f003 0201 	and.w	r2, r3, #1
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 0303 	and.w	r3, r3, #3
 8002200:	2b03      	cmp	r3, #3
 8002202:	d017      	beq.n	8002234 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	2203      	movs	r2, #3
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	43db      	mvns	r3, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4013      	ands	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4313      	orrs	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 0303 	and.w	r3, r3, #3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d123      	bne.n	8002288 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	08da      	lsrs	r2, r3, #3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3208      	adds	r2, #8
 8002248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800224c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	220f      	movs	r2, #15
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	691a      	ldr	r2, [r3, #16]
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4313      	orrs	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	08da      	lsrs	r2, r3, #3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	3208      	adds	r2, #8
 8002282:	69b9      	ldr	r1, [r7, #24]
 8002284:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	2203      	movs	r2, #3
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4013      	ands	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 0203 	and.w	r2, r3, #3
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f000 80a2 	beq.w	800240e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	4b57      	ldr	r3, [pc, #348]	; (800242c <HAL_GPIO_Init+0x2e8>)
 80022d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d2:	4a56      	ldr	r2, [pc, #344]	; (800242c <HAL_GPIO_Init+0x2e8>)
 80022d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022d8:	6453      	str	r3, [r2, #68]	; 0x44
 80022da:	4b54      	ldr	r3, [pc, #336]	; (800242c <HAL_GPIO_Init+0x2e8>)
 80022dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022e6:	4a52      	ldr	r2, [pc, #328]	; (8002430 <HAL_GPIO_Init+0x2ec>)
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	089b      	lsrs	r3, r3, #2
 80022ec:	3302      	adds	r3, #2
 80022ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	220f      	movs	r2, #15
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	43db      	mvns	r3, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4013      	ands	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a49      	ldr	r2, [pc, #292]	; (8002434 <HAL_GPIO_Init+0x2f0>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d019      	beq.n	8002346 <HAL_GPIO_Init+0x202>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a48      	ldr	r2, [pc, #288]	; (8002438 <HAL_GPIO_Init+0x2f4>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d013      	beq.n	8002342 <HAL_GPIO_Init+0x1fe>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a47      	ldr	r2, [pc, #284]	; (800243c <HAL_GPIO_Init+0x2f8>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d00d      	beq.n	800233e <HAL_GPIO_Init+0x1fa>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a46      	ldr	r2, [pc, #280]	; (8002440 <HAL_GPIO_Init+0x2fc>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d007      	beq.n	800233a <HAL_GPIO_Init+0x1f6>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a45      	ldr	r2, [pc, #276]	; (8002444 <HAL_GPIO_Init+0x300>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d101      	bne.n	8002336 <HAL_GPIO_Init+0x1f2>
 8002332:	2304      	movs	r3, #4
 8002334:	e008      	b.n	8002348 <HAL_GPIO_Init+0x204>
 8002336:	2307      	movs	r3, #7
 8002338:	e006      	b.n	8002348 <HAL_GPIO_Init+0x204>
 800233a:	2303      	movs	r3, #3
 800233c:	e004      	b.n	8002348 <HAL_GPIO_Init+0x204>
 800233e:	2302      	movs	r3, #2
 8002340:	e002      	b.n	8002348 <HAL_GPIO_Init+0x204>
 8002342:	2301      	movs	r3, #1
 8002344:	e000      	b.n	8002348 <HAL_GPIO_Init+0x204>
 8002346:	2300      	movs	r3, #0
 8002348:	69fa      	ldr	r2, [r7, #28]
 800234a:	f002 0203 	and.w	r2, r2, #3
 800234e:	0092      	lsls	r2, r2, #2
 8002350:	4093      	lsls	r3, r2
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4313      	orrs	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002358:	4935      	ldr	r1, [pc, #212]	; (8002430 <HAL_GPIO_Init+0x2ec>)
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	089b      	lsrs	r3, r3, #2
 800235e:	3302      	adds	r3, #2
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002366:	4b38      	ldr	r3, [pc, #224]	; (8002448 <HAL_GPIO_Init+0x304>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	43db      	mvns	r3, r3
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4013      	ands	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	4313      	orrs	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800238a:	4a2f      	ldr	r2, [pc, #188]	; (8002448 <HAL_GPIO_Init+0x304>)
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002390:	4b2d      	ldr	r3, [pc, #180]	; (8002448 <HAL_GPIO_Init+0x304>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	43db      	mvns	r3, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4013      	ands	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023b4:	4a24      	ldr	r2, [pc, #144]	; (8002448 <HAL_GPIO_Init+0x304>)
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023ba:	4b23      	ldr	r3, [pc, #140]	; (8002448 <HAL_GPIO_Init+0x304>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	43db      	mvns	r3, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4013      	ands	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	4313      	orrs	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023de:	4a1a      	ldr	r2, [pc, #104]	; (8002448 <HAL_GPIO_Init+0x304>)
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023e4:	4b18      	ldr	r3, [pc, #96]	; (8002448 <HAL_GPIO_Init+0x304>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	43db      	mvns	r3, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4013      	ands	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	4313      	orrs	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002408:	4a0f      	ldr	r2, [pc, #60]	; (8002448 <HAL_GPIO_Init+0x304>)
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	3301      	adds	r3, #1
 8002412:	61fb      	str	r3, [r7, #28]
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	2b0f      	cmp	r3, #15
 8002418:	f67f aea2 	bls.w	8002160 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800241c:	bf00      	nop
 800241e:	bf00      	nop
 8002420:	3724      	adds	r7, #36	; 0x24
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40023800 	.word	0x40023800
 8002430:	40013800 	.word	0x40013800
 8002434:	40020000 	.word	0x40020000
 8002438:	40020400 	.word	0x40020400
 800243c:	40020800 	.word	0x40020800
 8002440:	40020c00 	.word	0x40020c00
 8002444:	40021000 	.word	0x40021000
 8002448:	40013c00 	.word	0x40013c00

0800244c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e12b      	b.n	80026b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d106      	bne.n	8002478 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff fb40 	bl	8001af8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2224      	movs	r2, #36	; 0x24
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0201 	bic.w	r2, r2, #1
 800248e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800249e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024b0:	f002 fd2e 	bl	8004f10 <HAL_RCC_GetPCLK1Freq>
 80024b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	4a81      	ldr	r2, [pc, #516]	; (80026c0 <HAL_I2C_Init+0x274>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d807      	bhi.n	80024d0 <HAL_I2C_Init+0x84>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4a80      	ldr	r2, [pc, #512]	; (80026c4 <HAL_I2C_Init+0x278>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	bf94      	ite	ls
 80024c8:	2301      	movls	r3, #1
 80024ca:	2300      	movhi	r3, #0
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	e006      	b.n	80024de <HAL_I2C_Init+0x92>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4a7d      	ldr	r2, [pc, #500]	; (80026c8 <HAL_I2C_Init+0x27c>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	bf94      	ite	ls
 80024d8:	2301      	movls	r3, #1
 80024da:	2300      	movhi	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e0e7      	b.n	80026b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	4a78      	ldr	r2, [pc, #480]	; (80026cc <HAL_I2C_Init+0x280>)
 80024ea:	fba2 2303 	umull	r2, r3, r2, r3
 80024ee:	0c9b      	lsrs	r3, r3, #18
 80024f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68ba      	ldr	r2, [r7, #8]
 8002502:	430a      	orrs	r2, r1
 8002504:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	4a6a      	ldr	r2, [pc, #424]	; (80026c0 <HAL_I2C_Init+0x274>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d802      	bhi.n	8002520 <HAL_I2C_Init+0xd4>
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	3301      	adds	r3, #1
 800251e:	e009      	b.n	8002534 <HAL_I2C_Init+0xe8>
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002526:	fb02 f303 	mul.w	r3, r2, r3
 800252a:	4a69      	ldr	r2, [pc, #420]	; (80026d0 <HAL_I2C_Init+0x284>)
 800252c:	fba2 2303 	umull	r2, r3, r2, r3
 8002530:	099b      	lsrs	r3, r3, #6
 8002532:	3301      	adds	r3, #1
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	430b      	orrs	r3, r1
 800253a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002546:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	495c      	ldr	r1, [pc, #368]	; (80026c0 <HAL_I2C_Init+0x274>)
 8002550:	428b      	cmp	r3, r1
 8002552:	d819      	bhi.n	8002588 <HAL_I2C_Init+0x13c>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	1e59      	subs	r1, r3, #1
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002562:	1c59      	adds	r1, r3, #1
 8002564:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002568:	400b      	ands	r3, r1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00a      	beq.n	8002584 <HAL_I2C_Init+0x138>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	1e59      	subs	r1, r3, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	fbb1 f3f3 	udiv	r3, r1, r3
 800257c:	3301      	adds	r3, #1
 800257e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002582:	e051      	b.n	8002628 <HAL_I2C_Init+0x1dc>
 8002584:	2304      	movs	r3, #4
 8002586:	e04f      	b.n	8002628 <HAL_I2C_Init+0x1dc>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d111      	bne.n	80025b4 <HAL_I2C_Init+0x168>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	1e58      	subs	r0, r3, #1
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6859      	ldr	r1, [r3, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	440b      	add	r3, r1
 800259e:	fbb0 f3f3 	udiv	r3, r0, r3
 80025a2:	3301      	adds	r3, #1
 80025a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	bf0c      	ite	eq
 80025ac:	2301      	moveq	r3, #1
 80025ae:	2300      	movne	r3, #0
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	e012      	b.n	80025da <HAL_I2C_Init+0x18e>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	1e58      	subs	r0, r3, #1
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6859      	ldr	r1, [r3, #4]
 80025bc:	460b      	mov	r3, r1
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	0099      	lsls	r1, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ca:	3301      	adds	r3, #1
 80025cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	bf0c      	ite	eq
 80025d4:	2301      	moveq	r3, #1
 80025d6:	2300      	movne	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_I2C_Init+0x196>
 80025de:	2301      	movs	r3, #1
 80025e0:	e022      	b.n	8002628 <HAL_I2C_Init+0x1dc>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10e      	bne.n	8002608 <HAL_I2C_Init+0x1bc>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	1e58      	subs	r0, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6859      	ldr	r1, [r3, #4]
 80025f2:	460b      	mov	r3, r1
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	440b      	add	r3, r1
 80025f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80025fc:	3301      	adds	r3, #1
 80025fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002606:	e00f      	b.n	8002628 <HAL_I2C_Init+0x1dc>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	1e58      	subs	r0, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6859      	ldr	r1, [r3, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	0099      	lsls	r1, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	fbb0 f3f3 	udiv	r3, r0, r3
 800261e:	3301      	adds	r3, #1
 8002620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002624:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	6809      	ldr	r1, [r1, #0]
 800262c:	4313      	orrs	r3, r2
 800262e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69da      	ldr	r2, [r3, #28]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	430a      	orrs	r2, r1
 800264a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002656:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6911      	ldr	r1, [r2, #16]
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	68d2      	ldr	r2, [r2, #12]
 8002662:	4311      	orrs	r1, r2
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6812      	ldr	r2, [r2, #0]
 8002668:	430b      	orrs	r3, r1
 800266a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	695a      	ldr	r2, [r3, #20]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0201 	orr.w	r2, r2, #1
 8002696:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2220      	movs	r2, #32
 80026a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	000186a0 	.word	0x000186a0
 80026c4:	001e847f 	.word	0x001e847f
 80026c8:	003d08ff 	.word	0x003d08ff
 80026cc:	431bde83 	.word	0x431bde83
 80026d0:	10624dd3 	.word	0x10624dd3

080026d4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b088      	sub	sp, #32
 80026d8:	af02      	add	r7, sp, #8
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	4608      	mov	r0, r1
 80026de:	4611      	mov	r1, r2
 80026e0:	461a      	mov	r2, r3
 80026e2:	4603      	mov	r3, r0
 80026e4:	817b      	strh	r3, [r7, #10]
 80026e6:	460b      	mov	r3, r1
 80026e8:	813b      	strh	r3, [r7, #8]
 80026ea:	4613      	mov	r3, r2
 80026ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026ee:	f7ff fbe7 	bl	8001ec0 <HAL_GetTick>
 80026f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b20      	cmp	r3, #32
 80026fe:	f040 80d9 	bne.w	80028b4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	2319      	movs	r3, #25
 8002708:	2201      	movs	r2, #1
 800270a:	496d      	ldr	r1, [pc, #436]	; (80028c0 <HAL_I2C_Mem_Write+0x1ec>)
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f000 fc7f 	bl	8003010 <I2C_WaitOnFlagUntilTimeout>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002718:	2302      	movs	r3, #2
 800271a:	e0cc      	b.n	80028b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002722:	2b01      	cmp	r3, #1
 8002724:	d101      	bne.n	800272a <HAL_I2C_Mem_Write+0x56>
 8002726:	2302      	movs	r3, #2
 8002728:	e0c5      	b.n	80028b6 <HAL_I2C_Mem_Write+0x1e2>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	2b01      	cmp	r3, #1
 800273e:	d007      	beq.n	8002750 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 0201 	orr.w	r2, r2, #1
 800274e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800275e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2221      	movs	r2, #33	; 0x21
 8002764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2240      	movs	r2, #64	; 0x40
 800276c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6a3a      	ldr	r2, [r7, #32]
 800277a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002780:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002786:	b29a      	uxth	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4a4d      	ldr	r2, [pc, #308]	; (80028c4 <HAL_I2C_Mem_Write+0x1f0>)
 8002790:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002792:	88f8      	ldrh	r0, [r7, #6]
 8002794:	893a      	ldrh	r2, [r7, #8]
 8002796:	8979      	ldrh	r1, [r7, #10]
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	9301      	str	r3, [sp, #4]
 800279c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	4603      	mov	r3, r0
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 fab6 	bl	8002d14 <I2C_RequestMemoryWrite>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d052      	beq.n	8002854 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e081      	b.n	80028b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f000 fd00 	bl	80031bc <I2C_WaitOnTXEFlagUntilTimeout>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00d      	beq.n	80027de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d107      	bne.n	80027da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e06b      	b.n	80028b6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	781a      	ldrb	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	1c5a      	adds	r2, r3, #1
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002804:	b29b      	uxth	r3, r3
 8002806:	3b01      	subs	r3, #1
 8002808:	b29a      	uxth	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b04      	cmp	r3, #4
 800281a:	d11b      	bne.n	8002854 <HAL_I2C_Mem_Write+0x180>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002820:	2b00      	cmp	r3, #0
 8002822:	d017      	beq.n	8002854 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	781a      	ldrb	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	1c5a      	adds	r2, r3, #1
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283e:	3b01      	subs	r3, #1
 8002840:	b29a      	uxth	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800284a:	b29b      	uxth	r3, r3
 800284c:	3b01      	subs	r3, #1
 800284e:	b29a      	uxth	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1aa      	bne.n	80027b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f000 fcec 	bl	800323e <I2C_WaitOnBTFFlagUntilTimeout>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00d      	beq.n	8002888 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002870:	2b04      	cmp	r3, #4
 8002872:	d107      	bne.n	8002884 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002882:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e016      	b.n	80028b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002896:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2220      	movs	r2, #32
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028b0:	2300      	movs	r3, #0
 80028b2:	e000      	b.n	80028b6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80028b4:	2302      	movs	r3, #2
  }
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	00100002 	.word	0x00100002
 80028c4:	ffff0000 	.word	0xffff0000

080028c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08c      	sub	sp, #48	; 0x30
 80028cc:	af02      	add	r7, sp, #8
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	4608      	mov	r0, r1
 80028d2:	4611      	mov	r1, r2
 80028d4:	461a      	mov	r2, r3
 80028d6:	4603      	mov	r3, r0
 80028d8:	817b      	strh	r3, [r7, #10]
 80028da:	460b      	mov	r3, r1
 80028dc:	813b      	strh	r3, [r7, #8]
 80028de:	4613      	mov	r3, r2
 80028e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028e2:	f7ff faed 	bl	8001ec0 <HAL_GetTick>
 80028e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b20      	cmp	r3, #32
 80028f2:	f040 8208 	bne.w	8002d06 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	2319      	movs	r3, #25
 80028fc:	2201      	movs	r2, #1
 80028fe:	497b      	ldr	r1, [pc, #492]	; (8002aec <HAL_I2C_Mem_Read+0x224>)
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f000 fb85 	bl	8003010 <I2C_WaitOnFlagUntilTimeout>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800290c:	2302      	movs	r3, #2
 800290e:	e1fb      	b.n	8002d08 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <HAL_I2C_Mem_Read+0x56>
 800291a:	2302      	movs	r3, #2
 800291c:	e1f4      	b.n	8002d08 <HAL_I2C_Mem_Read+0x440>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b01      	cmp	r3, #1
 8002932:	d007      	beq.n	8002944 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0201 	orr.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002952:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2222      	movs	r2, #34	; 0x22
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2240      	movs	r2, #64	; 0x40
 8002960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800296e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002974:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800297a:	b29a      	uxth	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4a5b      	ldr	r2, [pc, #364]	; (8002af0 <HAL_I2C_Mem_Read+0x228>)
 8002984:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002986:	88f8      	ldrh	r0, [r7, #6]
 8002988:	893a      	ldrh	r2, [r7, #8]
 800298a:	8979      	ldrh	r1, [r7, #10]
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	9301      	str	r3, [sp, #4]
 8002990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	4603      	mov	r3, r0
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 fa52 	bl	8002e40 <I2C_RequestMemoryRead>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e1b0      	b.n	8002d08 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d113      	bne.n	80029d6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ae:	2300      	movs	r3, #0
 80029b0:	623b      	str	r3, [r7, #32]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	623b      	str	r3, [r7, #32]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	623b      	str	r3, [r7, #32]
 80029c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	e184      	b.n	8002ce0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d11b      	bne.n	8002a16 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ee:	2300      	movs	r3, #0
 80029f0:	61fb      	str	r3, [r7, #28]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	61fb      	str	r3, [r7, #28]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	61fb      	str	r3, [r7, #28]
 8002a02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	e164      	b.n	8002ce0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d11b      	bne.n	8002a56 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a2c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61bb      	str	r3, [r7, #24]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	61bb      	str	r3, [r7, #24]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	61bb      	str	r3, [r7, #24]
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	e144      	b.n	8002ce0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	617b      	str	r3, [r7, #20]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	617b      	str	r3, [r7, #20]
 8002a6a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002a6c:	e138      	b.n	8002ce0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a72:	2b03      	cmp	r3, #3
 8002a74:	f200 80f1 	bhi.w	8002c5a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d123      	bne.n	8002ac8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 fc1b 	bl	80032c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e139      	b.n	8002d08 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691a      	ldr	r2, [r3, #16]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ac6:	e10b      	b.n	8002ce0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d14e      	bne.n	8002b6e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	4906      	ldr	r1, [pc, #24]	; (8002af4 <HAL_I2C_Mem_Read+0x22c>)
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 fa98 	bl	8003010 <I2C_WaitOnFlagUntilTimeout>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d008      	beq.n	8002af8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e10e      	b.n	8002d08 <HAL_I2C_Mem_Read+0x440>
 8002aea:	bf00      	nop
 8002aec:	00100002 	.word	0x00100002
 8002af0:	ffff0000 	.word	0xffff0000
 8002af4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	691a      	ldr	r2, [r3, #16]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	1c5a      	adds	r2, r3, #1
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	3b01      	subs	r3, #1
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	691a      	ldr	r2, [r3, #16]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	3b01      	subs	r3, #1
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b6c:	e0b8      	b.n	8002ce0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b74:	2200      	movs	r2, #0
 8002b76:	4966      	ldr	r1, [pc, #408]	; (8002d10 <HAL_I2C_Mem_Read+0x448>)
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f000 fa49 	bl	8003010 <I2C_WaitOnFlagUntilTimeout>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e0bf      	b.n	8002d08 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691a      	ldr	r2, [r3, #16]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	1c5a      	adds	r2, r3, #1
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	494f      	ldr	r1, [pc, #316]	; (8002d10 <HAL_I2C_Mem_Read+0x448>)
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f000 fa1b 	bl	8003010 <I2C_WaitOnFlagUntilTimeout>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e091      	b.n	8002d08 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bf2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691a      	ldr	r2, [r3, #16]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	1c5a      	adds	r2, r3, #1
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	691a      	ldr	r2, [r3, #16]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	1c5a      	adds	r2, r3, #1
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c42:	3b01      	subs	r3, #1
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	3b01      	subs	r3, #1
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c58:	e042      	b.n	8002ce0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 fb2e 	bl	80032c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e04c      	b.n	8002d08 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	691a      	ldr	r2, [r3, #16]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	b2d2      	uxtb	r2, r2
 8002c7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	1c5a      	adds	r2, r3, #1
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	f003 0304 	and.w	r3, r3, #4
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d118      	bne.n	8002ce0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	691a      	ldr	r2, [r3, #16]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	b2d2      	uxtb	r2, r2
 8002cba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	1c5a      	adds	r2, r3, #1
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f47f aec2 	bne.w	8002a6e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2220      	movs	r2, #32
 8002cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	e000      	b.n	8002d08 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002d06:	2302      	movs	r3, #2
  }
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3728      	adds	r7, #40	; 0x28
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	00010004 	.word	0x00010004

08002d14 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b088      	sub	sp, #32
 8002d18:	af02      	add	r7, sp, #8
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	4608      	mov	r0, r1
 8002d1e:	4611      	mov	r1, r2
 8002d20:	461a      	mov	r2, r3
 8002d22:	4603      	mov	r3, r0
 8002d24:	817b      	strh	r3, [r7, #10]
 8002d26:	460b      	mov	r3, r1
 8002d28:	813b      	strh	r3, [r7, #8]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f000 f960 	bl	8003010 <I2C_WaitOnFlagUntilTimeout>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00d      	beq.n	8002d72 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d64:	d103      	bne.n	8002d6e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e05f      	b.n	8002e32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d72:	897b      	ldrh	r3, [r7, #10]
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	461a      	mov	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d80:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	6a3a      	ldr	r2, [r7, #32]
 8002d86:	492d      	ldr	r1, [pc, #180]	; (8002e3c <I2C_RequestMemoryWrite+0x128>)
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 f998 	bl	80030be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e04c      	b.n	8002e32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d98:	2300      	movs	r3, #0
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	617b      	str	r3, [r7, #20]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	617b      	str	r3, [r7, #20]
 8002dac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db0:	6a39      	ldr	r1, [r7, #32]
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f000 fa02 	bl	80031bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00d      	beq.n	8002dda <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	d107      	bne.n	8002dd6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dd4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e02b      	b.n	8002e32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dda:	88fb      	ldrh	r3, [r7, #6]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d105      	bne.n	8002dec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002de0:	893b      	ldrh	r3, [r7, #8]
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	611a      	str	r2, [r3, #16]
 8002dea:	e021      	b.n	8002e30 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002dec:	893b      	ldrh	r3, [r7, #8]
 8002dee:	0a1b      	lsrs	r3, r3, #8
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dfc:	6a39      	ldr	r1, [r7, #32]
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 f9dc 	bl	80031bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00d      	beq.n	8002e26 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	d107      	bne.n	8002e22 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e20:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e005      	b.n	8002e32 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e26:	893b      	ldrh	r3, [r7, #8]
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3718      	adds	r7, #24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	00010002 	.word	0x00010002

08002e40 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b088      	sub	sp, #32
 8002e44:	af02      	add	r7, sp, #8
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	4608      	mov	r0, r1
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	4603      	mov	r3, r0
 8002e50:	817b      	strh	r3, [r7, #10]
 8002e52:	460b      	mov	r3, r1
 8002e54:	813b      	strh	r3, [r7, #8]
 8002e56:	4613      	mov	r3, r2
 8002e58:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e68:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 f8c2 	bl	8003010 <I2C_WaitOnFlagUntilTimeout>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00d      	beq.n	8002eae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ea0:	d103      	bne.n	8002eaa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ea8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e0aa      	b.n	8003004 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002eae:	897b      	ldrh	r3, [r7, #10]
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ebc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	6a3a      	ldr	r2, [r7, #32]
 8002ec2:	4952      	ldr	r1, [pc, #328]	; (800300c <I2C_RequestMemoryRead+0x1cc>)
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f000 f8fa 	bl	80030be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e097      	b.n	8003004 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	617b      	str	r3, [r7, #20]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eec:	6a39      	ldr	r1, [r7, #32]
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 f964 	bl	80031bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00d      	beq.n	8002f16 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d107      	bne.n	8002f12 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e076      	b.n	8003004 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f16:	88fb      	ldrh	r3, [r7, #6]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d105      	bne.n	8002f28 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f1c:	893b      	ldrh	r3, [r7, #8]
 8002f1e:	b2da      	uxtb	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	611a      	str	r2, [r3, #16]
 8002f26:	e021      	b.n	8002f6c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f28:	893b      	ldrh	r3, [r7, #8]
 8002f2a:	0a1b      	lsrs	r3, r3, #8
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f38:	6a39      	ldr	r1, [r7, #32]
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 f93e 	bl	80031bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00d      	beq.n	8002f62 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d107      	bne.n	8002f5e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e050      	b.n	8003004 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f62:	893b      	ldrh	r3, [r7, #8]
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f6e:	6a39      	ldr	r1, [r7, #32]
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 f923 	bl	80031bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00d      	beq.n	8002f98 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	d107      	bne.n	8002f94 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f92:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e035      	b.n	8003004 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fa6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 f82b 	bl	8003010 <I2C_WaitOnFlagUntilTimeout>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00d      	beq.n	8002fdc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fce:	d103      	bne.n	8002fd8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e013      	b.n	8003004 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002fdc:	897b      	ldrh	r3, [r7, #10]
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	f043 0301 	orr.w	r3, r3, #1
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fee:	6a3a      	ldr	r2, [r7, #32]
 8002ff0:	4906      	ldr	r1, [pc, #24]	; (800300c <I2C_RequestMemoryRead+0x1cc>)
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 f863 	bl	80030be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e000      	b.n	8003004 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	00010002 	.word	0x00010002

08003010 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	603b      	str	r3, [r7, #0]
 800301c:	4613      	mov	r3, r2
 800301e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003020:	e025      	b.n	800306e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003028:	d021      	beq.n	800306e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800302a:	f7fe ff49 	bl	8001ec0 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d302      	bcc.n	8003040 <I2C_WaitOnFlagUntilTimeout+0x30>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d116      	bne.n	800306e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2220      	movs	r2, #32
 800304a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	f043 0220 	orr.w	r2, r3, #32
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e023      	b.n	80030b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	0c1b      	lsrs	r3, r3, #16
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b01      	cmp	r3, #1
 8003076:	d10d      	bne.n	8003094 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	43da      	mvns	r2, r3
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	4013      	ands	r3, r2
 8003084:	b29b      	uxth	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	bf0c      	ite	eq
 800308a:	2301      	moveq	r3, #1
 800308c:	2300      	movne	r3, #0
 800308e:	b2db      	uxtb	r3, r3
 8003090:	461a      	mov	r2, r3
 8003092:	e00c      	b.n	80030ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	43da      	mvns	r2, r3
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	4013      	ands	r3, r2
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	bf0c      	ite	eq
 80030a6:	2301      	moveq	r3, #1
 80030a8:	2300      	movne	r3, #0
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	461a      	mov	r2, r3
 80030ae:	79fb      	ldrb	r3, [r7, #7]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d0b6      	beq.n	8003022 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b084      	sub	sp, #16
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	60f8      	str	r0, [r7, #12]
 80030c6:	60b9      	str	r1, [r7, #8]
 80030c8:	607a      	str	r2, [r7, #4]
 80030ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030cc:	e051      	b.n	8003172 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030dc:	d123      	bne.n	8003126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2220      	movs	r2, #32
 8003102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	f043 0204 	orr.w	r2, r3, #4
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e046      	b.n	80031b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312c:	d021      	beq.n	8003172 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800312e:	f7fe fec7 	bl	8001ec0 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	429a      	cmp	r2, r3
 800313c:	d302      	bcc.n	8003144 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d116      	bne.n	8003172 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2220      	movs	r2, #32
 800314e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	f043 0220 	orr.w	r2, r3, #32
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e020      	b.n	80031b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	0c1b      	lsrs	r3, r3, #16
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b01      	cmp	r3, #1
 800317a:	d10c      	bne.n	8003196 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	43da      	mvns	r2, r3
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	4013      	ands	r3, r2
 8003188:	b29b      	uxth	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	bf14      	ite	ne
 800318e:	2301      	movne	r3, #1
 8003190:	2300      	moveq	r3, #0
 8003192:	b2db      	uxtb	r3, r3
 8003194:	e00b      	b.n	80031ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	43da      	mvns	r2, r3
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	4013      	ands	r3, r2
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	bf14      	ite	ne
 80031a8:	2301      	movne	r3, #1
 80031aa:	2300      	moveq	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d18d      	bne.n	80030ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031c8:	e02d      	b.n	8003226 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 f8ce 	bl	800336c <I2C_IsAcknowledgeFailed>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e02d      	b.n	8003236 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e0:	d021      	beq.n	8003226 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e2:	f7fe fe6d 	bl	8001ec0 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d302      	bcc.n	80031f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d116      	bne.n	8003226 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2220      	movs	r2, #32
 8003202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	f043 0220 	orr.w	r2, r3, #32
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e007      	b.n	8003236 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003230:	2b80      	cmp	r3, #128	; 0x80
 8003232:	d1ca      	bne.n	80031ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b084      	sub	sp, #16
 8003242:	af00      	add	r7, sp, #0
 8003244:	60f8      	str	r0, [r7, #12]
 8003246:	60b9      	str	r1, [r7, #8]
 8003248:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800324a:	e02d      	b.n	80032a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 f88d 	bl	800336c <I2C_IsAcknowledgeFailed>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e02d      	b.n	80032b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003262:	d021      	beq.n	80032a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003264:	f7fe fe2c 	bl	8001ec0 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	429a      	cmp	r2, r3
 8003272:	d302      	bcc.n	800327a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d116      	bne.n	80032a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2220      	movs	r2, #32
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003294:	f043 0220 	orr.w	r2, r3, #32
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e007      	b.n	80032b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d1ca      	bne.n	800324c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032cc:	e042      	b.n	8003354 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	f003 0310 	and.w	r3, r3, #16
 80032d8:	2b10      	cmp	r3, #16
 80032da:	d119      	bne.n	8003310 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f06f 0210 	mvn.w	r2, #16
 80032e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2220      	movs	r2, #32
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e029      	b.n	8003364 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003310:	f7fe fdd6 	bl	8001ec0 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	429a      	cmp	r2, r3
 800331e:	d302      	bcc.n	8003326 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d116      	bne.n	8003354 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2220      	movs	r2, #32
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	f043 0220 	orr.w	r2, r3, #32
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e007      	b.n	8003364 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335e:	2b40      	cmp	r3, #64	; 0x40
 8003360:	d1b5      	bne.n	80032ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800337e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003382:	d11b      	bne.n	80033bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800338c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2220      	movs	r2, #32
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	f043 0204 	orr.w	r2, r3, #4
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e000      	b.n	80033be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80033ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033cc:	b08f      	sub	sp, #60	; 0x3c
 80033ce:	af0a      	add	r7, sp, #40	; 0x28
 80033d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e10f      	b.n	80035fc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d106      	bne.n	80033fc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f004 ffae 	bl	8008358 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2203      	movs	r2, #3
 8003400:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340c:	2b00      	cmp	r3, #0
 800340e:	d102      	bne.n	8003416 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f001 fea1 	bl	8005162 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	603b      	str	r3, [r7, #0]
 8003426:	687e      	ldr	r6, [r7, #4]
 8003428:	466d      	mov	r5, sp
 800342a:	f106 0410 	add.w	r4, r6, #16
 800342e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003430:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003432:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003434:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003436:	e894 0003 	ldmia.w	r4, {r0, r1}
 800343a:	e885 0003 	stmia.w	r5, {r0, r1}
 800343e:	1d33      	adds	r3, r6, #4
 8003440:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003442:	6838      	ldr	r0, [r7, #0]
 8003444:	f001 fd78 	bl	8004f38 <USB_CoreInit>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d005      	beq.n	800345a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2202      	movs	r2, #2
 8003452:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e0d0      	b.n	80035fc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2100      	movs	r1, #0
 8003460:	4618      	mov	r0, r3
 8003462:	f001 fe8f 	bl	8005184 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003466:	2300      	movs	r3, #0
 8003468:	73fb      	strb	r3, [r7, #15]
 800346a:	e04a      	b.n	8003502 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800346c:	7bfa      	ldrb	r2, [r7, #15]
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	4613      	mov	r3, r2
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	1a9b      	subs	r3, r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	333d      	adds	r3, #61	; 0x3d
 800347c:	2201      	movs	r2, #1
 800347e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003480:	7bfa      	ldrb	r2, [r7, #15]
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	4613      	mov	r3, r2
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	1a9b      	subs	r3, r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	440b      	add	r3, r1
 800348e:	333c      	adds	r3, #60	; 0x3c
 8003490:	7bfa      	ldrb	r2, [r7, #15]
 8003492:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003494:	7bfa      	ldrb	r2, [r7, #15]
 8003496:	7bfb      	ldrb	r3, [r7, #15]
 8003498:	b298      	uxth	r0, r3
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	4613      	mov	r3, r2
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	1a9b      	subs	r3, r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	3342      	adds	r3, #66	; 0x42
 80034a8:	4602      	mov	r2, r0
 80034aa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034ac:	7bfa      	ldrb	r2, [r7, #15]
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	4613      	mov	r3, r2
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	1a9b      	subs	r3, r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	333f      	adds	r3, #63	; 0x3f
 80034bc:	2200      	movs	r2, #0
 80034be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80034c0:	7bfa      	ldrb	r2, [r7, #15]
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	4613      	mov	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	1a9b      	subs	r3, r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	440b      	add	r3, r1
 80034ce:	3344      	adds	r3, #68	; 0x44
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80034d4:	7bfa      	ldrb	r2, [r7, #15]
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	1a9b      	subs	r3, r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	3348      	adds	r3, #72	; 0x48
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80034e8:	7bfa      	ldrb	r2, [r7, #15]
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	1a9b      	subs	r3, r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	3350      	adds	r3, #80	; 0x50
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
 80034fe:	3301      	adds	r3, #1
 8003500:	73fb      	strb	r3, [r7, #15]
 8003502:	7bfa      	ldrb	r2, [r7, #15]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	429a      	cmp	r2, r3
 800350a:	d3af      	bcc.n	800346c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800350c:	2300      	movs	r3, #0
 800350e:	73fb      	strb	r3, [r7, #15]
 8003510:	e044      	b.n	800359c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003512:	7bfa      	ldrb	r2, [r7, #15]
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	4613      	mov	r3, r2
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	1a9b      	subs	r3, r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	440b      	add	r3, r1
 8003520:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003524:	2200      	movs	r2, #0
 8003526:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003528:	7bfa      	ldrb	r2, [r7, #15]
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	4613      	mov	r3, r2
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	1a9b      	subs	r3, r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	440b      	add	r3, r1
 8003536:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800353a:	7bfa      	ldrb	r2, [r7, #15]
 800353c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800353e:	7bfa      	ldrb	r2, [r7, #15]
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	4613      	mov	r3, r2
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	1a9b      	subs	r3, r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003550:	2200      	movs	r2, #0
 8003552:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003554:	7bfa      	ldrb	r2, [r7, #15]
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	4613      	mov	r3, r2
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	1a9b      	subs	r3, r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800356a:	7bfa      	ldrb	r2, [r7, #15]
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	1a9b      	subs	r3, r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	440b      	add	r3, r1
 8003578:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003580:	7bfa      	ldrb	r2, [r7, #15]
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	1a9b      	subs	r3, r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003596:	7bfb      	ldrb	r3, [r7, #15]
 8003598:	3301      	adds	r3, #1
 800359a:	73fb      	strb	r3, [r7, #15]
 800359c:	7bfa      	ldrb	r2, [r7, #15]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d3b5      	bcc.n	8003512 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	603b      	str	r3, [r7, #0]
 80035ac:	687e      	ldr	r6, [r7, #4]
 80035ae:	466d      	mov	r5, sp
 80035b0:	f106 0410 	add.w	r4, r6, #16
 80035b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80035c4:	1d33      	adds	r3, r6, #4
 80035c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035c8:	6838      	ldr	r0, [r7, #0]
 80035ca:	f001 fe27 	bl	800521c <USB_DevInit>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d005      	beq.n	80035e0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2202      	movs	r2, #2
 80035d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e00d      	b.n	80035fc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f002 fea3 	bl	8006340 <USB_DevDisconnect>

  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3714      	adds	r7, #20
 8003600:	46bd      	mov	sp, r7
 8003602:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003604 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003618:	2b01      	cmp	r3, #1
 800361a:	d101      	bne.n	8003620 <HAL_PCD_Start+0x1c>
 800361c:	2302      	movs	r3, #2
 800361e:	e020      	b.n	8003662 <HAL_PCD_Start+0x5e>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362c:	2b01      	cmp	r3, #1
 800362e:	d109      	bne.n	8003644 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003634:	2b01      	cmp	r3, #1
 8003636:	d005      	beq.n	8003644 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f001 fd79 	bl	8005140 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f002 fe53 	bl	80062fe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800366a:	b590      	push	{r4, r7, lr}
 800366c:	b08d      	sub	sp, #52	; 0x34
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003678:	6a3b      	ldr	r3, [r7, #32]
 800367a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4618      	mov	r0, r3
 8003682:	f002 ff11 	bl	80064a8 <USB_GetMode>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	f040 839d 	bne.w	8003dc8 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f002 fe75 	bl	8006382 <USB_ReadInterrupts>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	f000 8393 	beq.w	8003dc6 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f002 fe6c 	bl	8006382 <USB_ReadInterrupts>
 80036aa:	4603      	mov	r3, r0
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d107      	bne.n	80036c4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695a      	ldr	r2, [r3, #20]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f002 0202 	and.w	r2, r2, #2
 80036c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f002 fe5a 	bl	8006382 <USB_ReadInterrupts>
 80036ce:	4603      	mov	r3, r0
 80036d0:	f003 0310 	and.w	r3, r3, #16
 80036d4:	2b10      	cmp	r3, #16
 80036d6:	d161      	bne.n	800379c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	699a      	ldr	r2, [r3, #24]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 0210 	bic.w	r2, r2, #16
 80036e6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80036e8:	6a3b      	ldr	r3, [r7, #32]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	f003 020f 	and.w	r2, r3, #15
 80036f4:	4613      	mov	r3, r2
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	1a9b      	subs	r3, r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	4413      	add	r3, r2
 8003704:	3304      	adds	r3, #4
 8003706:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	0c5b      	lsrs	r3, r3, #17
 800370c:	f003 030f 	and.w	r3, r3, #15
 8003710:	2b02      	cmp	r3, #2
 8003712:	d124      	bne.n	800375e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800371a:	4013      	ands	r3, r2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d035      	beq.n	800378c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	091b      	lsrs	r3, r3, #4
 8003728:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800372a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800372e:	b29b      	uxth	r3, r3
 8003730:	461a      	mov	r2, r3
 8003732:	6a38      	ldr	r0, [r7, #32]
 8003734:	f002 fc91 	bl	800605a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	68da      	ldr	r2, [r3, #12]
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	091b      	lsrs	r3, r3, #4
 8003740:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003744:	441a      	add	r2, r3
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	699a      	ldr	r2, [r3, #24]
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	091b      	lsrs	r3, r3, #4
 8003752:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003756:	441a      	add	r2, r3
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	619a      	str	r2, [r3, #24]
 800375c:	e016      	b.n	800378c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	0c5b      	lsrs	r3, r3, #17
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	2b06      	cmp	r3, #6
 8003768:	d110      	bne.n	800378c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003770:	2208      	movs	r2, #8
 8003772:	4619      	mov	r1, r3
 8003774:	6a38      	ldr	r0, [r7, #32]
 8003776:	f002 fc70 	bl	800605a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	699a      	ldr	r2, [r3, #24]
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	091b      	lsrs	r3, r3, #4
 8003782:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003786:	441a      	add	r2, r3
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	699a      	ldr	r2, [r3, #24]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0210 	orr.w	r2, r2, #16
 800379a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f002 fdee 	bl	8006382 <USB_ReadInterrupts>
 80037a6:	4603      	mov	r3, r0
 80037a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80037b0:	d16e      	bne.n	8003890 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80037b2:	2300      	movs	r3, #0
 80037b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f002 fdf4 	bl	80063a8 <USB_ReadDevAllOutEpInterrupt>
 80037c0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80037c2:	e062      	b.n	800388a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80037c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d057      	beq.n	800387e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037d4:	b2d2      	uxtb	r2, r2
 80037d6:	4611      	mov	r1, r2
 80037d8:	4618      	mov	r0, r3
 80037da:	f002 fe19 	bl	8006410 <USB_ReadDevOutEPInterrupt>
 80037de:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00c      	beq.n	8003804 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	015a      	lsls	r2, r3, #5
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	4413      	add	r3, r2
 80037f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f6:	461a      	mov	r2, r3
 80037f8:	2301      	movs	r3, #1
 80037fa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80037fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 fdb0 	bl	8004364 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	f003 0308 	and.w	r3, r3, #8
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00c      	beq.n	8003828 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	015a      	lsls	r2, r3, #5
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	4413      	add	r3, r2
 8003816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800381a:	461a      	mov	r2, r3
 800381c:	2308      	movs	r3, #8
 800381e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003820:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 feaa 	bl	800457c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	f003 0310 	and.w	r3, r3, #16
 800382e:	2b00      	cmp	r3, #0
 8003830:	d008      	beq.n	8003844 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	4413      	add	r3, r2
 800383a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800383e:	461a      	mov	r2, r3
 8003840:	2310      	movs	r3, #16
 8003842:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f003 0320 	and.w	r3, r3, #32
 800384a:	2b00      	cmp	r3, #0
 800384c:	d008      	beq.n	8003860 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	015a      	lsls	r2, r3, #5
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	4413      	add	r3, r2
 8003856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800385a:	461a      	mov	r2, r3
 800385c:	2320      	movs	r3, #32
 800385e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d009      	beq.n	800387e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386c:	015a      	lsls	r2, r3, #5
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	4413      	add	r3, r2
 8003872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003876:	461a      	mov	r2, r3
 8003878:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800387c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	3301      	adds	r3, #1
 8003882:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003886:	085b      	lsrs	r3, r3, #1
 8003888:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800388a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388c:	2b00      	cmp	r3, #0
 800388e:	d199      	bne.n	80037c4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4618      	mov	r0, r3
 8003896:	f002 fd74 	bl	8006382 <USB_ReadInterrupts>
 800389a:	4603      	mov	r3, r0
 800389c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038a4:	f040 80c0 	bne.w	8003a28 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f002 fd95 	bl	80063dc <USB_ReadDevAllInEpInterrupt>
 80038b2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80038b8:	e0b2      	b.n	8003a20 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80038ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 80a7 	beq.w	8003a14 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038cc:	b2d2      	uxtb	r2, r2
 80038ce:	4611      	mov	r1, r2
 80038d0:	4618      	mov	r0, r3
 80038d2:	f002 fdbb 	bl	800644c <USB_ReadDevInEPInterrupt>
 80038d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d057      	beq.n	8003992 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	f003 030f 	and.w	r3, r3, #15
 80038e8:	2201      	movs	r2, #1
 80038ea:	fa02 f303 	lsl.w	r3, r2, r3
 80038ee:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	43db      	mvns	r3, r3
 80038fc:	69f9      	ldr	r1, [r7, #28]
 80038fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003902:	4013      	ands	r3, r2
 8003904:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	015a      	lsls	r2, r3, #5
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	4413      	add	r3, r2
 800390e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003912:	461a      	mov	r2, r3
 8003914:	2301      	movs	r3, #1
 8003916:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d132      	bne.n	8003986 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003924:	4613      	mov	r3, r2
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	1a9b      	subs	r3, r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	440b      	add	r3, r1
 800392e:	3348      	adds	r3, #72	; 0x48
 8003930:	6819      	ldr	r1, [r3, #0]
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003936:	4613      	mov	r3, r2
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	1a9b      	subs	r3, r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	4403      	add	r3, r0
 8003940:	3344      	adds	r3, #68	; 0x44
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4419      	add	r1, r3
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800394a:	4613      	mov	r3, r2
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	1a9b      	subs	r3, r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4403      	add	r3, r0
 8003954:	3348      	adds	r3, #72	; 0x48
 8003956:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395a:	2b00      	cmp	r3, #0
 800395c:	d113      	bne.n	8003986 <HAL_PCD_IRQHandler+0x31c>
 800395e:	6879      	ldr	r1, [r7, #4]
 8003960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003962:	4613      	mov	r3, r2
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	1a9b      	subs	r3, r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	440b      	add	r3, r1
 800396c:	3350      	adds	r3, #80	; 0x50
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d108      	bne.n	8003986 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6818      	ldr	r0, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800397e:	461a      	mov	r2, r3
 8003980:	2101      	movs	r1, #1
 8003982:	f002 fdc3 	bl	800650c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	b2db      	uxtb	r3, r3
 800398a:	4619      	mov	r1, r3
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f004 fd64 	bl	800845a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	f003 0308 	and.w	r3, r3, #8
 8003998:	2b00      	cmp	r3, #0
 800399a:	d008      	beq.n	80039ae <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	015a      	lsls	r2, r3, #5
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	4413      	add	r3, r2
 80039a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039a8:	461a      	mov	r2, r3
 80039aa:	2308      	movs	r3, #8
 80039ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	f003 0310 	and.w	r3, r3, #16
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d008      	beq.n	80039ca <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	015a      	lsls	r2, r3, #5
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	4413      	add	r3, r2
 80039c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c4:	461a      	mov	r2, r3
 80039c6:	2310      	movs	r3, #16
 80039c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d008      	beq.n	80039e6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	015a      	lsls	r2, r3, #5
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	4413      	add	r3, r2
 80039dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e0:	461a      	mov	r2, r3
 80039e2:	2340      	movs	r3, #64	; 0x40
 80039e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d008      	beq.n	8003a02 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80039f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f2:	015a      	lsls	r2, r3, #5
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	4413      	add	r3, r2
 80039f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039fc:	461a      	mov	r2, r3
 80039fe:	2302      	movs	r3, #2
 8003a00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003a0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 fc1b 	bl	800424a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a16:	3301      	adds	r3, #1
 8003a18:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1c:	085b      	lsrs	r3, r3, #1
 8003a1e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f47f af49 	bne.w	80038ba <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f002 fca8 	bl	8006382 <USB_ReadInterrupts>
 8003a32:	4603      	mov	r3, r0
 8003a34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a3c:	d122      	bne.n	8003a84 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	69fa      	ldr	r2, [r7, #28]
 8003a48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a4c:	f023 0301 	bic.w	r3, r3, #1
 8003a50:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d108      	bne.n	8003a6e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003a64:	2100      	movs	r1, #0
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 fe26 	bl	80046b8 <HAL_PCDEx_LPM_Callback>
 8003a6c:	e002      	b.n	8003a74 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f004 fd60 	bl	8008534 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	695a      	ldr	r2, [r3, #20]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003a82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f002 fc7a 	bl	8006382 <USB_ReadInterrupts>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a98:	d112      	bne.n	8003ac0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d102      	bne.n	8003ab0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f004 fd1c 	bl	80084e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	695a      	ldr	r2, [r3, #20]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003abe:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f002 fc5c 	bl	8006382 <USB_ReadInterrupts>
 8003aca:	4603      	mov	r3, r0
 8003acc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ad4:	f040 80c7 	bne.w	8003c66 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	69fa      	ldr	r2, [r7, #28]
 8003ae2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ae6:	f023 0301 	bic.w	r3, r3, #1
 8003aea:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2110      	movs	r1, #16
 8003af2:	4618      	mov	r0, r3
 8003af4:	f001 fcf6 	bl	80054e4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003af8:	2300      	movs	r3, #0
 8003afa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003afc:	e056      	b.n	8003bac <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b00:	015a      	lsls	r2, r3, #5
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	4413      	add	r3, r2
 8003b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b10:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b14:	015a      	lsls	r2, r3, #5
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	4413      	add	r3, r2
 8003b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b22:	0151      	lsls	r1, r2, #5
 8003b24:	69fa      	ldr	r2, [r7, #28]
 8003b26:	440a      	add	r2, r1
 8003b28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b2c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b30:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b34:	015a      	lsls	r2, r3, #5
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	4413      	add	r3, r2
 8003b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b42:	0151      	lsls	r1, r2, #5
 8003b44:	69fa      	ldr	r2, [r7, #28]
 8003b46:	440a      	add	r2, r1
 8003b48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b4c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b50:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b54:	015a      	lsls	r2, r3, #5
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	4413      	add	r3, r2
 8003b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b5e:	461a      	mov	r2, r3
 8003b60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b64:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b68:	015a      	lsls	r2, r3, #5
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b76:	0151      	lsls	r1, r2, #5
 8003b78:	69fa      	ldr	r2, [r7, #28]
 8003b7a:	440a      	add	r2, r1
 8003b7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b80:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b84:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b88:	015a      	lsls	r2, r3, #5
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b96:	0151      	lsls	r1, r2, #5
 8003b98:	69fa      	ldr	r2, [r7, #28]
 8003b9a:	440a      	add	r2, r1
 8003b9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ba0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ba4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba8:	3301      	adds	r3, #1
 8003baa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d3a3      	bcc.n	8003afe <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	69fa      	ldr	r2, [r7, #28]
 8003bc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bc4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003bc8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d016      	beq.n	8003c00 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bdc:	69fa      	ldr	r2, [r7, #28]
 8003bde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003be2:	f043 030b 	orr.w	r3, r3, #11
 8003be6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf2:	69fa      	ldr	r2, [r7, #28]
 8003bf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bf8:	f043 030b 	orr.w	r3, r3, #11
 8003bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8003bfe:	e015      	b.n	8003c2c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c06:	695b      	ldr	r3, [r3, #20]
 8003c08:	69fa      	ldr	r2, [r7, #28]
 8003c0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c12:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003c16:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	69fa      	ldr	r2, [r7, #28]
 8003c22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c26:	f043 030b 	orr.w	r3, r3, #11
 8003c2a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	69fa      	ldr	r2, [r7, #28]
 8003c36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c3a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003c3e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6818      	ldr	r0, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c50:	461a      	mov	r2, r3
 8003c52:	f002 fc5b 	bl	800650c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	695a      	ldr	r2, [r3, #20]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003c64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f002 fb89 	bl	8006382 <USB_ReadInterrupts>
 8003c70:	4603      	mov	r3, r0
 8003c72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c7a:	d124      	bne.n	8003cc6 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f002 fc1f 	bl	80064c4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f001 fc87 	bl	800559e <USB_GetDevSpeed>
 8003c90:	4603      	mov	r3, r0
 8003c92:	461a      	mov	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681c      	ldr	r4, [r3, #0]
 8003c9c:	f001 f92c 	bl	8004ef8 <HAL_RCC_GetHCLKFreq>
 8003ca0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	461a      	mov	r2, r3
 8003caa:	4620      	mov	r0, r4
 8003cac:	f001 f9a6 	bl	8004ffc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f004 fbfa 	bl	80084aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	695a      	ldr	r2, [r3, #20]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003cc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f002 fb59 	bl	8006382 <USB_ReadInterrupts>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	f003 0308 	and.w	r3, r3, #8
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	d10a      	bne.n	8003cf0 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f004 fbd7 	bl	800848e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	695a      	ldr	r2, [r3, #20]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f002 0208 	and.w	r2, r2, #8
 8003cee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f002 fb44 	bl	8006382 <USB_ReadInterrupts>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d04:	d10f      	bne.n	8003d26 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003d06:	2300      	movs	r3, #0
 8003d08:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	4619      	mov	r1, r3
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f004 fc2f 	bl	8008574 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	695a      	ldr	r2, [r3, #20]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003d24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f002 fb29 	bl	8006382 <USB_ReadInterrupts>
 8003d30:	4603      	mov	r3, r0
 8003d32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d3a:	d10f      	bne.n	8003d5c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	4619      	mov	r1, r3
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f004 fc02 	bl	8008550 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695a      	ldr	r2, [r3, #20]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003d5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f002 fb0e 	bl	8006382 <USB_ReadInterrupts>
 8003d66:	4603      	mov	r3, r0
 8003d68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d70:	d10a      	bne.n	8003d88 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f004 fc10 	bl	8008598 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	695a      	ldr	r2, [r3, #20]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003d86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f002 faf8 	bl	8006382 <USB_ReadInterrupts>
 8003d92:	4603      	mov	r3, r0
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b04      	cmp	r3, #4
 8003d9a:	d115      	bne.n	8003dc8 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	f003 0304 	and.w	r3, r3, #4
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d002      	beq.n	8003db4 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f004 fc00 	bl	80085b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6859      	ldr	r1, [r3, #4]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	605a      	str	r2, [r3, #4]
 8003dc4:	e000      	b.n	8003dc8 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003dc6:	bf00      	nop
    }
  }
}
 8003dc8:	3734      	adds	r7, #52	; 0x34
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd90      	pop	{r4, r7, pc}

08003dce <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b082      	sub	sp, #8
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d101      	bne.n	8003de8 <HAL_PCD_SetAddress+0x1a>
 8003de4:	2302      	movs	r3, #2
 8003de6:	e013      	b.n	8003e10 <HAL_PCD_SetAddress+0x42>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	78fa      	ldrb	r2, [r7, #3]
 8003df4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	78fa      	ldrb	r2, [r7, #3]
 8003dfe:	4611      	mov	r1, r2
 8003e00:	4618      	mov	r0, r3
 8003e02:	f002 fa56 	bl	80062b2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3708      	adds	r7, #8
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	4608      	mov	r0, r1
 8003e22:	4611      	mov	r1, r2
 8003e24:	461a      	mov	r2, r3
 8003e26:	4603      	mov	r3, r0
 8003e28:	70fb      	strb	r3, [r7, #3]
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	803b      	strh	r3, [r7, #0]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003e32:	2300      	movs	r3, #0
 8003e34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	da0f      	bge.n	8003e5e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e3e:	78fb      	ldrb	r3, [r7, #3]
 8003e40:	f003 020f 	and.w	r2, r3, #15
 8003e44:	4613      	mov	r3, r2
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	1a9b      	subs	r3, r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	3338      	adds	r3, #56	; 0x38
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	4413      	add	r3, r2
 8003e52:	3304      	adds	r3, #4
 8003e54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	705a      	strb	r2, [r3, #1]
 8003e5c:	e00f      	b.n	8003e7e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e5e:	78fb      	ldrb	r3, [r7, #3]
 8003e60:	f003 020f 	and.w	r2, r3, #15
 8003e64:	4613      	mov	r3, r2
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	1a9b      	subs	r3, r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	4413      	add	r3, r2
 8003e74:	3304      	adds	r3, #4
 8003e76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003e7e:	78fb      	ldrb	r3, [r7, #3]
 8003e80:	f003 030f 	and.w	r3, r3, #15
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003e8a:	883a      	ldrh	r2, [r7, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	78ba      	ldrb	r2, [r7, #2]
 8003e94:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	785b      	ldrb	r3, [r3, #1]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d004      	beq.n	8003ea8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003ea8:	78bb      	ldrb	r3, [r7, #2]
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d102      	bne.n	8003eb4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d101      	bne.n	8003ec2 <HAL_PCD_EP_Open+0xaa>
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	e00e      	b.n	8003ee0 <HAL_PCD_EP_Open+0xc8>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68f9      	ldr	r1, [r7, #12]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f001 fb89 	bl	80055e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003ede:	7afb      	ldrb	r3, [r7, #11]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ef4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	da0f      	bge.n	8003f1c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003efc:	78fb      	ldrb	r3, [r7, #3]
 8003efe:	f003 020f 	and.w	r2, r3, #15
 8003f02:	4613      	mov	r3, r2
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	1a9b      	subs	r3, r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	3338      	adds	r3, #56	; 0x38
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	4413      	add	r3, r2
 8003f10:	3304      	adds	r3, #4
 8003f12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2201      	movs	r2, #1
 8003f18:	705a      	strb	r2, [r3, #1]
 8003f1a:	e00f      	b.n	8003f3c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f1c:	78fb      	ldrb	r3, [r7, #3]
 8003f1e:	f003 020f 	and.w	r2, r3, #15
 8003f22:	4613      	mov	r3, r2
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	1a9b      	subs	r3, r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	4413      	add	r3, r2
 8003f32:	3304      	adds	r3, #4
 8003f34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003f3c:	78fb      	ldrb	r3, [r7, #3]
 8003f3e:	f003 030f 	and.w	r3, r3, #15
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d101      	bne.n	8003f56 <HAL_PCD_EP_Close+0x6e>
 8003f52:	2302      	movs	r3, #2
 8003f54:	e00e      	b.n	8003f74 <HAL_PCD_EP_Close+0x8c>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68f9      	ldr	r1, [r7, #12]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f001 fbc7 	bl	80056f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	607a      	str	r2, [r7, #4]
 8003f86:	603b      	str	r3, [r7, #0]
 8003f88:	460b      	mov	r3, r1
 8003f8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f8c:	7afb      	ldrb	r3, [r7, #11]
 8003f8e:	f003 020f 	and.w	r2, r3, #15
 8003f92:	4613      	mov	r3, r2
 8003f94:	00db      	lsls	r3, r3, #3
 8003f96:	1a9b      	subs	r3, r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	3304      	adds	r3, #4
 8003fa4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fbe:	7afb      	ldrb	r3, [r7, #11]
 8003fc0:	f003 030f 	and.w	r3, r3, #15
 8003fc4:	b2da      	uxtb	r2, r3
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d102      	bne.n	8003fd8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003fd8:	7afb      	ldrb	r3, [r7, #11]
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d109      	bne.n	8003ff6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6818      	ldr	r0, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	461a      	mov	r2, r3
 8003fee:	6979      	ldr	r1, [r7, #20]
 8003ff0:	f001 fea2 	bl	8005d38 <USB_EP0StartXfer>
 8003ff4:	e008      	b.n	8004008 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6818      	ldr	r0, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	461a      	mov	r2, r3
 8004002:	6979      	ldr	r1, [r7, #20]
 8004004:	f001 fc54 	bl	80058b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3718      	adds	r7, #24
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004012:	b480      	push	{r7}
 8004014:	b083      	sub	sp, #12
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
 800401a:	460b      	mov	r3, r1
 800401c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800401e:	78fb      	ldrb	r3, [r7, #3]
 8004020:	f003 020f 	and.w	r2, r3, #15
 8004024:	6879      	ldr	r1, [r7, #4]
 8004026:	4613      	mov	r3, r2
 8004028:	00db      	lsls	r3, r3, #3
 800402a:	1a9b      	subs	r3, r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	440b      	add	r3, r1
 8004030:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004034:	681b      	ldr	r3, [r3, #0]
}
 8004036:	4618      	mov	r0, r3
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004042:	b580      	push	{r7, lr}
 8004044:	b086      	sub	sp, #24
 8004046:	af00      	add	r7, sp, #0
 8004048:	60f8      	str	r0, [r7, #12]
 800404a:	607a      	str	r2, [r7, #4]
 800404c:	603b      	str	r3, [r7, #0]
 800404e:	460b      	mov	r3, r1
 8004050:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004052:	7afb      	ldrb	r3, [r7, #11]
 8004054:	f003 020f 	and.w	r2, r3, #15
 8004058:	4613      	mov	r3, r2
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	1a9b      	subs	r3, r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	3338      	adds	r3, #56	; 0x38
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	4413      	add	r3, r2
 8004066:	3304      	adds	r3, #4
 8004068:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	2200      	movs	r2, #0
 800407a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	2201      	movs	r2, #1
 8004080:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004082:	7afb      	ldrb	r3, [r7, #11]
 8004084:	f003 030f 	and.w	r3, r3, #15
 8004088:	b2da      	uxtb	r2, r3
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d102      	bne.n	800409c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800409c:	7afb      	ldrb	r3, [r7, #11]
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d109      	bne.n	80040ba <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6818      	ldr	r0, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	461a      	mov	r2, r3
 80040b2:	6979      	ldr	r1, [r7, #20]
 80040b4:	f001 fe40 	bl	8005d38 <USB_EP0StartXfer>
 80040b8:	e008      	b.n	80040cc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6818      	ldr	r0, [r3, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	461a      	mov	r2, r3
 80040c6:	6979      	ldr	r1, [r7, #20]
 80040c8:	f001 fbf2 	bl	80058b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3718      	adds	r7, #24
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b084      	sub	sp, #16
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
 80040de:	460b      	mov	r3, r1
 80040e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80040e2:	78fb      	ldrb	r3, [r7, #3]
 80040e4:	f003 020f 	and.w	r2, r3, #15
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d901      	bls.n	80040f4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e050      	b.n	8004196 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	da0f      	bge.n	800411c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040fc:	78fb      	ldrb	r3, [r7, #3]
 80040fe:	f003 020f 	and.w	r2, r3, #15
 8004102:	4613      	mov	r3, r2
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	1a9b      	subs	r3, r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	3338      	adds	r3, #56	; 0x38
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	4413      	add	r3, r2
 8004110:	3304      	adds	r3, #4
 8004112:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2201      	movs	r2, #1
 8004118:	705a      	strb	r2, [r3, #1]
 800411a:	e00d      	b.n	8004138 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800411c:	78fa      	ldrb	r2, [r7, #3]
 800411e:	4613      	mov	r3, r2
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	1a9b      	subs	r3, r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	4413      	add	r3, r2
 800412e:	3304      	adds	r3, #4
 8004130:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2201      	movs	r2, #1
 800413c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800413e:	78fb      	ldrb	r3, [r7, #3]
 8004140:	f003 030f 	and.w	r3, r3, #15
 8004144:	b2da      	uxtb	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004150:	2b01      	cmp	r3, #1
 8004152:	d101      	bne.n	8004158 <HAL_PCD_EP_SetStall+0x82>
 8004154:	2302      	movs	r3, #2
 8004156:	e01e      	b.n	8004196 <HAL_PCD_EP_SetStall+0xc0>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68f9      	ldr	r1, [r7, #12]
 8004166:	4618      	mov	r0, r3
 8004168:	f001 ffcf 	bl	800610a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800416c:	78fb      	ldrb	r3, [r7, #3]
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10a      	bne.n	800418c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6818      	ldr	r0, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	b2d9      	uxtb	r1, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004186:	461a      	mov	r2, r3
 8004188:	f002 f9c0 	bl	800650c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b084      	sub	sp, #16
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
 80041a6:	460b      	mov	r3, r1
 80041a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80041aa:	78fb      	ldrb	r3, [r7, #3]
 80041ac:	f003 020f 	and.w	r2, r3, #15
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d901      	bls.n	80041bc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e042      	b.n	8004242 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	da0f      	bge.n	80041e4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041c4:	78fb      	ldrb	r3, [r7, #3]
 80041c6:	f003 020f 	and.w	r2, r3, #15
 80041ca:	4613      	mov	r3, r2
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	1a9b      	subs	r3, r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	3338      	adds	r3, #56	; 0x38
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	4413      	add	r3, r2
 80041d8:	3304      	adds	r3, #4
 80041da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2201      	movs	r2, #1
 80041e0:	705a      	strb	r2, [r3, #1]
 80041e2:	e00f      	b.n	8004204 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041e4:	78fb      	ldrb	r3, [r7, #3]
 80041e6:	f003 020f 	and.w	r2, r3, #15
 80041ea:	4613      	mov	r3, r2
 80041ec:	00db      	lsls	r3, r3, #3
 80041ee:	1a9b      	subs	r3, r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	4413      	add	r3, r2
 80041fa:	3304      	adds	r3, #4
 80041fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800420a:	78fb      	ldrb	r3, [r7, #3]
 800420c:	f003 030f 	and.w	r3, r3, #15
 8004210:	b2da      	uxtb	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800421c:	2b01      	cmp	r3, #1
 800421e:	d101      	bne.n	8004224 <HAL_PCD_EP_ClrStall+0x86>
 8004220:	2302      	movs	r3, #2
 8004222:	e00e      	b.n	8004242 <HAL_PCD_EP_ClrStall+0xa4>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68f9      	ldr	r1, [r7, #12]
 8004232:	4618      	mov	r0, r3
 8004234:	f001 ffd7 	bl	80061e6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b08a      	sub	sp, #40	; 0x28
 800424e:	af02      	add	r7, sp, #8
 8004250:	6078      	str	r0, [r7, #4]
 8004252:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	4613      	mov	r3, r2
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	1a9b      	subs	r3, r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	3338      	adds	r3, #56	; 0x38
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	4413      	add	r3, r2
 800426e:	3304      	adds	r3, #4
 8004270:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	699a      	ldr	r2, [r3, #24]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	429a      	cmp	r2, r3
 800427c:	d901      	bls.n	8004282 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e06c      	b.n	800435c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	695a      	ldr	r2, [r3, #20]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	69fa      	ldr	r2, [r7, #28]
 8004294:	429a      	cmp	r2, r3
 8004296:	d902      	bls.n	800429e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	3303      	adds	r3, #3
 80042a2:	089b      	lsrs	r3, r3, #2
 80042a4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042a6:	e02b      	b.n	8004300 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	695a      	ldr	r2, [r3, #20]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	69fa      	ldr	r2, [r7, #28]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d902      	bls.n	80042c4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	3303      	adds	r3, #3
 80042c8:	089b      	lsrs	r3, r3, #2
 80042ca:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	68d9      	ldr	r1, [r3, #12]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	4603      	mov	r3, r0
 80042e2:	6978      	ldr	r0, [r7, #20]
 80042e4:	f001 fe7b 	bl	8005fde <USB_WritePacket>

    ep->xfer_buff  += len;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	441a      	add	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	699a      	ldr	r2, [r3, #24]
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	441a      	add	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	015a      	lsls	r2, r3, #5
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	4413      	add	r3, r2
 8004308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	b29b      	uxth	r3, r3
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	429a      	cmp	r2, r3
 8004314:	d809      	bhi.n	800432a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	699a      	ldr	r2, [r3, #24]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800431e:	429a      	cmp	r2, r3
 8004320:	d203      	bcs.n	800432a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1be      	bne.n	80042a8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	695a      	ldr	r2, [r3, #20]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	429a      	cmp	r2, r3
 8004334:	d811      	bhi.n	800435a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	f003 030f 	and.w	r3, r3, #15
 800433c:	2201      	movs	r2, #1
 800433e:	fa02 f303 	lsl.w	r3, r2, r3
 8004342:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800434a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	43db      	mvns	r3, r3
 8004350:	6939      	ldr	r1, [r7, #16]
 8004352:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004356:	4013      	ands	r3, r2
 8004358:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3720      	adds	r7, #32
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	333c      	adds	r3, #60	; 0x3c
 800437c:	3304      	adds	r3, #4
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	015a      	lsls	r2, r3, #5
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	4413      	add	r3, r2
 800438a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	2b01      	cmp	r3, #1
 8004398:	f040 80a0 	bne.w	80044dc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d015      	beq.n	80043d2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	4a72      	ldr	r2, [pc, #456]	; (8004574 <PCD_EP_OutXfrComplete_int+0x210>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	f240 80dd 	bls.w	800456a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 80d7 	beq.w	800456a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	015a      	lsls	r2, r3, #5
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c8:	461a      	mov	r2, r3
 80043ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043ce:	6093      	str	r3, [r2, #8]
 80043d0:	e0cb      	b.n	800456a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	f003 0320 	and.w	r3, r3, #32
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d009      	beq.n	80043f0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	015a      	lsls	r2, r3, #5
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	4413      	add	r3, r2
 80043e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e8:	461a      	mov	r2, r3
 80043ea:	2320      	movs	r3, #32
 80043ec:	6093      	str	r3, [r2, #8]
 80043ee:	e0bc      	b.n	800456a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f040 80b7 	bne.w	800456a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	4a5d      	ldr	r2, [pc, #372]	; (8004574 <PCD_EP_OutXfrComplete_int+0x210>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d90f      	bls.n	8004424 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00a      	beq.n	8004424 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	015a      	lsls	r2, r3, #5
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	4413      	add	r3, r2
 8004416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800441a:	461a      	mov	r2, r3
 800441c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004420:	6093      	str	r3, [r2, #8]
 8004422:	e0a2      	b.n	800456a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004424:	6879      	ldr	r1, [r7, #4]
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	4613      	mov	r3, r2
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	1a9b      	subs	r3, r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	440b      	add	r3, r1
 8004432:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004436:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	0159      	lsls	r1, r3, #5
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	440b      	add	r3, r1
 8004440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800444a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	4613      	mov	r3, r2
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	1a9b      	subs	r3, r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4403      	add	r3, r0
 800445a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800445e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004460:	6879      	ldr	r1, [r7, #4]
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	4613      	mov	r3, r2
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	1a9b      	subs	r3, r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	440b      	add	r3, r1
 800446e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004472:	6819      	ldr	r1, [r3, #0]
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	4613      	mov	r3, r2
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	1a9b      	subs	r3, r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4403      	add	r3, r0
 8004482:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4419      	add	r1, r3
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	4613      	mov	r3, r2
 8004490:	00db      	lsls	r3, r3, #3
 8004492:	1a9b      	subs	r3, r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4403      	add	r3, r0
 8004498:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800449c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d114      	bne.n	80044ce <PCD_EP_OutXfrComplete_int+0x16a>
 80044a4:	6879      	ldr	r1, [r7, #4]
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	4613      	mov	r3, r2
 80044aa:	00db      	lsls	r3, r3, #3
 80044ac:	1a9b      	subs	r3, r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	440b      	add	r3, r1
 80044b2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d108      	bne.n	80044ce <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6818      	ldr	r0, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80044c6:	461a      	mov	r2, r3
 80044c8:	2101      	movs	r1, #1
 80044ca:	f002 f81f 	bl	800650c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	4619      	mov	r1, r3
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f003 ffa5 	bl	8008424 <HAL_PCD_DataOutStageCallback>
 80044da:	e046      	b.n	800456a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	4a26      	ldr	r2, [pc, #152]	; (8004578 <PCD_EP_OutXfrComplete_int+0x214>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d124      	bne.n	800452e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	015a      	lsls	r2, r3, #5
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	4413      	add	r3, r2
 80044f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044fa:	461a      	mov	r2, r3
 80044fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004500:	6093      	str	r3, [r2, #8]
 8004502:	e032      	b.n	800456a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	f003 0320 	and.w	r3, r3, #32
 800450a:	2b00      	cmp	r3, #0
 800450c:	d008      	beq.n	8004520 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	015a      	lsls	r2, r3, #5
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	4413      	add	r3, r2
 8004516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800451a:	461a      	mov	r2, r3
 800451c:	2320      	movs	r3, #32
 800451e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	b2db      	uxtb	r3, r3
 8004524:	4619      	mov	r1, r3
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f003 ff7c 	bl	8008424 <HAL_PCD_DataOutStageCallback>
 800452c:	e01d      	b.n	800456a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d114      	bne.n	800455e <PCD_EP_OutXfrComplete_int+0x1fa>
 8004534:	6879      	ldr	r1, [r7, #4]
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	4613      	mov	r3, r2
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	1a9b      	subs	r3, r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	440b      	add	r3, r1
 8004542:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d108      	bne.n	800455e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6818      	ldr	r0, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004556:	461a      	mov	r2, r3
 8004558:	2100      	movs	r1, #0
 800455a:	f001 ffd7 	bl	800650c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	b2db      	uxtb	r3, r3
 8004562:	4619      	mov	r1, r3
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f003 ff5d 	bl	8008424 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3718      	adds	r7, #24
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	4f54300a 	.word	0x4f54300a
 8004578:	4f54310a 	.word	0x4f54310a

0800457c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	333c      	adds	r3, #60	; 0x3c
 8004594:	3304      	adds	r3, #4
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	015a      	lsls	r2, r3, #5
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	4413      	add	r3, r2
 80045a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	4a15      	ldr	r2, [pc, #84]	; (8004604 <PCD_EP_OutSetupPacket_int+0x88>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d90e      	bls.n	80045d0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d009      	beq.n	80045d0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	015a      	lsls	r2, r3, #5
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	4413      	add	r3, r2
 80045c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c8:	461a      	mov	r2, r3
 80045ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045ce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f003 ff15 	bl	8008400 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	4a0a      	ldr	r2, [pc, #40]	; (8004604 <PCD_EP_OutSetupPacket_int+0x88>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d90c      	bls.n	80045f8 <PCD_EP_OutSetupPacket_int+0x7c>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d108      	bne.n	80045f8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6818      	ldr	r0, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80045f0:	461a      	mov	r2, r3
 80045f2:	2101      	movs	r1, #1
 80045f4:	f001 ff8a 	bl	800650c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3718      	adds	r7, #24
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	4f54300a 	.word	0x4f54300a

08004608 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	460b      	mov	r3, r1
 8004612:	70fb      	strb	r3, [r7, #3]
 8004614:	4613      	mov	r3, r2
 8004616:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004620:	78fb      	ldrb	r3, [r7, #3]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d107      	bne.n	8004636 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004626:	883b      	ldrh	r3, [r7, #0]
 8004628:	0419      	lsls	r1, r3, #16
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	430a      	orrs	r2, r1
 8004632:	629a      	str	r2, [r3, #40]	; 0x28
 8004634:	e028      	b.n	8004688 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463c:	0c1b      	lsrs	r3, r3, #16
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	4413      	add	r3, r2
 8004642:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004644:	2300      	movs	r3, #0
 8004646:	73fb      	strb	r3, [r7, #15]
 8004648:	e00d      	b.n	8004666 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	7bfb      	ldrb	r3, [r7, #15]
 8004650:	3340      	adds	r3, #64	; 0x40
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	0c1b      	lsrs	r3, r3, #16
 800465a:	68ba      	ldr	r2, [r7, #8]
 800465c:	4413      	add	r3, r2
 800465e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004660:	7bfb      	ldrb	r3, [r7, #15]
 8004662:	3301      	adds	r3, #1
 8004664:	73fb      	strb	r3, [r7, #15]
 8004666:	7bfa      	ldrb	r2, [r7, #15]
 8004668:	78fb      	ldrb	r3, [r7, #3]
 800466a:	3b01      	subs	r3, #1
 800466c:	429a      	cmp	r2, r3
 800466e:	d3ec      	bcc.n	800464a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004670:	883b      	ldrh	r3, [r7, #0]
 8004672:	0418      	lsls	r0, r3, #16
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6819      	ldr	r1, [r3, #0]
 8004678:	78fb      	ldrb	r3, [r7, #3]
 800467a:	3b01      	subs	r3, #1
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	4302      	orrs	r2, r0
 8004680:	3340      	adds	r3, #64	; 0x40
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	440b      	add	r3, r1
 8004686:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004696:	b480      	push	{r7}
 8004698:	b083      	sub	sp, #12
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
 800469e:	460b      	mov	r3, r1
 80046a0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	887a      	ldrh	r2, [r7, #2]
 80046a8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	460b      	mov	r3, r1
 80046c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e264      	b.n	8004bac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d075      	beq.n	80047da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046ee:	4ba3      	ldr	r3, [pc, #652]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f003 030c 	and.w	r3, r3, #12
 80046f6:	2b04      	cmp	r3, #4
 80046f8:	d00c      	beq.n	8004714 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046fa:	4ba0      	ldr	r3, [pc, #640]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004702:	2b08      	cmp	r3, #8
 8004704:	d112      	bne.n	800472c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004706:	4b9d      	ldr	r3, [pc, #628]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800470e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004712:	d10b      	bne.n	800472c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004714:	4b99      	ldr	r3, [pc, #612]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d05b      	beq.n	80047d8 <HAL_RCC_OscConfig+0x108>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d157      	bne.n	80047d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e23f      	b.n	8004bac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004734:	d106      	bne.n	8004744 <HAL_RCC_OscConfig+0x74>
 8004736:	4b91      	ldr	r3, [pc, #580]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a90      	ldr	r2, [pc, #576]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 800473c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004740:	6013      	str	r3, [r2, #0]
 8004742:	e01d      	b.n	8004780 <HAL_RCC_OscConfig+0xb0>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800474c:	d10c      	bne.n	8004768 <HAL_RCC_OscConfig+0x98>
 800474e:	4b8b      	ldr	r3, [pc, #556]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a8a      	ldr	r2, [pc, #552]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 8004754:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	4b88      	ldr	r3, [pc, #544]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a87      	ldr	r2, [pc, #540]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 8004760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	e00b      	b.n	8004780 <HAL_RCC_OscConfig+0xb0>
 8004768:	4b84      	ldr	r3, [pc, #528]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a83      	ldr	r2, [pc, #524]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 800476e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004772:	6013      	str	r3, [r2, #0]
 8004774:	4b81      	ldr	r3, [pc, #516]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a80      	ldr	r2, [pc, #512]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 800477a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800477e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d013      	beq.n	80047b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004788:	f7fd fb9a 	bl	8001ec0 <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004790:	f7fd fb96 	bl	8001ec0 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b64      	cmp	r3, #100	; 0x64
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e204      	b.n	8004bac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047a2:	4b76      	ldr	r3, [pc, #472]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d0f0      	beq.n	8004790 <HAL_RCC_OscConfig+0xc0>
 80047ae:	e014      	b.n	80047da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b0:	f7fd fb86 	bl	8001ec0 <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047b8:	f7fd fb82 	bl	8001ec0 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b64      	cmp	r3, #100	; 0x64
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e1f0      	b.n	8004bac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ca:	4b6c      	ldr	r3, [pc, #432]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1f0      	bne.n	80047b8 <HAL_RCC_OscConfig+0xe8>
 80047d6:	e000      	b.n	80047da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d063      	beq.n	80048ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047e6:	4b65      	ldr	r3, [pc, #404]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 030c 	and.w	r3, r3, #12
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00b      	beq.n	800480a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047f2:	4b62      	ldr	r3, [pc, #392]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047fa:	2b08      	cmp	r3, #8
 80047fc:	d11c      	bne.n	8004838 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047fe:	4b5f      	ldr	r3, [pc, #380]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d116      	bne.n	8004838 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800480a:	4b5c      	ldr	r3, [pc, #368]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d005      	beq.n	8004822 <HAL_RCC_OscConfig+0x152>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d001      	beq.n	8004822 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e1c4      	b.n	8004bac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004822:	4b56      	ldr	r3, [pc, #344]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	00db      	lsls	r3, r3, #3
 8004830:	4952      	ldr	r1, [pc, #328]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 8004832:	4313      	orrs	r3, r2
 8004834:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004836:	e03a      	b.n	80048ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d020      	beq.n	8004882 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004840:	4b4f      	ldr	r3, [pc, #316]	; (8004980 <HAL_RCC_OscConfig+0x2b0>)
 8004842:	2201      	movs	r2, #1
 8004844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004846:	f7fd fb3b 	bl	8001ec0 <HAL_GetTick>
 800484a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800484c:	e008      	b.n	8004860 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800484e:	f7fd fb37 	bl	8001ec0 <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	2b02      	cmp	r3, #2
 800485a:	d901      	bls.n	8004860 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e1a5      	b.n	8004bac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004860:	4b46      	ldr	r3, [pc, #280]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d0f0      	beq.n	800484e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800486c:	4b43      	ldr	r3, [pc, #268]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	00db      	lsls	r3, r3, #3
 800487a:	4940      	ldr	r1, [pc, #256]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 800487c:	4313      	orrs	r3, r2
 800487e:	600b      	str	r3, [r1, #0]
 8004880:	e015      	b.n	80048ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004882:	4b3f      	ldr	r3, [pc, #252]	; (8004980 <HAL_RCC_OscConfig+0x2b0>)
 8004884:	2200      	movs	r2, #0
 8004886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004888:	f7fd fb1a 	bl	8001ec0 <HAL_GetTick>
 800488c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800488e:	e008      	b.n	80048a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004890:	f7fd fb16 	bl	8001ec0 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b02      	cmp	r3, #2
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e184      	b.n	8004bac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048a2:	4b36      	ldr	r3, [pc, #216]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1f0      	bne.n	8004890 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0308 	and.w	r3, r3, #8
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d030      	beq.n	800491c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d016      	beq.n	80048f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048c2:	4b30      	ldr	r3, [pc, #192]	; (8004984 <HAL_RCC_OscConfig+0x2b4>)
 80048c4:	2201      	movs	r2, #1
 80048c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c8:	f7fd fafa 	bl	8001ec0 <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ce:	e008      	b.n	80048e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048d0:	f7fd faf6 	bl	8001ec0 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e164      	b.n	8004bac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048e2:	4b26      	ldr	r3, [pc, #152]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 80048e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d0f0      	beq.n	80048d0 <HAL_RCC_OscConfig+0x200>
 80048ee:	e015      	b.n	800491c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048f0:	4b24      	ldr	r3, [pc, #144]	; (8004984 <HAL_RCC_OscConfig+0x2b4>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048f6:	f7fd fae3 	bl	8001ec0 <HAL_GetTick>
 80048fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048fc:	e008      	b.n	8004910 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048fe:	f7fd fadf 	bl	8001ec0 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b02      	cmp	r3, #2
 800490a:	d901      	bls.n	8004910 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e14d      	b.n	8004bac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004910:	4b1a      	ldr	r3, [pc, #104]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 8004912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1f0      	bne.n	80048fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0304 	and.w	r3, r3, #4
 8004924:	2b00      	cmp	r3, #0
 8004926:	f000 80a0 	beq.w	8004a6a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800492a:	2300      	movs	r3, #0
 800492c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800492e:	4b13      	ldr	r3, [pc, #76]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10f      	bne.n	800495a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800493a:	2300      	movs	r3, #0
 800493c:	60bb      	str	r3, [r7, #8]
 800493e:	4b0f      	ldr	r3, [pc, #60]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	4a0e      	ldr	r2, [pc, #56]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 8004944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004948:	6413      	str	r3, [r2, #64]	; 0x40
 800494a:	4b0c      	ldr	r3, [pc, #48]	; (800497c <HAL_RCC_OscConfig+0x2ac>)
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004952:	60bb      	str	r3, [r7, #8]
 8004954:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004956:	2301      	movs	r3, #1
 8004958:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800495a:	4b0b      	ldr	r3, [pc, #44]	; (8004988 <HAL_RCC_OscConfig+0x2b8>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004962:	2b00      	cmp	r3, #0
 8004964:	d121      	bne.n	80049aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004966:	4b08      	ldr	r3, [pc, #32]	; (8004988 <HAL_RCC_OscConfig+0x2b8>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a07      	ldr	r2, [pc, #28]	; (8004988 <HAL_RCC_OscConfig+0x2b8>)
 800496c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004970:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004972:	f7fd faa5 	bl	8001ec0 <HAL_GetTick>
 8004976:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004978:	e011      	b.n	800499e <HAL_RCC_OscConfig+0x2ce>
 800497a:	bf00      	nop
 800497c:	40023800 	.word	0x40023800
 8004980:	42470000 	.word	0x42470000
 8004984:	42470e80 	.word	0x42470e80
 8004988:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800498c:	f7fd fa98 	bl	8001ec0 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	2b02      	cmp	r3, #2
 8004998:	d901      	bls.n	800499e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e106      	b.n	8004bac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800499e:	4b85      	ldr	r3, [pc, #532]	; (8004bb4 <HAL_RCC_OscConfig+0x4e4>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d0f0      	beq.n	800498c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d106      	bne.n	80049c0 <HAL_RCC_OscConfig+0x2f0>
 80049b2:	4b81      	ldr	r3, [pc, #516]	; (8004bb8 <HAL_RCC_OscConfig+0x4e8>)
 80049b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b6:	4a80      	ldr	r2, [pc, #512]	; (8004bb8 <HAL_RCC_OscConfig+0x4e8>)
 80049b8:	f043 0301 	orr.w	r3, r3, #1
 80049bc:	6713      	str	r3, [r2, #112]	; 0x70
 80049be:	e01c      	b.n	80049fa <HAL_RCC_OscConfig+0x32a>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	2b05      	cmp	r3, #5
 80049c6:	d10c      	bne.n	80049e2 <HAL_RCC_OscConfig+0x312>
 80049c8:	4b7b      	ldr	r3, [pc, #492]	; (8004bb8 <HAL_RCC_OscConfig+0x4e8>)
 80049ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049cc:	4a7a      	ldr	r2, [pc, #488]	; (8004bb8 <HAL_RCC_OscConfig+0x4e8>)
 80049ce:	f043 0304 	orr.w	r3, r3, #4
 80049d2:	6713      	str	r3, [r2, #112]	; 0x70
 80049d4:	4b78      	ldr	r3, [pc, #480]	; (8004bb8 <HAL_RCC_OscConfig+0x4e8>)
 80049d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d8:	4a77      	ldr	r2, [pc, #476]	; (8004bb8 <HAL_RCC_OscConfig+0x4e8>)
 80049da:	f043 0301 	orr.w	r3, r3, #1
 80049de:	6713      	str	r3, [r2, #112]	; 0x70
 80049e0:	e00b      	b.n	80049fa <HAL_RCC_OscConfig+0x32a>
 80049e2:	4b75      	ldr	r3, [pc, #468]	; (8004bb8 <HAL_RCC_OscConfig+0x4e8>)
 80049e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e6:	4a74      	ldr	r2, [pc, #464]	; (8004bb8 <HAL_RCC_OscConfig+0x4e8>)
 80049e8:	f023 0301 	bic.w	r3, r3, #1
 80049ec:	6713      	str	r3, [r2, #112]	; 0x70
 80049ee:	4b72      	ldr	r3, [pc, #456]	; (8004bb8 <HAL_RCC_OscConfig+0x4e8>)
 80049f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f2:	4a71      	ldr	r2, [pc, #452]	; (8004bb8 <HAL_RCC_OscConfig+0x4e8>)
 80049f4:	f023 0304 	bic.w	r3, r3, #4
 80049f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d015      	beq.n	8004a2e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a02:	f7fd fa5d 	bl	8001ec0 <HAL_GetTick>
 8004a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a08:	e00a      	b.n	8004a20 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a0a:	f7fd fa59 	bl	8001ec0 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d901      	bls.n	8004a20 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e0c5      	b.n	8004bac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a20:	4b65      	ldr	r3, [pc, #404]	; (8004bb8 <HAL_RCC_OscConfig+0x4e8>)
 8004a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a24:	f003 0302 	and.w	r3, r3, #2
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d0ee      	beq.n	8004a0a <HAL_RCC_OscConfig+0x33a>
 8004a2c:	e014      	b.n	8004a58 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a2e:	f7fd fa47 	bl	8001ec0 <HAL_GetTick>
 8004a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a34:	e00a      	b.n	8004a4c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a36:	f7fd fa43 	bl	8001ec0 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e0af      	b.n	8004bac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a4c:	4b5a      	ldr	r3, [pc, #360]	; (8004bb8 <HAL_RCC_OscConfig+0x4e8>)
 8004a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1ee      	bne.n	8004a36 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a58:	7dfb      	ldrb	r3, [r7, #23]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d105      	bne.n	8004a6a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a5e:	4b56      	ldr	r3, [pc, #344]	; (8004bb8 <HAL_RCC_OscConfig+0x4e8>)
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	4a55      	ldr	r2, [pc, #340]	; (8004bb8 <HAL_RCC_OscConfig+0x4e8>)
 8004a64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f000 809b 	beq.w	8004baa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a74:	4b50      	ldr	r3, [pc, #320]	; (8004bb8 <HAL_RCC_OscConfig+0x4e8>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f003 030c 	and.w	r3, r3, #12
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d05c      	beq.n	8004b3a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d141      	bne.n	8004b0c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a88:	4b4c      	ldr	r3, [pc, #304]	; (8004bbc <HAL_RCC_OscConfig+0x4ec>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a8e:	f7fd fa17 	bl	8001ec0 <HAL_GetTick>
 8004a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a94:	e008      	b.n	8004aa8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a96:	f7fd fa13 	bl	8001ec0 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e081      	b.n	8004bac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aa8:	4b43      	ldr	r3, [pc, #268]	; (8004bb8 <HAL_RCC_OscConfig+0x4e8>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1f0      	bne.n	8004a96 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	69da      	ldr	r2, [r3, #28]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a1b      	ldr	r3, [r3, #32]
 8004abc:	431a      	orrs	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac2:	019b      	lsls	r3, r3, #6
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aca:	085b      	lsrs	r3, r3, #1
 8004acc:	3b01      	subs	r3, #1
 8004ace:	041b      	lsls	r3, r3, #16
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad6:	061b      	lsls	r3, r3, #24
 8004ad8:	4937      	ldr	r1, [pc, #220]	; (8004bb8 <HAL_RCC_OscConfig+0x4e8>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ade:	4b37      	ldr	r3, [pc, #220]	; (8004bbc <HAL_RCC_OscConfig+0x4ec>)
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae4:	f7fd f9ec 	bl	8001ec0 <HAL_GetTick>
 8004ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aea:	e008      	b.n	8004afe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aec:	f7fd f9e8 	bl	8001ec0 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e056      	b.n	8004bac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004afe:	4b2e      	ldr	r3, [pc, #184]	; (8004bb8 <HAL_RCC_OscConfig+0x4e8>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d0f0      	beq.n	8004aec <HAL_RCC_OscConfig+0x41c>
 8004b0a:	e04e      	b.n	8004baa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b0c:	4b2b      	ldr	r3, [pc, #172]	; (8004bbc <HAL_RCC_OscConfig+0x4ec>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b12:	f7fd f9d5 	bl	8001ec0 <HAL_GetTick>
 8004b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b18:	e008      	b.n	8004b2c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b1a:	f7fd f9d1 	bl	8001ec0 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e03f      	b.n	8004bac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b2c:	4b22      	ldr	r3, [pc, #136]	; (8004bb8 <HAL_RCC_OscConfig+0x4e8>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1f0      	bne.n	8004b1a <HAL_RCC_OscConfig+0x44a>
 8004b38:	e037      	b.n	8004baa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d101      	bne.n	8004b46 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e032      	b.n	8004bac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b46:	4b1c      	ldr	r3, [pc, #112]	; (8004bb8 <HAL_RCC_OscConfig+0x4e8>)
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d028      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d121      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d11a      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b76:	4013      	ands	r3, r2
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b7c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d111      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8c:	085b      	lsrs	r3, r3, #1
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d107      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d001      	beq.n	8004baa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e000      	b.n	8004bac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3718      	adds	r7, #24
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	40007000 	.word	0x40007000
 8004bb8:	40023800 	.word	0x40023800
 8004bbc:	42470060 	.word	0x42470060

08004bc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d101      	bne.n	8004bd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e0cc      	b.n	8004d6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bd4:	4b68      	ldr	r3, [pc, #416]	; (8004d78 <HAL_RCC_ClockConfig+0x1b8>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0307 	and.w	r3, r3, #7
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d90c      	bls.n	8004bfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004be2:	4b65      	ldr	r3, [pc, #404]	; (8004d78 <HAL_RCC_ClockConfig+0x1b8>)
 8004be4:	683a      	ldr	r2, [r7, #0]
 8004be6:	b2d2      	uxtb	r2, r2
 8004be8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bea:	4b63      	ldr	r3, [pc, #396]	; (8004d78 <HAL_RCC_ClockConfig+0x1b8>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0307 	and.w	r3, r3, #7
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d001      	beq.n	8004bfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e0b8      	b.n	8004d6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0302 	and.w	r3, r3, #2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d020      	beq.n	8004c4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0304 	and.w	r3, r3, #4
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d005      	beq.n	8004c20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c14:	4b59      	ldr	r3, [pc, #356]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	4a58      	ldr	r2, [pc, #352]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004c1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0308 	and.w	r3, r3, #8
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d005      	beq.n	8004c38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c2c:	4b53      	ldr	r3, [pc, #332]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	4a52      	ldr	r2, [pc, #328]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004c32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c38:	4b50      	ldr	r3, [pc, #320]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	494d      	ldr	r1, [pc, #308]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d044      	beq.n	8004ce0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d107      	bne.n	8004c6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c5e:	4b47      	ldr	r3, [pc, #284]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d119      	bne.n	8004c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e07f      	b.n	8004d6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d003      	beq.n	8004c7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c7a:	2b03      	cmp	r3, #3
 8004c7c:	d107      	bne.n	8004c8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c7e:	4b3f      	ldr	r3, [pc, #252]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d109      	bne.n	8004c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e06f      	b.n	8004d6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c8e:	4b3b      	ldr	r3, [pc, #236]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e067      	b.n	8004d6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c9e:	4b37      	ldr	r3, [pc, #220]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f023 0203 	bic.w	r2, r3, #3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	4934      	ldr	r1, [pc, #208]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cb0:	f7fd f906 	bl	8001ec0 <HAL_GetTick>
 8004cb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cb6:	e00a      	b.n	8004cce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cb8:	f7fd f902 	bl	8001ec0 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e04f      	b.n	8004d6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cce:	4b2b      	ldr	r3, [pc, #172]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f003 020c 	and.w	r2, r3, #12
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d1eb      	bne.n	8004cb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ce0:	4b25      	ldr	r3, [pc, #148]	; (8004d78 <HAL_RCC_ClockConfig+0x1b8>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0307 	and.w	r3, r3, #7
 8004ce8:	683a      	ldr	r2, [r7, #0]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d20c      	bcs.n	8004d08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cee:	4b22      	ldr	r3, [pc, #136]	; (8004d78 <HAL_RCC_ClockConfig+0x1b8>)
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	b2d2      	uxtb	r2, r2
 8004cf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cf6:	4b20      	ldr	r3, [pc, #128]	; (8004d78 <HAL_RCC_ClockConfig+0x1b8>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0307 	and.w	r3, r3, #7
 8004cfe:	683a      	ldr	r2, [r7, #0]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d001      	beq.n	8004d08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e032      	b.n	8004d6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0304 	and.w	r3, r3, #4
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d008      	beq.n	8004d26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d14:	4b19      	ldr	r3, [pc, #100]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	4916      	ldr	r1, [pc, #88]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0308 	and.w	r3, r3, #8
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d009      	beq.n	8004d46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d32:	4b12      	ldr	r3, [pc, #72]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	00db      	lsls	r3, r3, #3
 8004d40:	490e      	ldr	r1, [pc, #56]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d46:	f000 f821 	bl	8004d8c <HAL_RCC_GetSysClockFreq>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	4b0b      	ldr	r3, [pc, #44]	; (8004d7c <HAL_RCC_ClockConfig+0x1bc>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	091b      	lsrs	r3, r3, #4
 8004d52:	f003 030f 	and.w	r3, r3, #15
 8004d56:	490a      	ldr	r1, [pc, #40]	; (8004d80 <HAL_RCC_ClockConfig+0x1c0>)
 8004d58:	5ccb      	ldrb	r3, [r1, r3]
 8004d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d5e:	4a09      	ldr	r2, [pc, #36]	; (8004d84 <HAL_RCC_ClockConfig+0x1c4>)
 8004d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d62:	4b09      	ldr	r3, [pc, #36]	; (8004d88 <HAL_RCC_ClockConfig+0x1c8>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7fd f866 	bl	8001e38 <HAL_InitTick>

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	40023c00 	.word	0x40023c00
 8004d7c:	40023800 	.word	0x40023800
 8004d80:	0800c700 	.word	0x0800c700
 8004d84:	20000000 	.word	0x20000000
 8004d88:	20000004 	.word	0x20000004

08004d8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d8c:	b5b0      	push	{r4, r5, r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d92:	2100      	movs	r1, #0
 8004d94:	6079      	str	r1, [r7, #4]
 8004d96:	2100      	movs	r1, #0
 8004d98:	60f9      	str	r1, [r7, #12]
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004d9e:	2100      	movs	r1, #0
 8004da0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004da2:	4952      	ldr	r1, [pc, #328]	; (8004eec <HAL_RCC_GetSysClockFreq+0x160>)
 8004da4:	6889      	ldr	r1, [r1, #8]
 8004da6:	f001 010c 	and.w	r1, r1, #12
 8004daa:	2908      	cmp	r1, #8
 8004dac:	d00d      	beq.n	8004dca <HAL_RCC_GetSysClockFreq+0x3e>
 8004dae:	2908      	cmp	r1, #8
 8004db0:	f200 8094 	bhi.w	8004edc <HAL_RCC_GetSysClockFreq+0x150>
 8004db4:	2900      	cmp	r1, #0
 8004db6:	d002      	beq.n	8004dbe <HAL_RCC_GetSysClockFreq+0x32>
 8004db8:	2904      	cmp	r1, #4
 8004dba:	d003      	beq.n	8004dc4 <HAL_RCC_GetSysClockFreq+0x38>
 8004dbc:	e08e      	b.n	8004edc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004dbe:	4b4c      	ldr	r3, [pc, #304]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x164>)
 8004dc0:	60bb      	str	r3, [r7, #8]
       break;
 8004dc2:	e08e      	b.n	8004ee2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dc4:	4b4b      	ldr	r3, [pc, #300]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x168>)
 8004dc6:	60bb      	str	r3, [r7, #8]
      break;
 8004dc8:	e08b      	b.n	8004ee2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dca:	4948      	ldr	r1, [pc, #288]	; (8004eec <HAL_RCC_GetSysClockFreq+0x160>)
 8004dcc:	6849      	ldr	r1, [r1, #4]
 8004dce:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004dd2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dd4:	4945      	ldr	r1, [pc, #276]	; (8004eec <HAL_RCC_GetSysClockFreq+0x160>)
 8004dd6:	6849      	ldr	r1, [r1, #4]
 8004dd8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004ddc:	2900      	cmp	r1, #0
 8004dde:	d024      	beq.n	8004e2a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004de0:	4942      	ldr	r1, [pc, #264]	; (8004eec <HAL_RCC_GetSysClockFreq+0x160>)
 8004de2:	6849      	ldr	r1, [r1, #4]
 8004de4:	0989      	lsrs	r1, r1, #6
 8004de6:	4608      	mov	r0, r1
 8004de8:	f04f 0100 	mov.w	r1, #0
 8004dec:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004df0:	f04f 0500 	mov.w	r5, #0
 8004df4:	ea00 0204 	and.w	r2, r0, r4
 8004df8:	ea01 0305 	and.w	r3, r1, r5
 8004dfc:	493d      	ldr	r1, [pc, #244]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x168>)
 8004dfe:	fb01 f003 	mul.w	r0, r1, r3
 8004e02:	2100      	movs	r1, #0
 8004e04:	fb01 f102 	mul.w	r1, r1, r2
 8004e08:	1844      	adds	r4, r0, r1
 8004e0a:	493a      	ldr	r1, [pc, #232]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x168>)
 8004e0c:	fba2 0101 	umull	r0, r1, r2, r1
 8004e10:	1863      	adds	r3, r4, r1
 8004e12:	4619      	mov	r1, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	461a      	mov	r2, r3
 8004e18:	f04f 0300 	mov.w	r3, #0
 8004e1c:	f7fb ff3c 	bl	8000c98 <__aeabi_uldivmod>
 8004e20:	4602      	mov	r2, r0
 8004e22:	460b      	mov	r3, r1
 8004e24:	4613      	mov	r3, r2
 8004e26:	60fb      	str	r3, [r7, #12]
 8004e28:	e04a      	b.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e2a:	4b30      	ldr	r3, [pc, #192]	; (8004eec <HAL_RCC_GetSysClockFreq+0x160>)
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	099b      	lsrs	r3, r3, #6
 8004e30:	461a      	mov	r2, r3
 8004e32:	f04f 0300 	mov.w	r3, #0
 8004e36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004e3a:	f04f 0100 	mov.w	r1, #0
 8004e3e:	ea02 0400 	and.w	r4, r2, r0
 8004e42:	ea03 0501 	and.w	r5, r3, r1
 8004e46:	4620      	mov	r0, r4
 8004e48:	4629      	mov	r1, r5
 8004e4a:	f04f 0200 	mov.w	r2, #0
 8004e4e:	f04f 0300 	mov.w	r3, #0
 8004e52:	014b      	lsls	r3, r1, #5
 8004e54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004e58:	0142      	lsls	r2, r0, #5
 8004e5a:	4610      	mov	r0, r2
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	1b00      	subs	r0, r0, r4
 8004e60:	eb61 0105 	sbc.w	r1, r1, r5
 8004e64:	f04f 0200 	mov.w	r2, #0
 8004e68:	f04f 0300 	mov.w	r3, #0
 8004e6c:	018b      	lsls	r3, r1, #6
 8004e6e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004e72:	0182      	lsls	r2, r0, #6
 8004e74:	1a12      	subs	r2, r2, r0
 8004e76:	eb63 0301 	sbc.w	r3, r3, r1
 8004e7a:	f04f 0000 	mov.w	r0, #0
 8004e7e:	f04f 0100 	mov.w	r1, #0
 8004e82:	00d9      	lsls	r1, r3, #3
 8004e84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e88:	00d0      	lsls	r0, r2, #3
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	1912      	adds	r2, r2, r4
 8004e90:	eb45 0303 	adc.w	r3, r5, r3
 8004e94:	f04f 0000 	mov.w	r0, #0
 8004e98:	f04f 0100 	mov.w	r1, #0
 8004e9c:	0299      	lsls	r1, r3, #10
 8004e9e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004ea2:	0290      	lsls	r0, r2, #10
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	4610      	mov	r0, r2
 8004eaa:	4619      	mov	r1, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	461a      	mov	r2, r3
 8004eb0:	f04f 0300 	mov.w	r3, #0
 8004eb4:	f7fb fef0 	bl	8000c98 <__aeabi_uldivmod>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	460b      	mov	r3, r1
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ec0:	4b0a      	ldr	r3, [pc, #40]	; (8004eec <HAL_RCC_GetSysClockFreq+0x160>)
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	0c1b      	lsrs	r3, r3, #16
 8004ec6:	f003 0303 	and.w	r3, r3, #3
 8004eca:	3301      	adds	r3, #1
 8004ecc:	005b      	lsls	r3, r3, #1
 8004ece:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed8:	60bb      	str	r3, [r7, #8]
      break;
 8004eda:	e002      	b.n	8004ee2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004edc:	4b04      	ldr	r3, [pc, #16]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x164>)
 8004ede:	60bb      	str	r3, [r7, #8]
      break;
 8004ee0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ee2:	68bb      	ldr	r3, [r7, #8]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bdb0      	pop	{r4, r5, r7, pc}
 8004eec:	40023800 	.word	0x40023800
 8004ef0:	00f42400 	.word	0x00f42400
 8004ef4:	017d7840 	.word	0x017d7840

08004ef8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004efc:	4b03      	ldr	r3, [pc, #12]	; (8004f0c <HAL_RCC_GetHCLKFreq+0x14>)
 8004efe:	681b      	ldr	r3, [r3, #0]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	20000000 	.word	0x20000000

08004f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f14:	f7ff fff0 	bl	8004ef8 <HAL_RCC_GetHCLKFreq>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	4b05      	ldr	r3, [pc, #20]	; (8004f30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	0a9b      	lsrs	r3, r3, #10
 8004f20:	f003 0307 	and.w	r3, r3, #7
 8004f24:	4903      	ldr	r1, [pc, #12]	; (8004f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f26:	5ccb      	ldrb	r3, [r1, r3]
 8004f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	40023800 	.word	0x40023800
 8004f34:	0800c710 	.word	0x0800c710

08004f38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f38:	b084      	sub	sp, #16
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b084      	sub	sp, #16
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
 8004f42:	f107 001c 	add.w	r0, r7, #28
 8004f46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d122      	bne.n	8004f96 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004f64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d105      	bne.n	8004f8a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f001 fb1c 	bl	80065c8 <USB_CoreReset>
 8004f90:	4603      	mov	r3, r0
 8004f92:	73fb      	strb	r3, [r7, #15]
 8004f94:	e01a      	b.n	8004fcc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f001 fb10 	bl	80065c8 <USB_CoreReset>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004fac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d106      	bne.n	8004fc0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	639a      	str	r2, [r3, #56]	; 0x38
 8004fbe:	e005      	b.n	8004fcc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d10b      	bne.n	8004fea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f043 0206 	orr.w	r2, r3, #6
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f043 0220 	orr.w	r2, r3, #32
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3710      	adds	r7, #16
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ff6:	b004      	add	sp, #16
 8004ff8:	4770      	bx	lr
	...

08004ffc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	4613      	mov	r3, r2
 8005008:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800500a:	79fb      	ldrb	r3, [r7, #7]
 800500c:	2b02      	cmp	r3, #2
 800500e:	d165      	bne.n	80050dc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	4a41      	ldr	r2, [pc, #260]	; (8005118 <USB_SetTurnaroundTime+0x11c>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d906      	bls.n	8005026 <USB_SetTurnaroundTime+0x2a>
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	4a40      	ldr	r2, [pc, #256]	; (800511c <USB_SetTurnaroundTime+0x120>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d202      	bcs.n	8005026 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005020:	230f      	movs	r3, #15
 8005022:	617b      	str	r3, [r7, #20]
 8005024:	e062      	b.n	80050ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	4a3c      	ldr	r2, [pc, #240]	; (800511c <USB_SetTurnaroundTime+0x120>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d306      	bcc.n	800503c <USB_SetTurnaroundTime+0x40>
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	4a3b      	ldr	r2, [pc, #236]	; (8005120 <USB_SetTurnaroundTime+0x124>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d202      	bcs.n	800503c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005036:	230e      	movs	r3, #14
 8005038:	617b      	str	r3, [r7, #20]
 800503a:	e057      	b.n	80050ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	4a38      	ldr	r2, [pc, #224]	; (8005120 <USB_SetTurnaroundTime+0x124>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d306      	bcc.n	8005052 <USB_SetTurnaroundTime+0x56>
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	4a37      	ldr	r2, [pc, #220]	; (8005124 <USB_SetTurnaroundTime+0x128>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d202      	bcs.n	8005052 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800504c:	230d      	movs	r3, #13
 800504e:	617b      	str	r3, [r7, #20]
 8005050:	e04c      	b.n	80050ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	4a33      	ldr	r2, [pc, #204]	; (8005124 <USB_SetTurnaroundTime+0x128>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d306      	bcc.n	8005068 <USB_SetTurnaroundTime+0x6c>
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	4a32      	ldr	r2, [pc, #200]	; (8005128 <USB_SetTurnaroundTime+0x12c>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d802      	bhi.n	8005068 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005062:	230c      	movs	r3, #12
 8005064:	617b      	str	r3, [r7, #20]
 8005066:	e041      	b.n	80050ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	4a2f      	ldr	r2, [pc, #188]	; (8005128 <USB_SetTurnaroundTime+0x12c>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d906      	bls.n	800507e <USB_SetTurnaroundTime+0x82>
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	4a2e      	ldr	r2, [pc, #184]	; (800512c <USB_SetTurnaroundTime+0x130>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d802      	bhi.n	800507e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005078:	230b      	movs	r3, #11
 800507a:	617b      	str	r3, [r7, #20]
 800507c:	e036      	b.n	80050ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	4a2a      	ldr	r2, [pc, #168]	; (800512c <USB_SetTurnaroundTime+0x130>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d906      	bls.n	8005094 <USB_SetTurnaroundTime+0x98>
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	4a29      	ldr	r2, [pc, #164]	; (8005130 <USB_SetTurnaroundTime+0x134>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d802      	bhi.n	8005094 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800508e:	230a      	movs	r3, #10
 8005090:	617b      	str	r3, [r7, #20]
 8005092:	e02b      	b.n	80050ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	4a26      	ldr	r2, [pc, #152]	; (8005130 <USB_SetTurnaroundTime+0x134>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d906      	bls.n	80050aa <USB_SetTurnaroundTime+0xae>
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	4a25      	ldr	r2, [pc, #148]	; (8005134 <USB_SetTurnaroundTime+0x138>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d202      	bcs.n	80050aa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80050a4:	2309      	movs	r3, #9
 80050a6:	617b      	str	r3, [r7, #20]
 80050a8:	e020      	b.n	80050ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	4a21      	ldr	r2, [pc, #132]	; (8005134 <USB_SetTurnaroundTime+0x138>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d306      	bcc.n	80050c0 <USB_SetTurnaroundTime+0xc4>
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	4a20      	ldr	r2, [pc, #128]	; (8005138 <USB_SetTurnaroundTime+0x13c>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d802      	bhi.n	80050c0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80050ba:	2308      	movs	r3, #8
 80050bc:	617b      	str	r3, [r7, #20]
 80050be:	e015      	b.n	80050ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	4a1d      	ldr	r2, [pc, #116]	; (8005138 <USB_SetTurnaroundTime+0x13c>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d906      	bls.n	80050d6 <USB_SetTurnaroundTime+0xda>
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	4a1c      	ldr	r2, [pc, #112]	; (800513c <USB_SetTurnaroundTime+0x140>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d202      	bcs.n	80050d6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80050d0:	2307      	movs	r3, #7
 80050d2:	617b      	str	r3, [r7, #20]
 80050d4:	e00a      	b.n	80050ec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80050d6:	2306      	movs	r3, #6
 80050d8:	617b      	str	r3, [r7, #20]
 80050da:	e007      	b.n	80050ec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80050dc:	79fb      	ldrb	r3, [r7, #7]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d102      	bne.n	80050e8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80050e2:	2309      	movs	r3, #9
 80050e4:	617b      	str	r3, [r7, #20]
 80050e6:	e001      	b.n	80050ec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80050e8:	2309      	movs	r3, #9
 80050ea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	68da      	ldr	r2, [r3, #12]
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	029b      	lsls	r3, r3, #10
 8005100:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005104:	431a      	orrs	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	371c      	adds	r7, #28
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr
 8005118:	00d8acbf 	.word	0x00d8acbf
 800511c:	00e4e1c0 	.word	0x00e4e1c0
 8005120:	00f42400 	.word	0x00f42400
 8005124:	01067380 	.word	0x01067380
 8005128:	011a499f 	.word	0x011a499f
 800512c:	01312cff 	.word	0x01312cff
 8005130:	014ca43f 	.word	0x014ca43f
 8005134:	016e3600 	.word	0x016e3600
 8005138:	01a6ab1f 	.word	0x01a6ab1f
 800513c:	01e84800 	.word	0x01e84800

08005140 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f043 0201 	orr.w	r2, r3, #1
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr

08005162 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005162:	b480      	push	{r7}
 8005164:	b083      	sub	sp, #12
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f023 0201 	bic.w	r2, r3, #1
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	460b      	mov	r3, r1
 800518e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005190:	2300      	movs	r3, #0
 8005192:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80051a0:	78fb      	ldrb	r3, [r7, #3]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d115      	bne.n	80051d2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80051b2:	2001      	movs	r0, #1
 80051b4:	f7fc fe90 	bl	8001ed8 <HAL_Delay>
      ms++;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	3301      	adds	r3, #1
 80051bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f001 f972 	bl	80064a8 <USB_GetMode>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d01e      	beq.n	8005208 <USB_SetCurrentMode+0x84>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2b31      	cmp	r3, #49	; 0x31
 80051ce:	d9f0      	bls.n	80051b2 <USB_SetCurrentMode+0x2e>
 80051d0:	e01a      	b.n	8005208 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80051d2:	78fb      	ldrb	r3, [r7, #3]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d115      	bne.n	8005204 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80051e4:	2001      	movs	r0, #1
 80051e6:	f7fc fe77 	bl	8001ed8 <HAL_Delay>
      ms++;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	3301      	adds	r3, #1
 80051ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f001 f959 	bl	80064a8 <USB_GetMode>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d005      	beq.n	8005208 <USB_SetCurrentMode+0x84>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2b31      	cmp	r3, #49	; 0x31
 8005200:	d9f0      	bls.n	80051e4 <USB_SetCurrentMode+0x60>
 8005202:	e001      	b.n	8005208 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e005      	b.n	8005214 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2b32      	cmp	r3, #50	; 0x32
 800520c:	d101      	bne.n	8005212 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e000      	b.n	8005214 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800521c:	b084      	sub	sp, #16
 800521e:	b580      	push	{r7, lr}
 8005220:	b086      	sub	sp, #24
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
 8005226:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800522a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800522e:	2300      	movs	r3, #0
 8005230:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005236:	2300      	movs	r3, #0
 8005238:	613b      	str	r3, [r7, #16]
 800523a:	e009      	b.n	8005250 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	3340      	adds	r3, #64	; 0x40
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	4413      	add	r3, r2
 8005246:	2200      	movs	r2, #0
 8005248:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	3301      	adds	r3, #1
 800524e:	613b      	str	r3, [r7, #16]
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	2b0e      	cmp	r3, #14
 8005254:	d9f2      	bls.n	800523c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005258:	2b00      	cmp	r3, #0
 800525a:	d11c      	bne.n	8005296 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800526a:	f043 0302 	orr.w	r3, r3, #2
 800526e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005274:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005280:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	639a      	str	r2, [r3, #56]	; 0x38
 8005294:	e00b      	b.n	80052ae <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052b4:	461a      	mov	r2, r3
 80052b6:	2300      	movs	r3, #0
 80052b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c0:	4619      	mov	r1, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c8:	461a      	mov	r2, r3
 80052ca:	680b      	ldr	r3, [r1, #0]
 80052cc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d10c      	bne.n	80052ee <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80052d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d104      	bne.n	80052e4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80052da:	2100      	movs	r1, #0
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 f945 	bl	800556c <USB_SetDevSpeed>
 80052e2:	e008      	b.n	80052f6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80052e4:	2101      	movs	r1, #1
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f940 	bl	800556c <USB_SetDevSpeed>
 80052ec:	e003      	b.n	80052f6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80052ee:	2103      	movs	r1, #3
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 f93b 	bl	800556c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80052f6:	2110      	movs	r1, #16
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 f8f3 	bl	80054e4 <USB_FlushTxFifo>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d001      	beq.n	8005308 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 f90f 	bl	800552c <USB_FlushRxFifo>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d001      	beq.n	8005318 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800531e:	461a      	mov	r2, r3
 8005320:	2300      	movs	r3, #0
 8005322:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800532a:	461a      	mov	r2, r3
 800532c:	2300      	movs	r3, #0
 800532e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005336:	461a      	mov	r2, r3
 8005338:	2300      	movs	r3, #0
 800533a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800533c:	2300      	movs	r3, #0
 800533e:	613b      	str	r3, [r7, #16]
 8005340:	e043      	b.n	80053ca <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	015a      	lsls	r2, r3, #5
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	4413      	add	r3, r2
 800534a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005354:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005358:	d118      	bne.n	800538c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10a      	bne.n	8005376 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	015a      	lsls	r2, r3, #5
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	4413      	add	r3, r2
 8005368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800536c:	461a      	mov	r2, r3
 800536e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005372:	6013      	str	r3, [r2, #0]
 8005374:	e013      	b.n	800539e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	015a      	lsls	r2, r3, #5
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	4413      	add	r3, r2
 800537e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005382:	461a      	mov	r2, r3
 8005384:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005388:	6013      	str	r3, [r2, #0]
 800538a:	e008      	b.n	800539e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	015a      	lsls	r2, r3, #5
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	4413      	add	r3, r2
 8005394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005398:	461a      	mov	r2, r3
 800539a:	2300      	movs	r3, #0
 800539c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053aa:	461a      	mov	r2, r3
 80053ac:	2300      	movs	r3, #0
 80053ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	015a      	lsls	r2, r3, #5
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053bc:	461a      	mov	r2, r3
 80053be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80053c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	3301      	adds	r3, #1
 80053c8:	613b      	str	r3, [r7, #16]
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d3b7      	bcc.n	8005342 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053d2:	2300      	movs	r3, #0
 80053d4:	613b      	str	r3, [r7, #16]
 80053d6:	e043      	b.n	8005460 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	015a      	lsls	r2, r3, #5
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	4413      	add	r3, r2
 80053e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053ee:	d118      	bne.n	8005422 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d10a      	bne.n	800540c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	015a      	lsls	r2, r3, #5
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	4413      	add	r3, r2
 80053fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005402:	461a      	mov	r2, r3
 8005404:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005408:	6013      	str	r3, [r2, #0]
 800540a:	e013      	b.n	8005434 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	4413      	add	r3, r2
 8005414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005418:	461a      	mov	r2, r3
 800541a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800541e:	6013      	str	r3, [r2, #0]
 8005420:	e008      	b.n	8005434 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	015a      	lsls	r2, r3, #5
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	4413      	add	r3, r2
 800542a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800542e:	461a      	mov	r2, r3
 8005430:	2300      	movs	r3, #0
 8005432:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	4413      	add	r3, r2
 800543c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005440:	461a      	mov	r2, r3
 8005442:	2300      	movs	r3, #0
 8005444:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	015a      	lsls	r2, r3, #5
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	4413      	add	r3, r2
 800544e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005452:	461a      	mov	r2, r3
 8005454:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005458:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	3301      	adds	r3, #1
 800545e:	613b      	str	r3, [r7, #16]
 8005460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	429a      	cmp	r2, r3
 8005466:	d3b7      	bcc.n	80053d8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005476:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800547a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005488:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800548a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548c:	2b00      	cmp	r3, #0
 800548e:	d105      	bne.n	800549c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	f043 0210 	orr.w	r2, r3, #16
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	699a      	ldr	r2, [r3, #24]
 80054a0:	4b0f      	ldr	r3, [pc, #60]	; (80054e0 <USB_DevInit+0x2c4>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80054a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d005      	beq.n	80054ba <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	f043 0208 	orr.w	r2, r3, #8
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80054ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d107      	bne.n	80054d0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054c8:	f043 0304 	orr.w	r3, r3, #4
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80054d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3718      	adds	r7, #24
 80054d6:	46bd      	mov	sp, r7
 80054d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054dc:	b004      	add	sp, #16
 80054de:	4770      	bx	lr
 80054e0:	803c3800 	.word	0x803c3800

080054e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80054ee:	2300      	movs	r3, #0
 80054f0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	019b      	lsls	r3, r3, #6
 80054f6:	f043 0220 	orr.w	r2, r3, #32
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	3301      	adds	r3, #1
 8005502:	60fb      	str	r3, [r7, #12]
 8005504:	4a08      	ldr	r2, [pc, #32]	; (8005528 <USB_FlushTxFifo+0x44>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d901      	bls.n	800550e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e006      	b.n	800551c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	f003 0320 	and.w	r3, r3, #32
 8005516:	2b20      	cmp	r3, #32
 8005518:	d0f1      	beq.n	80054fe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3714      	adds	r7, #20
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr
 8005528:	00030d40 	.word	0x00030d40

0800552c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005534:	2300      	movs	r3, #0
 8005536:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2210      	movs	r2, #16
 800553c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	3301      	adds	r3, #1
 8005542:	60fb      	str	r3, [r7, #12]
 8005544:	4a08      	ldr	r2, [pc, #32]	; (8005568 <USB_FlushRxFifo+0x3c>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d901      	bls.n	800554e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e006      	b.n	800555c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	f003 0310 	and.w	r3, r3, #16
 8005556:	2b10      	cmp	r3, #16
 8005558:	d0f1      	beq.n	800553e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr
 8005568:	00030d40 	.word	0x00030d40

0800556c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	460b      	mov	r3, r1
 8005576:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	78fb      	ldrb	r3, [r7, #3]
 8005586:	68f9      	ldr	r1, [r7, #12]
 8005588:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800558c:	4313      	orrs	r3, r2
 800558e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3714      	adds	r7, #20
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr

0800559e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800559e:	b480      	push	{r7}
 80055a0:	b087      	sub	sp, #28
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f003 0306 	and.w	r3, r3, #6
 80055b6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d102      	bne.n	80055c4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80055be:	2300      	movs	r3, #0
 80055c0:	75fb      	strb	r3, [r7, #23]
 80055c2:	e00a      	b.n	80055da <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d002      	beq.n	80055d0 <USB_GetDevSpeed+0x32>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2b06      	cmp	r3, #6
 80055ce:	d102      	bne.n	80055d6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80055d0:	2302      	movs	r3, #2
 80055d2:	75fb      	strb	r3, [r7, #23]
 80055d4:	e001      	b.n	80055da <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80055d6:	230f      	movs	r3, #15
 80055d8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80055da:	7dfb      	ldrb	r3, [r7, #23]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	371c      	adds	r7, #28
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	785b      	ldrb	r3, [r3, #1]
 8005600:	2b01      	cmp	r3, #1
 8005602:	d13a      	bne.n	800567a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800560a:	69da      	ldr	r2, [r3, #28]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	f003 030f 	and.w	r3, r3, #15
 8005614:	2101      	movs	r1, #1
 8005616:	fa01 f303 	lsl.w	r3, r1, r3
 800561a:	b29b      	uxth	r3, r3
 800561c:	68f9      	ldr	r1, [r7, #12]
 800561e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005622:	4313      	orrs	r3, r2
 8005624:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	015a      	lsls	r2, r3, #5
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	4413      	add	r3, r2
 800562e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d155      	bne.n	80056e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4413      	add	r3, r2
 8005644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	78db      	ldrb	r3, [r3, #3]
 8005656:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005658:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	059b      	lsls	r3, r3, #22
 800565e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005660:	4313      	orrs	r3, r2
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	0151      	lsls	r1, r2, #5
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	440a      	add	r2, r1
 800566a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800566e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005676:	6013      	str	r3, [r2, #0]
 8005678:	e036      	b.n	80056e8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005680:	69da      	ldr	r2, [r3, #28]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	f003 030f 	and.w	r3, r3, #15
 800568a:	2101      	movs	r1, #1
 800568c:	fa01 f303 	lsl.w	r3, r1, r3
 8005690:	041b      	lsls	r3, r3, #16
 8005692:	68f9      	ldr	r1, [r7, #12]
 8005694:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005698:	4313      	orrs	r3, r2
 800569a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	015a      	lsls	r2, r3, #5
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d11a      	bne.n	80056e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	015a      	lsls	r2, r3, #5
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	4413      	add	r3, r2
 80056ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	78db      	ldrb	r3, [r3, #3]
 80056cc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80056ce:	430b      	orrs	r3, r1
 80056d0:	4313      	orrs	r3, r2
 80056d2:	68ba      	ldr	r2, [r7, #8]
 80056d4:	0151      	lsls	r1, r2, #5
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	440a      	add	r2, r1
 80056da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056e6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3714      	adds	r7, #20
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
	...

080056f8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	785b      	ldrb	r3, [r3, #1]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d161      	bne.n	80057d8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	015a      	lsls	r2, r3, #5
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	4413      	add	r3, r2
 800571c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005726:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800572a:	d11f      	bne.n	800576c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	015a      	lsls	r2, r3, #5
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	4413      	add	r3, r2
 8005734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	0151      	lsls	r1, r2, #5
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	440a      	add	r2, r1
 8005742:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005746:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800574a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	015a      	lsls	r2, r3, #5
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	4413      	add	r3, r2
 8005754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	0151      	lsls	r1, r2, #5
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	440a      	add	r2, r1
 8005762:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005766:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800576a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005772:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	f003 030f 	and.w	r3, r3, #15
 800577c:	2101      	movs	r1, #1
 800577e:	fa01 f303 	lsl.w	r3, r1, r3
 8005782:	b29b      	uxth	r3, r3
 8005784:	43db      	mvns	r3, r3
 8005786:	68f9      	ldr	r1, [r7, #12]
 8005788:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800578c:	4013      	ands	r3, r2
 800578e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005796:	69da      	ldr	r2, [r3, #28]
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	f003 030f 	and.w	r3, r3, #15
 80057a0:	2101      	movs	r1, #1
 80057a2:	fa01 f303 	lsl.w	r3, r1, r3
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	43db      	mvns	r3, r3
 80057aa:	68f9      	ldr	r1, [r7, #12]
 80057ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057b0:	4013      	ands	r3, r2
 80057b2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	015a      	lsls	r2, r3, #5
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	0159      	lsls	r1, r3, #5
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	440b      	add	r3, r1
 80057ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ce:	4619      	mov	r1, r3
 80057d0:	4b35      	ldr	r3, [pc, #212]	; (80058a8 <USB_DeactivateEndpoint+0x1b0>)
 80057d2:	4013      	ands	r3, r2
 80057d4:	600b      	str	r3, [r1, #0]
 80057d6:	e060      	b.n	800589a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	015a      	lsls	r2, r3, #5
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	4413      	add	r3, r2
 80057e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057ee:	d11f      	bne.n	8005830 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	015a      	lsls	r2, r3, #5
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68ba      	ldr	r2, [r7, #8]
 8005800:	0151      	lsls	r1, r2, #5
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	440a      	add	r2, r1
 8005806:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800580a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800580e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	015a      	lsls	r2, r3, #5
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	4413      	add	r3, r2
 8005818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68ba      	ldr	r2, [r7, #8]
 8005820:	0151      	lsls	r1, r2, #5
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	440a      	add	r2, r1
 8005826:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800582a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800582e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005836:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	f003 030f 	and.w	r3, r3, #15
 8005840:	2101      	movs	r1, #1
 8005842:	fa01 f303 	lsl.w	r3, r1, r3
 8005846:	041b      	lsls	r3, r3, #16
 8005848:	43db      	mvns	r3, r3
 800584a:	68f9      	ldr	r1, [r7, #12]
 800584c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005850:	4013      	ands	r3, r2
 8005852:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800585a:	69da      	ldr	r2, [r3, #28]
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	f003 030f 	and.w	r3, r3, #15
 8005864:	2101      	movs	r1, #1
 8005866:	fa01 f303 	lsl.w	r3, r1, r3
 800586a:	041b      	lsls	r3, r3, #16
 800586c:	43db      	mvns	r3, r3
 800586e:	68f9      	ldr	r1, [r7, #12]
 8005870:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005874:	4013      	ands	r3, r2
 8005876:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	015a      	lsls	r2, r3, #5
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	4413      	add	r3, r2
 8005880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	0159      	lsls	r1, r3, #5
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	440b      	add	r3, r1
 800588e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005892:	4619      	mov	r1, r3
 8005894:	4b05      	ldr	r3, [pc, #20]	; (80058ac <USB_DeactivateEndpoint+0x1b4>)
 8005896:	4013      	ands	r3, r2
 8005898:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3714      	adds	r7, #20
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr
 80058a8:	ec337800 	.word	0xec337800
 80058ac:	eff37800 	.word	0xeff37800

080058b0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b08a      	sub	sp, #40	; 0x28
 80058b4:	af02      	add	r7, sp, #8
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	4613      	mov	r3, r2
 80058bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	785b      	ldrb	r3, [r3, #1]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	f040 815c 	bne.w	8005b8a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d132      	bne.n	8005940 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	015a      	lsls	r2, r3, #5
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	4413      	add	r3, r2
 80058e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	69ba      	ldr	r2, [r7, #24]
 80058ea:	0151      	lsls	r1, r2, #5
 80058ec:	69fa      	ldr	r2, [r7, #28]
 80058ee:	440a      	add	r2, r1
 80058f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	015a      	lsls	r2, r3, #5
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	4413      	add	r3, r2
 8005906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	0151      	lsls	r1, r2, #5
 8005910:	69fa      	ldr	r2, [r7, #28]
 8005912:	440a      	add	r2, r1
 8005914:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005918:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800591c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	015a      	lsls	r2, r3, #5
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	4413      	add	r3, r2
 8005926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	69ba      	ldr	r2, [r7, #24]
 800592e:	0151      	lsls	r1, r2, #5
 8005930:	69fa      	ldr	r2, [r7, #28]
 8005932:	440a      	add	r2, r1
 8005934:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005938:	0cdb      	lsrs	r3, r3, #19
 800593a:	04db      	lsls	r3, r3, #19
 800593c:	6113      	str	r3, [r2, #16]
 800593e:	e074      	b.n	8005a2a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	015a      	lsls	r2, r3, #5
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	4413      	add	r3, r2
 8005948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	69ba      	ldr	r2, [r7, #24]
 8005950:	0151      	lsls	r1, r2, #5
 8005952:	69fa      	ldr	r2, [r7, #28]
 8005954:	440a      	add	r2, r1
 8005956:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800595a:	0cdb      	lsrs	r3, r3, #19
 800595c:	04db      	lsls	r3, r3, #19
 800595e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	4413      	add	r3, r2
 8005968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	69ba      	ldr	r2, [r7, #24]
 8005970:	0151      	lsls	r1, r2, #5
 8005972:	69fa      	ldr	r2, [r7, #28]
 8005974:	440a      	add	r2, r1
 8005976:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800597a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800597e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005982:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	015a      	lsls	r2, r3, #5
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	4413      	add	r3, r2
 800598c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005990:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	6959      	ldr	r1, [r3, #20]
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	440b      	add	r3, r1
 800599c:	1e59      	subs	r1, r3, #1
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80059a6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80059a8:	4b9d      	ldr	r3, [pc, #628]	; (8005c20 <USB_EPStartXfer+0x370>)
 80059aa:	400b      	ands	r3, r1
 80059ac:	69b9      	ldr	r1, [r7, #24]
 80059ae:	0148      	lsls	r0, r1, #5
 80059b0:	69f9      	ldr	r1, [r7, #28]
 80059b2:	4401      	add	r1, r0
 80059b4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80059b8:	4313      	orrs	r3, r2
 80059ba:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c8:	691a      	ldr	r2, [r3, #16]
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059d2:	69b9      	ldr	r1, [r7, #24]
 80059d4:	0148      	lsls	r0, r1, #5
 80059d6:	69f9      	ldr	r1, [r7, #28]
 80059d8:	4401      	add	r1, r0
 80059da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80059de:	4313      	orrs	r3, r2
 80059e0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	78db      	ldrb	r3, [r3, #3]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d11f      	bne.n	8005a2a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	015a      	lsls	r2, r3, #5
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	4413      	add	r3, r2
 80059f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	0151      	lsls	r1, r2, #5
 80059fc:	69fa      	ldr	r2, [r7, #28]
 80059fe:	440a      	add	r2, r1
 8005a00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a04:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005a08:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	0151      	lsls	r1, r2, #5
 8005a1c:	69fa      	ldr	r2, [r7, #28]
 8005a1e:	440a      	add	r2, r1
 8005a20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a28:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005a2a:	79fb      	ldrb	r3, [r7, #7]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d14b      	bne.n	8005ac8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d009      	beq.n	8005a4c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	015a      	lsls	r2, r3, #5
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a44:	461a      	mov	r2, r3
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	78db      	ldrb	r3, [r3, #3]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d128      	bne.n	8005aa6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d110      	bne.n	8005a86 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	69ba      	ldr	r2, [r7, #24]
 8005a74:	0151      	lsls	r1, r2, #5
 8005a76:	69fa      	ldr	r2, [r7, #28]
 8005a78:	440a      	add	r2, r1
 8005a7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a82:	6013      	str	r3, [r2, #0]
 8005a84:	e00f      	b.n	8005aa6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	015a      	lsls	r2, r3, #5
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	69ba      	ldr	r2, [r7, #24]
 8005a96:	0151      	lsls	r1, r2, #5
 8005a98:	69fa      	ldr	r2, [r7, #28]
 8005a9a:	440a      	add	r2, r1
 8005a9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aa4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	015a      	lsls	r2, r3, #5
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	4413      	add	r3, r2
 8005aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	0151      	lsls	r1, r2, #5
 8005ab8:	69fa      	ldr	r2, [r7, #28]
 8005aba:	440a      	add	r2, r1
 8005abc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ac0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ac4:	6013      	str	r3, [r2, #0]
 8005ac6:	e12f      	b.n	8005d28 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	015a      	lsls	r2, r3, #5
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	4413      	add	r3, r2
 8005ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	69ba      	ldr	r2, [r7, #24]
 8005ad8:	0151      	lsls	r1, r2, #5
 8005ada:	69fa      	ldr	r2, [r7, #28]
 8005adc:	440a      	add	r2, r1
 8005ade:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ae2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ae6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	78db      	ldrb	r3, [r3, #3]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d015      	beq.n	8005b1c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	695b      	ldr	r3, [r3, #20]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f000 8117 	beq.w	8005d28 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	f003 030f 	and.w	r3, r3, #15
 8005b0a:	2101      	movs	r1, #1
 8005b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b10:	69f9      	ldr	r1, [r7, #28]
 8005b12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b16:	4313      	orrs	r3, r2
 8005b18:	634b      	str	r3, [r1, #52]	; 0x34
 8005b1a:	e105      	b.n	8005d28 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d110      	bne.n	8005b4e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	69ba      	ldr	r2, [r7, #24]
 8005b3c:	0151      	lsls	r1, r2, #5
 8005b3e:	69fa      	ldr	r2, [r7, #28]
 8005b40:	440a      	add	r2, r1
 8005b42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b4a:	6013      	str	r3, [r2, #0]
 8005b4c:	e00f      	b.n	8005b6e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	69ba      	ldr	r2, [r7, #24]
 8005b5e:	0151      	lsls	r1, r2, #5
 8005b60:	69fa      	ldr	r2, [r7, #28]
 8005b62:	440a      	add	r2, r1
 8005b64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b6c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	68d9      	ldr	r1, [r3, #12]
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	781a      	ldrb	r2, [r3, #0]
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	b298      	uxth	r0, r3
 8005b7c:	79fb      	ldrb	r3, [r7, #7]
 8005b7e:	9300      	str	r3, [sp, #0]
 8005b80:	4603      	mov	r3, r0
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f000 fa2b 	bl	8005fde <USB_WritePacket>
 8005b88:	e0ce      	b.n	8005d28 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	015a      	lsls	r2, r3, #5
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	4413      	add	r3, r2
 8005b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	69ba      	ldr	r2, [r7, #24]
 8005b9a:	0151      	lsls	r1, r2, #5
 8005b9c:	69fa      	ldr	r2, [r7, #28]
 8005b9e:	440a      	add	r2, r1
 8005ba0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ba4:	0cdb      	lsrs	r3, r3, #19
 8005ba6:	04db      	lsls	r3, r3, #19
 8005ba8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	015a      	lsls	r2, r3, #5
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	0151      	lsls	r1, r2, #5
 8005bbc:	69fa      	ldr	r2, [r7, #28]
 8005bbe:	440a      	add	r2, r1
 8005bc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bc4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005bc8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bcc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d126      	bne.n	8005c24 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	015a      	lsls	r2, r3, #5
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	4413      	add	r3, r2
 8005bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be2:	691a      	ldr	r2, [r3, #16]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bec:	69b9      	ldr	r1, [r7, #24]
 8005bee:	0148      	lsls	r0, r1, #5
 8005bf0:	69f9      	ldr	r1, [r7, #28]
 8005bf2:	4401      	add	r1, r0
 8005bf4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	015a      	lsls	r2, r3, #5
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	4413      	add	r3, r2
 8005c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	69ba      	ldr	r2, [r7, #24]
 8005c0c:	0151      	lsls	r1, r2, #5
 8005c0e:	69fa      	ldr	r2, [r7, #28]
 8005c10:	440a      	add	r2, r1
 8005c12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c1a:	6113      	str	r3, [r2, #16]
 8005c1c:	e036      	b.n	8005c8c <USB_EPStartXfer+0x3dc>
 8005c1e:	bf00      	nop
 8005c20:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	695a      	ldr	r2, [r3, #20]
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	1e5a      	subs	r2, r3, #1
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c38:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	015a      	lsls	r2, r3, #5
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	4413      	add	r3, r2
 8005c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c46:	691a      	ldr	r2, [r3, #16]
 8005c48:	8afb      	ldrh	r3, [r7, #22]
 8005c4a:	04d9      	lsls	r1, r3, #19
 8005c4c:	4b39      	ldr	r3, [pc, #228]	; (8005d34 <USB_EPStartXfer+0x484>)
 8005c4e:	400b      	ands	r3, r1
 8005c50:	69b9      	ldr	r1, [r7, #24]
 8005c52:	0148      	lsls	r0, r1, #5
 8005c54:	69f9      	ldr	r1, [r7, #28]
 8005c56:	4401      	add	r1, r0
 8005c58:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	015a      	lsls	r2, r3, #5
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	4413      	add	r3, r2
 8005c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c6c:	691a      	ldr	r2, [r3, #16]
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	8af9      	ldrh	r1, [r7, #22]
 8005c74:	fb01 f303 	mul.w	r3, r1, r3
 8005c78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c7c:	69b9      	ldr	r1, [r7, #24]
 8005c7e:	0148      	lsls	r0, r1, #5
 8005c80:	69f9      	ldr	r1, [r7, #28]
 8005c82:	4401      	add	r1, r0
 8005c84:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005c8c:	79fb      	ldrb	r3, [r7, #7]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d10d      	bne.n	8005cae <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d009      	beq.n	8005cae <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	68d9      	ldr	r1, [r3, #12]
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	015a      	lsls	r2, r3, #5
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005caa:	460a      	mov	r2, r1
 8005cac:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	78db      	ldrb	r3, [r3, #3]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d128      	bne.n	8005d08 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d110      	bne.n	8005ce8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	69ba      	ldr	r2, [r7, #24]
 8005cd6:	0151      	lsls	r1, r2, #5
 8005cd8:	69fa      	ldr	r2, [r7, #28]
 8005cda:	440a      	add	r2, r1
 8005cdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ce0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ce4:	6013      	str	r3, [r2, #0]
 8005ce6:	e00f      	b.n	8005d08 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	015a      	lsls	r2, r3, #5
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	69ba      	ldr	r2, [r7, #24]
 8005cf8:	0151      	lsls	r1, r2, #5
 8005cfa:	69fa      	ldr	r2, [r7, #28]
 8005cfc:	440a      	add	r2, r1
 8005cfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d06:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	015a      	lsls	r2, r3, #5
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	4413      	add	r3, r2
 8005d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	69ba      	ldr	r2, [r7, #24]
 8005d18:	0151      	lsls	r1, r2, #5
 8005d1a:	69fa      	ldr	r2, [r7, #28]
 8005d1c:	440a      	add	r2, r1
 8005d1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d22:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3720      	adds	r7, #32
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	1ff80000 	.word	0x1ff80000

08005d38 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b087      	sub	sp, #28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	4613      	mov	r3, r2
 8005d44:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	785b      	ldrb	r3, [r3, #1]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	f040 80cd 	bne.w	8005ef4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d132      	bne.n	8005dc8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	0151      	lsls	r1, r2, #5
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	440a      	add	r2, r1
 8005d78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	015a      	lsls	r2, r3, #5
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	0151      	lsls	r1, r2, #5
 8005d98:	697a      	ldr	r2, [r7, #20]
 8005d9a:	440a      	add	r2, r1
 8005d9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005da0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005da4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	015a      	lsls	r2, r3, #5
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	4413      	add	r3, r2
 8005dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	0151      	lsls	r1, r2, #5
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	440a      	add	r2, r1
 8005dbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dc0:	0cdb      	lsrs	r3, r3, #19
 8005dc2:	04db      	lsls	r3, r3, #19
 8005dc4:	6113      	str	r3, [r2, #16]
 8005dc6:	e04e      	b.n	8005e66 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	0151      	lsls	r1, r2, #5
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	440a      	add	r2, r1
 8005dde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005de2:	0cdb      	lsrs	r3, r3, #19
 8005de4:	04db      	lsls	r3, r3, #19
 8005de6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	0151      	lsls	r1, r2, #5
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	440a      	add	r2, r1
 8005dfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e02:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e06:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e0a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	695a      	ldr	r2, [r3, #20]
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d903      	bls.n	8005e20 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	689a      	ldr	r2, [r3, #8]
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	0151      	lsls	r1, r2, #5
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	440a      	add	r2, r1
 8005e36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	015a      	lsls	r2, r3, #5
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	4413      	add	r3, r2
 8005e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e4c:	691a      	ldr	r2, [r3, #16]
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e56:	6939      	ldr	r1, [r7, #16]
 8005e58:	0148      	lsls	r0, r1, #5
 8005e5a:	6979      	ldr	r1, [r7, #20]
 8005e5c:	4401      	add	r1, r0
 8005e5e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e62:	4313      	orrs	r3, r2
 8005e64:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005e66:	79fb      	ldrb	r3, [r7, #7]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d11e      	bne.n	8005eaa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d009      	beq.n	8005e88 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	015a      	lsls	r2, r3, #5
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e80:	461a      	mov	r2, r3
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	0151      	lsls	r1, r2, #5
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	440a      	add	r2, r1
 8005e9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ea2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ea6:	6013      	str	r3, [r2, #0]
 8005ea8:	e092      	b.n	8005fd0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	0151      	lsls	r1, r2, #5
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	440a      	add	r2, r1
 8005ec0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ec4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ec8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d07e      	beq.n	8005fd0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ed8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	f003 030f 	and.w	r3, r3, #15
 8005ee2:	2101      	movs	r1, #1
 8005ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ee8:	6979      	ldr	r1, [r7, #20]
 8005eea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	634b      	str	r3, [r1, #52]	; 0x34
 8005ef2:	e06d      	b.n	8005fd0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	0151      	lsls	r1, r2, #5
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	440a      	add	r2, r1
 8005f0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f0e:	0cdb      	lsrs	r3, r3, #19
 8005f10:	04db      	lsls	r3, r3, #19
 8005f12:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	015a      	lsls	r2, r3, #5
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	0151      	lsls	r1, r2, #5
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	440a      	add	r2, r1
 8005f2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f2e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f32:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f36:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	695b      	ldr	r3, [r3, #20]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d003      	beq.n	8005f48 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	689a      	ldr	r2, [r3, #8]
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	0151      	lsls	r1, r2, #5
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	440a      	add	r2, r1
 8005f5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f66:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f74:	691a      	ldr	r2, [r3, #16]
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f7e:	6939      	ldr	r1, [r7, #16]
 8005f80:	0148      	lsls	r0, r1, #5
 8005f82:	6979      	ldr	r1, [r7, #20]
 8005f84:	4401      	add	r1, r0
 8005f86:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005f8e:	79fb      	ldrb	r3, [r7, #7]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d10d      	bne.n	8005fb0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d009      	beq.n	8005fb0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	68d9      	ldr	r1, [r3, #12]
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	015a      	lsls	r2, r3, #5
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fac:	460a      	mov	r2, r1
 8005fae:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	0151      	lsls	r1, r2, #5
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	440a      	add	r2, r1
 8005fc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	371c      	adds	r7, #28
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005fde:	b480      	push	{r7}
 8005fe0:	b089      	sub	sp, #36	; 0x24
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	60f8      	str	r0, [r7, #12]
 8005fe6:	60b9      	str	r1, [r7, #8]
 8005fe8:	4611      	mov	r1, r2
 8005fea:	461a      	mov	r2, r3
 8005fec:	460b      	mov	r3, r1
 8005fee:	71fb      	strb	r3, [r7, #7]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005ffc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006000:	2b00      	cmp	r3, #0
 8006002:	d123      	bne.n	800604c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006004:	88bb      	ldrh	r3, [r7, #4]
 8006006:	3303      	adds	r3, #3
 8006008:	089b      	lsrs	r3, r3, #2
 800600a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800600c:	2300      	movs	r3, #0
 800600e:	61bb      	str	r3, [r7, #24]
 8006010:	e018      	b.n	8006044 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006012:	79fb      	ldrb	r3, [r7, #7]
 8006014:	031a      	lsls	r2, r3, #12
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	4413      	add	r3, r2
 800601a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800601e:	461a      	mov	r2, r3
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	3301      	adds	r3, #1
 800602a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	3301      	adds	r3, #1
 8006030:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	3301      	adds	r3, #1
 8006036:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	3301      	adds	r3, #1
 800603c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	3301      	adds	r3, #1
 8006042:	61bb      	str	r3, [r7, #24]
 8006044:	69ba      	ldr	r2, [r7, #24]
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	429a      	cmp	r2, r3
 800604a:	d3e2      	bcc.n	8006012 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3724      	adds	r7, #36	; 0x24
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr

0800605a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800605a:	b480      	push	{r7}
 800605c:	b08b      	sub	sp, #44	; 0x2c
 800605e:	af00      	add	r7, sp, #0
 8006060:	60f8      	str	r0, [r7, #12]
 8006062:	60b9      	str	r1, [r7, #8]
 8006064:	4613      	mov	r3, r2
 8006066:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006070:	88fb      	ldrh	r3, [r7, #6]
 8006072:	089b      	lsrs	r3, r3, #2
 8006074:	b29b      	uxth	r3, r3
 8006076:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006078:	88fb      	ldrh	r3, [r7, #6]
 800607a:	f003 0303 	and.w	r3, r3, #3
 800607e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006080:	2300      	movs	r3, #0
 8006082:	623b      	str	r3, [r7, #32]
 8006084:	e014      	b.n	80060b0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006090:	601a      	str	r2, [r3, #0]
    pDest++;
 8006092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006094:	3301      	adds	r3, #1
 8006096:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609a:	3301      	adds	r3, #1
 800609c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800609e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a0:	3301      	adds	r3, #1
 80060a2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a6:	3301      	adds	r3, #1
 80060a8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80060aa:	6a3b      	ldr	r3, [r7, #32]
 80060ac:	3301      	adds	r3, #1
 80060ae:	623b      	str	r3, [r7, #32]
 80060b0:	6a3a      	ldr	r2, [r7, #32]
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d3e6      	bcc.n	8006086 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80060b8:	8bfb      	ldrh	r3, [r7, #30]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d01e      	beq.n	80060fc <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80060be:	2300      	movs	r3, #0
 80060c0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060c8:	461a      	mov	r2, r3
 80060ca:	f107 0310 	add.w	r3, r7, #16
 80060ce:	6812      	ldr	r2, [r2, #0]
 80060d0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	6a3b      	ldr	r3, [r7, #32]
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	00db      	lsls	r3, r3, #3
 80060da:	fa22 f303 	lsr.w	r3, r2, r3
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	701a      	strb	r2, [r3, #0]
      i++;
 80060e4:	6a3b      	ldr	r3, [r7, #32]
 80060e6:	3301      	adds	r3, #1
 80060e8:	623b      	str	r3, [r7, #32]
      pDest++;
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	3301      	adds	r3, #1
 80060ee:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80060f0:	8bfb      	ldrh	r3, [r7, #30]
 80060f2:	3b01      	subs	r3, #1
 80060f4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80060f6:	8bfb      	ldrh	r3, [r7, #30]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1ea      	bne.n	80060d2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80060fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80060fe:	4618      	mov	r0, r3
 8006100:	372c      	adds	r7, #44	; 0x2c
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr

0800610a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800610a:	b480      	push	{r7}
 800610c:	b085      	sub	sp, #20
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
 8006112:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	785b      	ldrb	r3, [r3, #1]
 8006122:	2b01      	cmp	r3, #1
 8006124:	d12c      	bne.n	8006180 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	015a      	lsls	r2, r3, #5
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	4413      	add	r3, r2
 800612e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	db12      	blt.n	800615e <USB_EPSetStall+0x54>
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00f      	beq.n	800615e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	015a      	lsls	r2, r3, #5
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	4413      	add	r3, r2
 8006146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	0151      	lsls	r1, r2, #5
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	440a      	add	r2, r1
 8006154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006158:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800615c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	015a      	lsls	r2, r3, #5
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	4413      	add	r3, r2
 8006166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	0151      	lsls	r1, r2, #5
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	440a      	add	r2, r1
 8006174:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006178:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800617c:	6013      	str	r3, [r2, #0]
 800617e:	e02b      	b.n	80061d8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	015a      	lsls	r2, r3, #5
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	4413      	add	r3, r2
 8006188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	db12      	blt.n	80061b8 <USB_EPSetStall+0xae>
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00f      	beq.n	80061b8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	015a      	lsls	r2, r3, #5
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	4413      	add	r3, r2
 80061a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68ba      	ldr	r2, [r7, #8]
 80061a8:	0151      	lsls	r1, r2, #5
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	440a      	add	r2, r1
 80061ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061b6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	015a      	lsls	r2, r3, #5
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	4413      	add	r3, r2
 80061c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	0151      	lsls	r1, r2, #5
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	440a      	add	r2, r1
 80061ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80061d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3714      	adds	r7, #20
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b085      	sub	sp, #20
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
 80061ee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	785b      	ldrb	r3, [r3, #1]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d128      	bne.n	8006254 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	015a      	lsls	r2, r3, #5
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	4413      	add	r3, r2
 800620a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68ba      	ldr	r2, [r7, #8]
 8006212:	0151      	lsls	r1, r2, #5
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	440a      	add	r2, r1
 8006218:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800621c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006220:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	78db      	ldrb	r3, [r3, #3]
 8006226:	2b03      	cmp	r3, #3
 8006228:	d003      	beq.n	8006232 <USB_EPClearStall+0x4c>
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	78db      	ldrb	r3, [r3, #3]
 800622e:	2b02      	cmp	r3, #2
 8006230:	d138      	bne.n	80062a4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	015a      	lsls	r2, r3, #5
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	4413      	add	r3, r2
 800623a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	0151      	lsls	r1, r2, #5
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	440a      	add	r2, r1
 8006248:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800624c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006250:	6013      	str	r3, [r2, #0]
 8006252:	e027      	b.n	80062a4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	015a      	lsls	r2, r3, #5
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	4413      	add	r3, r2
 800625c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	0151      	lsls	r1, r2, #5
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	440a      	add	r2, r1
 800626a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800626e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006272:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	78db      	ldrb	r3, [r3, #3]
 8006278:	2b03      	cmp	r3, #3
 800627a:	d003      	beq.n	8006284 <USB_EPClearStall+0x9e>
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	78db      	ldrb	r3, [r3, #3]
 8006280:	2b02      	cmp	r3, #2
 8006282:	d10f      	bne.n	80062a4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	015a      	lsls	r2, r3, #5
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	4413      	add	r3, r2
 800628c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68ba      	ldr	r2, [r7, #8]
 8006294:	0151      	lsls	r1, r2, #5
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	440a      	add	r2, r1
 800629a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800629e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062a2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3714      	adds	r7, #20
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr

080062b2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80062b2:	b480      	push	{r7}
 80062b4:	b085      	sub	sp, #20
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
 80062ba:	460b      	mov	r3, r1
 80062bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062d0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80062d4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	78fb      	ldrb	r3, [r7, #3]
 80062e0:	011b      	lsls	r3, r3, #4
 80062e2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80062e6:	68f9      	ldr	r1, [r7, #12]
 80062e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062ec:	4313      	orrs	r3, r2
 80062ee:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3714      	adds	r7, #20
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80062fe:	b480      	push	{r7}
 8006300:	b085      	sub	sp, #20
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006318:	f023 0303 	bic.w	r3, r3, #3
 800631c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800632c:	f023 0302 	bic.w	r3, r3, #2
 8006330:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3714      	adds	r7, #20
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800635a:	f023 0303 	bic.w	r3, r3, #3
 800635e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800636e:	f043 0302 	orr.w	r3, r3, #2
 8006372:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3714      	adds	r7, #20
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006382:	b480      	push	{r7}
 8006384:	b085      	sub	sp, #20
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	699b      	ldr	r3, [r3, #24]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	4013      	ands	r3, r2
 8006398:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800639a:	68fb      	ldr	r3, [r7, #12]
}
 800639c:	4618      	mov	r0, r3
 800639e:	3714      	adds	r7, #20
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b085      	sub	sp, #20
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063c4:	69db      	ldr	r3, [r3, #28]
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	4013      	ands	r3, r2
 80063ca:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	0c1b      	lsrs	r3, r3, #16
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3714      	adds	r7, #20
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ee:	699b      	ldr	r3, [r3, #24]
 80063f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063f8:	69db      	ldr	r3, [r3, #28]
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	4013      	ands	r3, r2
 80063fe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	b29b      	uxth	r3, r3
}
 8006404:	4618      	mov	r0, r3
 8006406:	3714      	adds	r7, #20
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	460b      	mov	r3, r1
 800641a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006420:	78fb      	ldrb	r3, [r7, #3]
 8006422:	015a      	lsls	r2, r3, #5
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	4413      	add	r3, r2
 8006428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006436:	695b      	ldr	r3, [r3, #20]
 8006438:	68ba      	ldr	r2, [r7, #8]
 800643a:	4013      	ands	r3, r2
 800643c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800643e:	68bb      	ldr	r3, [r7, #8]
}
 8006440:	4618      	mov	r0, r3
 8006442:	3714      	adds	r7, #20
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800644c:	b480      	push	{r7}
 800644e:	b087      	sub	sp, #28
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	460b      	mov	r3, r1
 8006456:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800646c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800646e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006470:	78fb      	ldrb	r3, [r7, #3]
 8006472:	f003 030f 	and.w	r3, r3, #15
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	fa22 f303 	lsr.w	r3, r2, r3
 800647c:	01db      	lsls	r3, r3, #7
 800647e:	b2db      	uxtb	r3, r3
 8006480:	693a      	ldr	r2, [r7, #16]
 8006482:	4313      	orrs	r3, r2
 8006484:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006486:	78fb      	ldrb	r3, [r7, #3]
 8006488:	015a      	lsls	r2, r3, #5
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	4413      	add	r3, r2
 800648e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	693a      	ldr	r2, [r7, #16]
 8006496:	4013      	ands	r3, r2
 8006498:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800649a:	68bb      	ldr	r3, [r7, #8]
}
 800649c:	4618      	mov	r0, r3
 800649e:	371c      	adds	r7, #28
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	695b      	ldr	r3, [r3, #20]
 80064b4:	f003 0301 	and.w	r3, r3, #1
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064de:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80064e2:	f023 0307 	bic.w	r3, r3, #7
 80064e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3714      	adds	r7, #20
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
	...

0800650c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800650c:	b480      	push	{r7}
 800650e:	b087      	sub	sp, #28
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	460b      	mov	r3, r1
 8006516:	607a      	str	r2, [r7, #4]
 8006518:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	333c      	adds	r3, #60	; 0x3c
 8006522:	3304      	adds	r3, #4
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	4a26      	ldr	r2, [pc, #152]	; (80065c4 <USB_EP0_OutStart+0xb8>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d90a      	bls.n	8006546 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800653c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006540:	d101      	bne.n	8006546 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006542:	2300      	movs	r3, #0
 8006544:	e037      	b.n	80065b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800654c:	461a      	mov	r2, r3
 800654e:	2300      	movs	r3, #0
 8006550:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006560:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006564:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006574:	f043 0318 	orr.w	r3, r3, #24
 8006578:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006588:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800658c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800658e:	7afb      	ldrb	r3, [r7, #11]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d10f      	bne.n	80065b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800659a:	461a      	mov	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	697a      	ldr	r2, [r7, #20]
 80065aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065ae:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80065b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	371c      	adds	r7, #28
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	4f54300a 	.word	0x4f54300a

080065c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065d0:	2300      	movs	r3, #0
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	3301      	adds	r3, #1
 80065d8:	60fb      	str	r3, [r7, #12]
 80065da:	4a13      	ldr	r2, [pc, #76]	; (8006628 <USB_CoreReset+0x60>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d901      	bls.n	80065e4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e01a      	b.n	800661a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	daf3      	bge.n	80065d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80065ec:	2300      	movs	r3, #0
 80065ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	f043 0201 	orr.w	r2, r3, #1
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	3301      	adds	r3, #1
 8006600:	60fb      	str	r3, [r7, #12]
 8006602:	4a09      	ldr	r2, [pc, #36]	; (8006628 <USB_CoreReset+0x60>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d901      	bls.n	800660c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	e006      	b.n	800661a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	f003 0301 	and.w	r3, r3, #1
 8006614:	2b01      	cmp	r3, #1
 8006616:	d0f1      	beq.n	80065fc <USB_CoreReset+0x34>

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3714      	adds	r7, #20
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	00030d40 	.word	0x00030d40

0800662c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	460b      	mov	r3, r1
 8006636:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006638:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800663c:	f002 f952 	bl	80088e4 <USBD_static_malloc>
 8006640:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d105      	bne.n	8006654 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006650:	2302      	movs	r3, #2
 8006652:	e066      	b.n	8006722 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	7c1b      	ldrb	r3, [r3, #16]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d119      	bne.n	8006698 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006664:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006668:	2202      	movs	r2, #2
 800666a:	2181      	movs	r1, #129	; 0x81
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f002 f816 	bl	800869e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2201      	movs	r2, #1
 8006676:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006678:	f44f 7300 	mov.w	r3, #512	; 0x200
 800667c:	2202      	movs	r2, #2
 800667e:	2101      	movs	r1, #1
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f002 f80c 	bl	800869e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2201      	movs	r2, #1
 800668a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2210      	movs	r2, #16
 8006692:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006696:	e016      	b.n	80066c6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006698:	2340      	movs	r3, #64	; 0x40
 800669a:	2202      	movs	r2, #2
 800669c:	2181      	movs	r1, #129	; 0x81
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f001 fffd 	bl	800869e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80066aa:	2340      	movs	r3, #64	; 0x40
 80066ac:	2202      	movs	r2, #2
 80066ae:	2101      	movs	r1, #1
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f001 fff4 	bl	800869e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2210      	movs	r2, #16
 80066c2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80066c6:	2308      	movs	r3, #8
 80066c8:	2203      	movs	r2, #3
 80066ca:	2182      	movs	r1, #130	; 0x82
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f001 ffe6 	bl	800869e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2201      	movs	r2, #1
 80066d6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	7c1b      	ldrb	r3, [r3, #16]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d109      	bne.n	8006710 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006702:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006706:	2101      	movs	r1, #1
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f002 f8b7 	bl	800887c <USBD_LL_PrepareReceive>
 800670e:	e007      	b.n	8006720 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006716:	2340      	movs	r3, #64	; 0x40
 8006718:	2101      	movs	r1, #1
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f002 f8ae 	bl	800887c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800672a:	b580      	push	{r7, lr}
 800672c:	b082      	sub	sp, #8
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
 8006732:	460b      	mov	r3, r1
 8006734:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006736:	2181      	movs	r1, #129	; 0x81
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f001 ffd6 	bl	80086ea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006744:	2101      	movs	r1, #1
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f001 ffcf 	bl	80086ea <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006754:	2182      	movs	r1, #130	; 0x82
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f001 ffc7 	bl	80086ea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00e      	beq.n	8006794 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006786:	4618      	mov	r0, r3
 8006788:	f002 f8ba 	bl	8008900 <USBD_static_free>
    pdev->pClassData = NULL;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3708      	adds	r7, #8
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
	...

080067a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b086      	sub	sp, #24
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067b0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80067b2:	2300      	movs	r3, #0
 80067b4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80067b6:	2300      	movs	r3, #0
 80067b8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80067ba:	2300      	movs	r3, #0
 80067bc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d101      	bne.n	80067c8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e0af      	b.n	8006928 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d03f      	beq.n	8006854 <USBD_CDC_Setup+0xb4>
 80067d4:	2b20      	cmp	r3, #32
 80067d6:	f040 809f 	bne.w	8006918 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	88db      	ldrh	r3, [r3, #6]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d02e      	beq.n	8006840 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	b25b      	sxtb	r3, r3
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	da16      	bge.n	800681a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	683a      	ldr	r2, [r7, #0]
 80067f6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80067f8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80067fa:	683a      	ldr	r2, [r7, #0]
 80067fc:	88d2      	ldrh	r2, [r2, #6]
 80067fe:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	88db      	ldrh	r3, [r3, #6]
 8006804:	2b07      	cmp	r3, #7
 8006806:	bf28      	it	cs
 8006808:	2307      	movcs	r3, #7
 800680a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	89fa      	ldrh	r2, [r7, #14]
 8006810:	4619      	mov	r1, r3
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f001 fb19 	bl	8007e4a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006818:	e085      	b.n	8006926 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	785a      	ldrb	r2, [r3, #1]
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	88db      	ldrh	r3, [r3, #6]
 8006828:	b2da      	uxtb	r2, r3
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006830:	6939      	ldr	r1, [r7, #16]
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	88db      	ldrh	r3, [r3, #6]
 8006836:	461a      	mov	r2, r3
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f001 fb32 	bl	8007ea2 <USBD_CtlPrepareRx>
      break;
 800683e:	e072      	b.n	8006926 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	683a      	ldr	r2, [r7, #0]
 800684a:	7850      	ldrb	r0, [r2, #1]
 800684c:	2200      	movs	r2, #0
 800684e:	6839      	ldr	r1, [r7, #0]
 8006850:	4798      	blx	r3
      break;
 8006852:	e068      	b.n	8006926 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	785b      	ldrb	r3, [r3, #1]
 8006858:	2b0b      	cmp	r3, #11
 800685a:	d852      	bhi.n	8006902 <USBD_CDC_Setup+0x162>
 800685c:	a201      	add	r2, pc, #4	; (adr r2, 8006864 <USBD_CDC_Setup+0xc4>)
 800685e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006862:	bf00      	nop
 8006864:	08006895 	.word	0x08006895
 8006868:	08006911 	.word	0x08006911
 800686c:	08006903 	.word	0x08006903
 8006870:	08006903 	.word	0x08006903
 8006874:	08006903 	.word	0x08006903
 8006878:	08006903 	.word	0x08006903
 800687c:	08006903 	.word	0x08006903
 8006880:	08006903 	.word	0x08006903
 8006884:	08006903 	.word	0x08006903
 8006888:	08006903 	.word	0x08006903
 800688c:	080068bf 	.word	0x080068bf
 8006890:	080068e9 	.word	0x080068e9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b03      	cmp	r3, #3
 800689e:	d107      	bne.n	80068b0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80068a0:	f107 030a 	add.w	r3, r7, #10
 80068a4:	2202      	movs	r2, #2
 80068a6:	4619      	mov	r1, r3
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f001 face 	bl	8007e4a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80068ae:	e032      	b.n	8006916 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80068b0:	6839      	ldr	r1, [r7, #0]
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f001 fa58 	bl	8007d68 <USBD_CtlError>
            ret = USBD_FAIL;
 80068b8:	2303      	movs	r3, #3
 80068ba:	75fb      	strb	r3, [r7, #23]
          break;
 80068bc:	e02b      	b.n	8006916 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2b03      	cmp	r3, #3
 80068c8:	d107      	bne.n	80068da <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80068ca:	f107 030d 	add.w	r3, r7, #13
 80068ce:	2201      	movs	r2, #1
 80068d0:	4619      	mov	r1, r3
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f001 fab9 	bl	8007e4a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80068d8:	e01d      	b.n	8006916 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80068da:	6839      	ldr	r1, [r7, #0]
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f001 fa43 	bl	8007d68 <USBD_CtlError>
            ret = USBD_FAIL;
 80068e2:	2303      	movs	r3, #3
 80068e4:	75fb      	strb	r3, [r7, #23]
          break;
 80068e6:	e016      	b.n	8006916 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	2b03      	cmp	r3, #3
 80068f2:	d00f      	beq.n	8006914 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80068f4:	6839      	ldr	r1, [r7, #0]
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f001 fa36 	bl	8007d68 <USBD_CtlError>
            ret = USBD_FAIL;
 80068fc:	2303      	movs	r3, #3
 80068fe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006900:	e008      	b.n	8006914 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006902:	6839      	ldr	r1, [r7, #0]
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f001 fa2f 	bl	8007d68 <USBD_CtlError>
          ret = USBD_FAIL;
 800690a:	2303      	movs	r3, #3
 800690c:	75fb      	strb	r3, [r7, #23]
          break;
 800690e:	e002      	b.n	8006916 <USBD_CDC_Setup+0x176>
          break;
 8006910:	bf00      	nop
 8006912:	e008      	b.n	8006926 <USBD_CDC_Setup+0x186>
          break;
 8006914:	bf00      	nop
      }
      break;
 8006916:	e006      	b.n	8006926 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006918:	6839      	ldr	r1, [r7, #0]
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f001 fa24 	bl	8007d68 <USBD_CtlError>
      ret = USBD_FAIL;
 8006920:	2303      	movs	r3, #3
 8006922:	75fb      	strb	r3, [r7, #23]
      break;
 8006924:	bf00      	nop
  }

  return (uint8_t)ret;
 8006926:	7dfb      	ldrb	r3, [r7, #23]
}
 8006928:	4618      	mov	r0, r3
 800692a:	3718      	adds	r7, #24
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	460b      	mov	r3, r1
 800693a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006942:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800694a:	2b00      	cmp	r3, #0
 800694c:	d101      	bne.n	8006952 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800694e:	2303      	movs	r3, #3
 8006950:	e04f      	b.n	80069f2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006958:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800695a:	78fa      	ldrb	r2, [r7, #3]
 800695c:	6879      	ldr	r1, [r7, #4]
 800695e:	4613      	mov	r3, r2
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	4413      	add	r3, r2
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	440b      	add	r3, r1
 8006968:	3318      	adds	r3, #24
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d029      	beq.n	80069c4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006970:	78fa      	ldrb	r2, [r7, #3]
 8006972:	6879      	ldr	r1, [r7, #4]
 8006974:	4613      	mov	r3, r2
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	4413      	add	r3, r2
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	440b      	add	r3, r1
 800697e:	3318      	adds	r3, #24
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	78f9      	ldrb	r1, [r7, #3]
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	460b      	mov	r3, r1
 8006988:	00db      	lsls	r3, r3, #3
 800698a:	1a5b      	subs	r3, r3, r1
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4403      	add	r3, r0
 8006990:	3344      	adds	r3, #68	; 0x44
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	fbb2 f1f3 	udiv	r1, r2, r3
 8006998:	fb03 f301 	mul.w	r3, r3, r1
 800699c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d110      	bne.n	80069c4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80069a2:	78fa      	ldrb	r2, [r7, #3]
 80069a4:	6879      	ldr	r1, [r7, #4]
 80069a6:	4613      	mov	r3, r2
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	4413      	add	r3, r2
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	440b      	add	r3, r1
 80069b0:	3318      	adds	r3, #24
 80069b2:	2200      	movs	r2, #0
 80069b4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80069b6:	78f9      	ldrb	r1, [r7, #3]
 80069b8:	2300      	movs	r3, #0
 80069ba:	2200      	movs	r2, #0
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f001 ff3c 	bl	800883a <USBD_LL_Transmit>
 80069c2:	e015      	b.n	80069f0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00b      	beq.n	80069f0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	68ba      	ldr	r2, [r7, #8]
 80069e2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80069e6:	68ba      	ldr	r2, [r7, #8]
 80069e8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80069ec:	78fa      	ldrb	r2, [r7, #3]
 80069ee:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3710      	adds	r7, #16
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b084      	sub	sp, #16
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
 8006a02:	460b      	mov	r3, r1
 8006a04:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a0c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d101      	bne.n	8006a1c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e015      	b.n	8006a48 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006a1c:	78fb      	ldrb	r3, [r7, #3]
 8006a1e:	4619      	mov	r1, r3
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f001 ff4c 	bl	80088be <USBD_LL_GetRxDataSize>
 8006a26:	4602      	mov	r2, r0
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006a42:	4611      	mov	r1, r2
 8006a44:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3710      	adds	r7, #16
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a5e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d101      	bne.n	8006a6a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e01b      	b.n	8006aa2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d015      	beq.n	8006aa0 <USBD_CDC_EP0_RxReady+0x50>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006a7a:	2bff      	cmp	r3, #255	; 0xff
 8006a7c:	d010      	beq.n	8006aa0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006a8c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006a94:	b292      	uxth	r2, r2
 8006a96:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	22ff      	movs	r2, #255	; 0xff
 8006a9c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
	...

08006aac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2243      	movs	r2, #67	; 0x43
 8006ab8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006aba:	4b03      	ldr	r3, [pc, #12]	; (8006ac8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr
 8006ac8:	20000094 	.word	0x20000094

08006acc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2243      	movs	r2, #67	; 0x43
 8006ad8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006ada:	4b03      	ldr	r3, [pc, #12]	; (8006ae8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr
 8006ae8:	20000050 	.word	0x20000050

08006aec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2243      	movs	r2, #67	; 0x43
 8006af8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006afa:	4b03      	ldr	r3, [pc, #12]	; (8006b08 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr
 8006b08:	200000d8 	.word	0x200000d8

08006b0c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	220a      	movs	r2, #10
 8006b18:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006b1a:	4b03      	ldr	r3, [pc, #12]	; (8006b28 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr
 8006b28:	2000000c 	.word	0x2000000c

08006b2c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d101      	bne.n	8006b40 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e004      	b.n	8006b4a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	370c      	adds	r7, #12
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr

08006b56 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006b56:	b480      	push	{r7}
 8006b58:	b087      	sub	sp, #28
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	60f8      	str	r0, [r7, #12]
 8006b5e:	60b9      	str	r1, [r7, #8]
 8006b60:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b68:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d101      	bne.n	8006b74 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006b70:	2303      	movs	r3, #3
 8006b72:	e008      	b.n	8006b86 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	68ba      	ldr	r2, [r7, #8]
 8006b78:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	371c      	adds	r7, #28
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006b92:	b480      	push	{r7}
 8006b94:	b085      	sub	sp, #20
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
 8006b9a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ba2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d101      	bne.n	8006bae <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006baa:	2303      	movs	r3, #3
 8006bac:	e004      	b.n	8006bb8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	683a      	ldr	r2, [r7, #0]
 8006bb2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3714      	adds	r7, #20
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bd2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d101      	bne.n	8006be6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006be2:	2303      	movs	r3, #3
 8006be4:	e01a      	b.n	8006c1c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d114      	bne.n	8006c1a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006c0e:	2181      	movs	r1, #129	; 0x81
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f001 fe12 	bl	800883a <USBD_LL_Transmit>

    ret = USBD_OK;
 8006c16:	2300      	movs	r3, #0
 8006c18:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3710      	adds	r7, #16
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c32:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d101      	bne.n	8006c42 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e016      	b.n	8006c70 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	7c1b      	ldrb	r3, [r3, #16]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d109      	bne.n	8006c5e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c54:	2101      	movs	r1, #1
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f001 fe10 	bl	800887c <USBD_LL_PrepareReceive>
 8006c5c:	e007      	b.n	8006c6e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c64:	2340      	movs	r3, #64	; 0x40
 8006c66:	2101      	movs	r1, #1
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f001 fe07 	bl	800887c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b086      	sub	sp, #24
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	4613      	mov	r3, r2
 8006c84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d101      	bne.n	8006c90 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e01f      	b.n	8006cd0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d003      	beq.n	8006cb6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	79fa      	ldrb	r2, [r7, #7]
 8006cc2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006cc4:	68f8      	ldr	r0, [r7, #12]
 8006cc6:	f001 fc83 	bl	80085d0 <USBD_LL_Init>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3718      	adds	r7, #24
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d101      	bne.n	8006cf0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006cec:	2303      	movs	r3, #3
 8006cee:	e016      	b.n	8006d1e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	683a      	ldr	r2, [r7, #0]
 8006cf4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00b      	beq.n	8006d1c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0c:	f107 020e 	add.w	r2, r7, #14
 8006d10:	4610      	mov	r0, r2
 8006d12:	4798      	blx	r3
 8006d14:	4602      	mov	r2, r0
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3710      	adds	r7, #16
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b082      	sub	sp, #8
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f001 fc9a 	bl	8008668 <USBD_LL_Start>
 8006d34:	4603      	mov	r3, r0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3708      	adds	r7, #8
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}

08006d3e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	b083      	sub	sp, #12
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006d60:	2303      	movs	r3, #3
 8006d62:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d009      	beq.n	8006d82 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	78fa      	ldrb	r2, [r7, #3]
 8006d78:	4611      	mov	r1, r2
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	4798      	blx	r3
 8006d7e:	4603      	mov	r3, r0
 8006d80:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	460b      	mov	r3, r1
 8006d96:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d007      	beq.n	8006db2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	78fa      	ldrb	r2, [r7, #3]
 8006dac:	4611      	mov	r1, r2
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	4798      	blx	r3
  }

  return USBD_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3708      	adds	r7, #8
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006dcc:	6839      	ldr	r1, [r7, #0]
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f000 ff90 	bl	8007cf4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006de2:	461a      	mov	r2, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006df0:	f003 031f 	and.w	r3, r3, #31
 8006df4:	2b02      	cmp	r3, #2
 8006df6:	d01a      	beq.n	8006e2e <USBD_LL_SetupStage+0x72>
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d822      	bhi.n	8006e42 <USBD_LL_SetupStage+0x86>
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d002      	beq.n	8006e06 <USBD_LL_SetupStage+0x4a>
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d00a      	beq.n	8006e1a <USBD_LL_SetupStage+0x5e>
 8006e04:	e01d      	b.n	8006e42 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 fa62 	bl	80072d8 <USBD_StdDevReq>
 8006e14:	4603      	mov	r3, r0
 8006e16:	73fb      	strb	r3, [r7, #15]
      break;
 8006e18:	e020      	b.n	8006e5c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e20:	4619      	mov	r1, r3
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 fac6 	bl	80073b4 <USBD_StdItfReq>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e2c:	e016      	b.n	8006e5c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e34:	4619      	mov	r1, r3
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 fb05 	bl	8007446 <USBD_StdEPReq>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8006e40:	e00c      	b.n	8006e5c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006e48:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	4619      	mov	r1, r3
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f001 fc69 	bl	8008728 <USBD_LL_StallEP>
 8006e56:	4603      	mov	r3, r0
 8006e58:	73fb      	strb	r3, [r7, #15]
      break;
 8006e5a:	bf00      	nop
  }

  return ret;
 8006e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3710      	adds	r7, #16
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b086      	sub	sp, #24
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	60f8      	str	r0, [r7, #12]
 8006e6e:	460b      	mov	r3, r1
 8006e70:	607a      	str	r2, [r7, #4]
 8006e72:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006e74:	7afb      	ldrb	r3, [r7, #11]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d138      	bne.n	8006eec <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006e80:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e88:	2b03      	cmp	r3, #3
 8006e8a:	d14a      	bne.n	8006f22 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	689a      	ldr	r2, [r3, #8]
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d913      	bls.n	8006ec0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	689a      	ldr	r2, [r3, #8]
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	1ad2      	subs	r2, r2, r3
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	68da      	ldr	r2, [r3, #12]
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	bf28      	it	cs
 8006eb2:	4613      	movcs	r3, r2
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	6879      	ldr	r1, [r7, #4]
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	f001 f80f 	bl	8007edc <USBD_CtlContinueRx>
 8006ebe:	e030      	b.n	8006f22 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	2b03      	cmp	r3, #3
 8006eca:	d10b      	bne.n	8006ee4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d005      	beq.n	8006ee4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ede:	691b      	ldr	r3, [r3, #16]
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f001 f80a 	bl	8007efe <USBD_CtlSendStatus>
 8006eea:	e01a      	b.n	8006f22 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	2b03      	cmp	r3, #3
 8006ef6:	d114      	bne.n	8006f22 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006efe:	699b      	ldr	r3, [r3, #24]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00e      	beq.n	8006f22 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	7afa      	ldrb	r2, [r7, #11]
 8006f0e:	4611      	mov	r1, r2
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	4798      	blx	r3
 8006f14:	4603      	mov	r3, r0
 8006f16:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006f18:	7dfb      	ldrb	r3, [r7, #23]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d001      	beq.n	8006f22 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006f1e:	7dfb      	ldrb	r3, [r7, #23]
 8006f20:	e000      	b.n	8006f24 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3718      	adds	r7, #24
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b086      	sub	sp, #24
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	460b      	mov	r3, r1
 8006f36:	607a      	str	r2, [r7, #4]
 8006f38:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006f3a:	7afb      	ldrb	r3, [r7, #11]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d16b      	bne.n	8007018 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	3314      	adds	r3, #20
 8006f44:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	d156      	bne.n	8006ffe <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	689a      	ldr	r2, [r3, #8]
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d914      	bls.n	8006f86 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	689a      	ldr	r2, [r3, #8]
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	1ad2      	subs	r2, r2, r3
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	6879      	ldr	r1, [r7, #4]
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	f000 ff84 	bl	8007e80 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f78:	2300      	movs	r3, #0
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f001 fc7c 	bl	800887c <USBD_LL_PrepareReceive>
 8006f84:	e03b      	b.n	8006ffe <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	68da      	ldr	r2, [r3, #12]
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d11c      	bne.n	8006fcc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	685a      	ldr	r2, [r3, #4]
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d316      	bcc.n	8006fcc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	685a      	ldr	r2, [r3, #4]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d20f      	bcs.n	8006fcc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006fac:	2200      	movs	r2, #0
 8006fae:	2100      	movs	r1, #0
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f000 ff65 	bl	8007e80 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	f001 fc59 	bl	800887c <USBD_LL_PrepareReceive>
 8006fca:	e018      	b.n	8006ffe <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	2b03      	cmp	r3, #3
 8006fd6:	d10b      	bne.n	8006ff0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d005      	beq.n	8006ff0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ff0:	2180      	movs	r1, #128	; 0x80
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f001 fb98 	bl	8008728 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f000 ff93 	bl	8007f24 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007004:	2b01      	cmp	r3, #1
 8007006:	d122      	bne.n	800704e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007008:	68f8      	ldr	r0, [r7, #12]
 800700a:	f7ff fe98 	bl	8006d3e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2200      	movs	r2, #0
 8007012:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007016:	e01a      	b.n	800704e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800701e:	b2db      	uxtb	r3, r3
 8007020:	2b03      	cmp	r3, #3
 8007022:	d114      	bne.n	800704e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800702a:	695b      	ldr	r3, [r3, #20]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00e      	beq.n	800704e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007036:	695b      	ldr	r3, [r3, #20]
 8007038:	7afa      	ldrb	r2, [r7, #11]
 800703a:	4611      	mov	r1, r2
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	4798      	blx	r3
 8007040:	4603      	mov	r3, r0
 8007042:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007044:	7dfb      	ldrb	r3, [r7, #23]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d001      	beq.n	800704e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800704a:	7dfb      	ldrb	r3, [r7, #23]
 800704c:	e000      	b.n	8007050 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3718      	adds	r7, #24
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007084:	2b00      	cmp	r3, #0
 8007086:	d101      	bne.n	800708c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007088:	2303      	movs	r3, #3
 800708a:	e02f      	b.n	80070ec <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00f      	beq.n	80070b6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d009      	beq.n	80070b6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	6852      	ldr	r2, [r2, #4]
 80070ae:	b2d2      	uxtb	r2, r2
 80070b0:	4611      	mov	r1, r2
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80070b6:	2340      	movs	r3, #64	; 0x40
 80070b8:	2200      	movs	r2, #0
 80070ba:	2100      	movs	r1, #0
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f001 faee 	bl	800869e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2201      	movs	r2, #1
 80070c6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2240      	movs	r2, #64	; 0x40
 80070ce:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80070d2:	2340      	movs	r3, #64	; 0x40
 80070d4:	2200      	movs	r2, #0
 80070d6:	2180      	movs	r1, #128	; 0x80
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f001 fae0 	bl	800869e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2201      	movs	r2, #1
 80070e2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2240      	movs	r2, #64	; 0x40
 80070e8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3708      	adds	r7, #8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	460b      	mov	r3, r1
 80070fe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	78fa      	ldrb	r2, [r7, #3]
 8007104:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007122:	b2da      	uxtb	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2204      	movs	r2, #4
 800712e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800714e:	b2db      	uxtb	r3, r3
 8007150:	2b04      	cmp	r3, #4
 8007152:	d106      	bne.n	8007162 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800715a:	b2da      	uxtb	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800717e:	2b00      	cmp	r3, #0
 8007180:	d101      	bne.n	8007186 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007182:	2303      	movs	r3, #3
 8007184:	e012      	b.n	80071ac <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800718c:	b2db      	uxtb	r3, r3
 800718e:	2b03      	cmp	r3, #3
 8007190:	d10b      	bne.n	80071aa <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007198:	69db      	ldr	r3, [r3, #28]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d005      	beq.n	80071aa <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071a4:	69db      	ldr	r3, [r3, #28]
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3708      	adds	r7, #8
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	460b      	mov	r3, r1
 80071be:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d101      	bne.n	80071ce <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e014      	b.n	80071f8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b03      	cmp	r3, #3
 80071d8:	d10d      	bne.n	80071f6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071e0:	6a1b      	ldr	r3, [r3, #32]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d007      	beq.n	80071f6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ec:	6a1b      	ldr	r3, [r3, #32]
 80071ee:	78fa      	ldrb	r2, [r7, #3]
 80071f0:	4611      	mov	r1, r2
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3708      	adds	r7, #8
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	460b      	mov	r3, r1
 800720a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007212:	2b00      	cmp	r3, #0
 8007214:	d101      	bne.n	800721a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007216:	2303      	movs	r3, #3
 8007218:	e014      	b.n	8007244 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2b03      	cmp	r3, #3
 8007224:	d10d      	bne.n	8007242 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800722c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722e:	2b00      	cmp	r3, #0
 8007230:	d007      	beq.n	8007242 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723a:	78fa      	ldrb	r2, [r7, #3]
 800723c:	4611      	mov	r1, r2
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	3708      	adds	r7, #8
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	370c      	adds	r7, #12
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr

08007262 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b082      	sub	sp, #8
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007278:	2b00      	cmp	r3, #0
 800727a:	d009      	beq.n	8007290 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	6852      	ldr	r2, [r2, #4]
 8007288:	b2d2      	uxtb	r2, r2
 800728a:	4611      	mov	r1, r2
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	4798      	blx	r3
  }

  return USBD_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3708      	adds	r7, #8
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800729a:	b480      	push	{r7}
 800729c:	b087      	sub	sp, #28
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	3301      	adds	r3, #1
 80072b0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80072b8:	8a3b      	ldrh	r3, [r7, #16]
 80072ba:	021b      	lsls	r3, r3, #8
 80072bc:	b21a      	sxth	r2, r3
 80072be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	b21b      	sxth	r3, r3
 80072c6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80072c8:	89fb      	ldrh	r3, [r7, #14]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	371c      	adds	r7, #28
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr
	...

080072d8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072e2:	2300      	movs	r3, #0
 80072e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072ee:	2b40      	cmp	r3, #64	; 0x40
 80072f0:	d005      	beq.n	80072fe <USBD_StdDevReq+0x26>
 80072f2:	2b40      	cmp	r3, #64	; 0x40
 80072f4:	d853      	bhi.n	800739e <USBD_StdDevReq+0xc6>
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00b      	beq.n	8007312 <USBD_StdDevReq+0x3a>
 80072fa:	2b20      	cmp	r3, #32
 80072fc:	d14f      	bne.n	800739e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	6839      	ldr	r1, [r7, #0]
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	4798      	blx	r3
 800730c:	4603      	mov	r3, r0
 800730e:	73fb      	strb	r3, [r7, #15]
      break;
 8007310:	e04a      	b.n	80073a8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	785b      	ldrb	r3, [r3, #1]
 8007316:	2b09      	cmp	r3, #9
 8007318:	d83b      	bhi.n	8007392 <USBD_StdDevReq+0xba>
 800731a:	a201      	add	r2, pc, #4	; (adr r2, 8007320 <USBD_StdDevReq+0x48>)
 800731c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007320:	08007375 	.word	0x08007375
 8007324:	08007389 	.word	0x08007389
 8007328:	08007393 	.word	0x08007393
 800732c:	0800737f 	.word	0x0800737f
 8007330:	08007393 	.word	0x08007393
 8007334:	08007353 	.word	0x08007353
 8007338:	08007349 	.word	0x08007349
 800733c:	08007393 	.word	0x08007393
 8007340:	0800736b 	.word	0x0800736b
 8007344:	0800735d 	.word	0x0800735d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007348:	6839      	ldr	r1, [r7, #0]
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 f9de 	bl	800770c <USBD_GetDescriptor>
          break;
 8007350:	e024      	b.n	800739c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007352:	6839      	ldr	r1, [r7, #0]
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 fb43 	bl	80079e0 <USBD_SetAddress>
          break;
 800735a:	e01f      	b.n	800739c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800735c:	6839      	ldr	r1, [r7, #0]
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 fb82 	bl	8007a68 <USBD_SetConfig>
 8007364:	4603      	mov	r3, r0
 8007366:	73fb      	strb	r3, [r7, #15]
          break;
 8007368:	e018      	b.n	800739c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800736a:	6839      	ldr	r1, [r7, #0]
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 fc21 	bl	8007bb4 <USBD_GetConfig>
          break;
 8007372:	e013      	b.n	800739c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007374:	6839      	ldr	r1, [r7, #0]
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 fc52 	bl	8007c20 <USBD_GetStatus>
          break;
 800737c:	e00e      	b.n	800739c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800737e:	6839      	ldr	r1, [r7, #0]
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 fc81 	bl	8007c88 <USBD_SetFeature>
          break;
 8007386:	e009      	b.n	800739c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007388:	6839      	ldr	r1, [r7, #0]
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 fc90 	bl	8007cb0 <USBD_ClrFeature>
          break;
 8007390:	e004      	b.n	800739c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007392:	6839      	ldr	r1, [r7, #0]
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 fce7 	bl	8007d68 <USBD_CtlError>
          break;
 800739a:	bf00      	nop
      }
      break;
 800739c:	e004      	b.n	80073a8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800739e:	6839      	ldr	r1, [r7, #0]
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 fce1 	bl	8007d68 <USBD_CtlError>
      break;
 80073a6:	bf00      	nop
  }

  return ret;
 80073a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3710      	adds	r7, #16
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop

080073b4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073be:	2300      	movs	r3, #0
 80073c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073ca:	2b40      	cmp	r3, #64	; 0x40
 80073cc:	d005      	beq.n	80073da <USBD_StdItfReq+0x26>
 80073ce:	2b40      	cmp	r3, #64	; 0x40
 80073d0:	d82f      	bhi.n	8007432 <USBD_StdItfReq+0x7e>
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d001      	beq.n	80073da <USBD_StdItfReq+0x26>
 80073d6:	2b20      	cmp	r3, #32
 80073d8:	d12b      	bne.n	8007432 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	3b01      	subs	r3, #1
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d81d      	bhi.n	8007424 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	889b      	ldrh	r3, [r3, #4]
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d813      	bhi.n	800741a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	6839      	ldr	r1, [r7, #0]
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	4798      	blx	r3
 8007400:	4603      	mov	r3, r0
 8007402:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	88db      	ldrh	r3, [r3, #6]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d110      	bne.n	800742e <USBD_StdItfReq+0x7a>
 800740c:	7bfb      	ldrb	r3, [r7, #15]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d10d      	bne.n	800742e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 fd73 	bl	8007efe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007418:	e009      	b.n	800742e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800741a:	6839      	ldr	r1, [r7, #0]
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 fca3 	bl	8007d68 <USBD_CtlError>
          break;
 8007422:	e004      	b.n	800742e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007424:	6839      	ldr	r1, [r7, #0]
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 fc9e 	bl	8007d68 <USBD_CtlError>
          break;
 800742c:	e000      	b.n	8007430 <USBD_StdItfReq+0x7c>
          break;
 800742e:	bf00      	nop
      }
      break;
 8007430:	e004      	b.n	800743c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007432:	6839      	ldr	r1, [r7, #0]
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 fc97 	bl	8007d68 <USBD_CtlError>
      break;
 800743a:	bf00      	nop
  }

  return ret;
 800743c:	7bfb      	ldrb	r3, [r7, #15]
}
 800743e:	4618      	mov	r0, r3
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b084      	sub	sp, #16
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
 800744e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007450:	2300      	movs	r3, #0
 8007452:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	889b      	ldrh	r3, [r3, #4]
 8007458:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007462:	2b40      	cmp	r3, #64	; 0x40
 8007464:	d007      	beq.n	8007476 <USBD_StdEPReq+0x30>
 8007466:	2b40      	cmp	r3, #64	; 0x40
 8007468:	f200 8145 	bhi.w	80076f6 <USBD_StdEPReq+0x2b0>
 800746c:	2b00      	cmp	r3, #0
 800746e:	d00c      	beq.n	800748a <USBD_StdEPReq+0x44>
 8007470:	2b20      	cmp	r3, #32
 8007472:	f040 8140 	bne.w	80076f6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	6839      	ldr	r1, [r7, #0]
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	4798      	blx	r3
 8007484:	4603      	mov	r3, r0
 8007486:	73fb      	strb	r3, [r7, #15]
      break;
 8007488:	e13a      	b.n	8007700 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	785b      	ldrb	r3, [r3, #1]
 800748e:	2b03      	cmp	r3, #3
 8007490:	d007      	beq.n	80074a2 <USBD_StdEPReq+0x5c>
 8007492:	2b03      	cmp	r3, #3
 8007494:	f300 8129 	bgt.w	80076ea <USBD_StdEPReq+0x2a4>
 8007498:	2b00      	cmp	r3, #0
 800749a:	d07f      	beq.n	800759c <USBD_StdEPReq+0x156>
 800749c:	2b01      	cmp	r3, #1
 800749e:	d03c      	beq.n	800751a <USBD_StdEPReq+0xd4>
 80074a0:	e123      	b.n	80076ea <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d002      	beq.n	80074b4 <USBD_StdEPReq+0x6e>
 80074ae:	2b03      	cmp	r3, #3
 80074b0:	d016      	beq.n	80074e0 <USBD_StdEPReq+0x9a>
 80074b2:	e02c      	b.n	800750e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074b4:	7bbb      	ldrb	r3, [r7, #14]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00d      	beq.n	80074d6 <USBD_StdEPReq+0x90>
 80074ba:	7bbb      	ldrb	r3, [r7, #14]
 80074bc:	2b80      	cmp	r3, #128	; 0x80
 80074be:	d00a      	beq.n	80074d6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80074c0:	7bbb      	ldrb	r3, [r7, #14]
 80074c2:	4619      	mov	r1, r3
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f001 f92f 	bl	8008728 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80074ca:	2180      	movs	r1, #128	; 0x80
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f001 f92b 	bl	8008728 <USBD_LL_StallEP>
 80074d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80074d4:	e020      	b.n	8007518 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80074d6:	6839      	ldr	r1, [r7, #0]
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 fc45 	bl	8007d68 <USBD_CtlError>
              break;
 80074de:	e01b      	b.n	8007518 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	885b      	ldrh	r3, [r3, #2]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d10e      	bne.n	8007506 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80074e8:	7bbb      	ldrb	r3, [r7, #14]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00b      	beq.n	8007506 <USBD_StdEPReq+0xc0>
 80074ee:	7bbb      	ldrb	r3, [r7, #14]
 80074f0:	2b80      	cmp	r3, #128	; 0x80
 80074f2:	d008      	beq.n	8007506 <USBD_StdEPReq+0xc0>
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	88db      	ldrh	r3, [r3, #6]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d104      	bne.n	8007506 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80074fc:	7bbb      	ldrb	r3, [r7, #14]
 80074fe:	4619      	mov	r1, r3
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f001 f911 	bl	8008728 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 fcf9 	bl	8007efe <USBD_CtlSendStatus>

              break;
 800750c:	e004      	b.n	8007518 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800750e:	6839      	ldr	r1, [r7, #0]
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 fc29 	bl	8007d68 <USBD_CtlError>
              break;
 8007516:	bf00      	nop
          }
          break;
 8007518:	e0ec      	b.n	80076f4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007520:	b2db      	uxtb	r3, r3
 8007522:	2b02      	cmp	r3, #2
 8007524:	d002      	beq.n	800752c <USBD_StdEPReq+0xe6>
 8007526:	2b03      	cmp	r3, #3
 8007528:	d016      	beq.n	8007558 <USBD_StdEPReq+0x112>
 800752a:	e030      	b.n	800758e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800752c:	7bbb      	ldrb	r3, [r7, #14]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00d      	beq.n	800754e <USBD_StdEPReq+0x108>
 8007532:	7bbb      	ldrb	r3, [r7, #14]
 8007534:	2b80      	cmp	r3, #128	; 0x80
 8007536:	d00a      	beq.n	800754e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007538:	7bbb      	ldrb	r3, [r7, #14]
 800753a:	4619      	mov	r1, r3
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f001 f8f3 	bl	8008728 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007542:	2180      	movs	r1, #128	; 0x80
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f001 f8ef 	bl	8008728 <USBD_LL_StallEP>
 800754a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800754c:	e025      	b.n	800759a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800754e:	6839      	ldr	r1, [r7, #0]
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 fc09 	bl	8007d68 <USBD_CtlError>
              break;
 8007556:	e020      	b.n	800759a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	885b      	ldrh	r3, [r3, #2]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d11b      	bne.n	8007598 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007560:	7bbb      	ldrb	r3, [r7, #14]
 8007562:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007566:	2b00      	cmp	r3, #0
 8007568:	d004      	beq.n	8007574 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800756a:	7bbb      	ldrb	r3, [r7, #14]
 800756c:	4619      	mov	r1, r3
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f001 f8f9 	bl	8008766 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fcc2 	bl	8007efe <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	6839      	ldr	r1, [r7, #0]
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	4798      	blx	r3
 8007588:	4603      	mov	r3, r0
 800758a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800758c:	e004      	b.n	8007598 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800758e:	6839      	ldr	r1, [r7, #0]
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 fbe9 	bl	8007d68 <USBD_CtlError>
              break;
 8007596:	e000      	b.n	800759a <USBD_StdEPReq+0x154>
              break;
 8007598:	bf00      	nop
          }
          break;
 800759a:	e0ab      	b.n	80076f4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	d002      	beq.n	80075ae <USBD_StdEPReq+0x168>
 80075a8:	2b03      	cmp	r3, #3
 80075aa:	d032      	beq.n	8007612 <USBD_StdEPReq+0x1cc>
 80075ac:	e097      	b.n	80076de <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075ae:	7bbb      	ldrb	r3, [r7, #14]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d007      	beq.n	80075c4 <USBD_StdEPReq+0x17e>
 80075b4:	7bbb      	ldrb	r3, [r7, #14]
 80075b6:	2b80      	cmp	r3, #128	; 0x80
 80075b8:	d004      	beq.n	80075c4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80075ba:	6839      	ldr	r1, [r7, #0]
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 fbd3 	bl	8007d68 <USBD_CtlError>
                break;
 80075c2:	e091      	b.n	80076e8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	da0b      	bge.n	80075e4 <USBD_StdEPReq+0x19e>
 80075cc:	7bbb      	ldrb	r3, [r7, #14]
 80075ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075d2:	4613      	mov	r3, r2
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	4413      	add	r3, r2
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	3310      	adds	r3, #16
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	4413      	add	r3, r2
 80075e0:	3304      	adds	r3, #4
 80075e2:	e00b      	b.n	80075fc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80075e4:	7bbb      	ldrb	r3, [r7, #14]
 80075e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075ea:	4613      	mov	r3, r2
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	4413      	add	r3, r2
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	4413      	add	r3, r2
 80075fa:	3304      	adds	r3, #4
 80075fc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	2200      	movs	r2, #0
 8007602:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	2202      	movs	r2, #2
 8007608:	4619      	mov	r1, r3
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 fc1d 	bl	8007e4a <USBD_CtlSendData>
              break;
 8007610:	e06a      	b.n	80076e8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007612:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007616:	2b00      	cmp	r3, #0
 8007618:	da11      	bge.n	800763e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800761a:	7bbb      	ldrb	r3, [r7, #14]
 800761c:	f003 020f 	and.w	r2, r3, #15
 8007620:	6879      	ldr	r1, [r7, #4]
 8007622:	4613      	mov	r3, r2
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	4413      	add	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	440b      	add	r3, r1
 800762c:	3324      	adds	r3, #36	; 0x24
 800762e:	881b      	ldrh	r3, [r3, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d117      	bne.n	8007664 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007634:	6839      	ldr	r1, [r7, #0]
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 fb96 	bl	8007d68 <USBD_CtlError>
                  break;
 800763c:	e054      	b.n	80076e8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800763e:	7bbb      	ldrb	r3, [r7, #14]
 8007640:	f003 020f 	and.w	r2, r3, #15
 8007644:	6879      	ldr	r1, [r7, #4]
 8007646:	4613      	mov	r3, r2
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	4413      	add	r3, r2
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	440b      	add	r3, r1
 8007650:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007654:	881b      	ldrh	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d104      	bne.n	8007664 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800765a:	6839      	ldr	r1, [r7, #0]
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 fb83 	bl	8007d68 <USBD_CtlError>
                  break;
 8007662:	e041      	b.n	80076e8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007664:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007668:	2b00      	cmp	r3, #0
 800766a:	da0b      	bge.n	8007684 <USBD_StdEPReq+0x23e>
 800766c:	7bbb      	ldrb	r3, [r7, #14]
 800766e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007672:	4613      	mov	r3, r2
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	4413      	add	r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	3310      	adds	r3, #16
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	4413      	add	r3, r2
 8007680:	3304      	adds	r3, #4
 8007682:	e00b      	b.n	800769c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007684:	7bbb      	ldrb	r3, [r7, #14]
 8007686:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800768a:	4613      	mov	r3, r2
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	4413      	add	r3, r2
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	4413      	add	r3, r2
 800769a:	3304      	adds	r3, #4
 800769c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800769e:	7bbb      	ldrb	r3, [r7, #14]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d002      	beq.n	80076aa <USBD_StdEPReq+0x264>
 80076a4:	7bbb      	ldrb	r3, [r7, #14]
 80076a6:	2b80      	cmp	r3, #128	; 0x80
 80076a8:	d103      	bne.n	80076b2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	2200      	movs	r2, #0
 80076ae:	601a      	str	r2, [r3, #0]
 80076b0:	e00e      	b.n	80076d0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80076b2:	7bbb      	ldrb	r3, [r7, #14]
 80076b4:	4619      	mov	r1, r3
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f001 f874 	bl	80087a4 <USBD_LL_IsStallEP>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d003      	beq.n	80076ca <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	2201      	movs	r2, #1
 80076c6:	601a      	str	r2, [r3, #0]
 80076c8:	e002      	b.n	80076d0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	2200      	movs	r2, #0
 80076ce:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	2202      	movs	r2, #2
 80076d4:	4619      	mov	r1, r3
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fbb7 	bl	8007e4a <USBD_CtlSendData>
              break;
 80076dc:	e004      	b.n	80076e8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80076de:	6839      	ldr	r1, [r7, #0]
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 fb41 	bl	8007d68 <USBD_CtlError>
              break;
 80076e6:	bf00      	nop
          }
          break;
 80076e8:	e004      	b.n	80076f4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80076ea:	6839      	ldr	r1, [r7, #0]
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 fb3b 	bl	8007d68 <USBD_CtlError>
          break;
 80076f2:	bf00      	nop
      }
      break;
 80076f4:	e004      	b.n	8007700 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80076f6:	6839      	ldr	r1, [r7, #0]
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 fb35 	bl	8007d68 <USBD_CtlError>
      break;
 80076fe:	bf00      	nop
  }

  return ret;
 8007700:	7bfb      	ldrb	r3, [r7, #15]
}
 8007702:	4618      	mov	r0, r3
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
	...

0800770c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007716:	2300      	movs	r3, #0
 8007718:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800771a:	2300      	movs	r3, #0
 800771c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800771e:	2300      	movs	r3, #0
 8007720:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	885b      	ldrh	r3, [r3, #2]
 8007726:	0a1b      	lsrs	r3, r3, #8
 8007728:	b29b      	uxth	r3, r3
 800772a:	3b01      	subs	r3, #1
 800772c:	2b06      	cmp	r3, #6
 800772e:	f200 8128 	bhi.w	8007982 <USBD_GetDescriptor+0x276>
 8007732:	a201      	add	r2, pc, #4	; (adr r2, 8007738 <USBD_GetDescriptor+0x2c>)
 8007734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007738:	08007755 	.word	0x08007755
 800773c:	0800776d 	.word	0x0800776d
 8007740:	080077ad 	.word	0x080077ad
 8007744:	08007983 	.word	0x08007983
 8007748:	08007983 	.word	0x08007983
 800774c:	08007923 	.word	0x08007923
 8007750:	0800794f 	.word	0x0800794f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	7c12      	ldrb	r2, [r2, #16]
 8007760:	f107 0108 	add.w	r1, r7, #8
 8007764:	4610      	mov	r0, r2
 8007766:	4798      	blx	r3
 8007768:	60f8      	str	r0, [r7, #12]
      break;
 800776a:	e112      	b.n	8007992 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	7c1b      	ldrb	r3, [r3, #16]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d10d      	bne.n	8007790 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800777a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800777c:	f107 0208 	add.w	r2, r7, #8
 8007780:	4610      	mov	r0, r2
 8007782:	4798      	blx	r3
 8007784:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	3301      	adds	r3, #1
 800778a:	2202      	movs	r2, #2
 800778c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800778e:	e100      	b.n	8007992 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007798:	f107 0208 	add.w	r2, r7, #8
 800779c:	4610      	mov	r0, r2
 800779e:	4798      	blx	r3
 80077a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	3301      	adds	r3, #1
 80077a6:	2202      	movs	r2, #2
 80077a8:	701a      	strb	r2, [r3, #0]
      break;
 80077aa:	e0f2      	b.n	8007992 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	885b      	ldrh	r3, [r3, #2]
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	2b05      	cmp	r3, #5
 80077b4:	f200 80ac 	bhi.w	8007910 <USBD_GetDescriptor+0x204>
 80077b8:	a201      	add	r2, pc, #4	; (adr r2, 80077c0 <USBD_GetDescriptor+0xb4>)
 80077ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077be:	bf00      	nop
 80077c0:	080077d9 	.word	0x080077d9
 80077c4:	0800780d 	.word	0x0800780d
 80077c8:	08007841 	.word	0x08007841
 80077cc:	08007875 	.word	0x08007875
 80077d0:	080078a9 	.word	0x080078a9
 80077d4:	080078dd 	.word	0x080078dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00b      	beq.n	80077fc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	7c12      	ldrb	r2, [r2, #16]
 80077f0:	f107 0108 	add.w	r1, r7, #8
 80077f4:	4610      	mov	r0, r2
 80077f6:	4798      	blx	r3
 80077f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077fa:	e091      	b.n	8007920 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077fc:	6839      	ldr	r1, [r7, #0]
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fab2 	bl	8007d68 <USBD_CtlError>
            err++;
 8007804:	7afb      	ldrb	r3, [r7, #11]
 8007806:	3301      	adds	r3, #1
 8007808:	72fb      	strb	r3, [r7, #11]
          break;
 800780a:	e089      	b.n	8007920 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00b      	beq.n	8007830 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	7c12      	ldrb	r2, [r2, #16]
 8007824:	f107 0108 	add.w	r1, r7, #8
 8007828:	4610      	mov	r0, r2
 800782a:	4798      	blx	r3
 800782c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800782e:	e077      	b.n	8007920 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007830:	6839      	ldr	r1, [r7, #0]
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 fa98 	bl	8007d68 <USBD_CtlError>
            err++;
 8007838:	7afb      	ldrb	r3, [r7, #11]
 800783a:	3301      	adds	r3, #1
 800783c:	72fb      	strb	r3, [r7, #11]
          break;
 800783e:	e06f      	b.n	8007920 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00b      	beq.n	8007864 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	7c12      	ldrb	r2, [r2, #16]
 8007858:	f107 0108 	add.w	r1, r7, #8
 800785c:	4610      	mov	r0, r2
 800785e:	4798      	blx	r3
 8007860:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007862:	e05d      	b.n	8007920 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007864:	6839      	ldr	r1, [r7, #0]
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fa7e 	bl	8007d68 <USBD_CtlError>
            err++;
 800786c:	7afb      	ldrb	r3, [r7, #11]
 800786e:	3301      	adds	r3, #1
 8007870:	72fb      	strb	r3, [r7, #11]
          break;
 8007872:	e055      	b.n	8007920 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00b      	beq.n	8007898 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	7c12      	ldrb	r2, [r2, #16]
 800788c:	f107 0108 	add.w	r1, r7, #8
 8007890:	4610      	mov	r0, r2
 8007892:	4798      	blx	r3
 8007894:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007896:	e043      	b.n	8007920 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007898:	6839      	ldr	r1, [r7, #0]
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fa64 	bl	8007d68 <USBD_CtlError>
            err++;
 80078a0:	7afb      	ldrb	r3, [r7, #11]
 80078a2:	3301      	adds	r3, #1
 80078a4:	72fb      	strb	r3, [r7, #11]
          break;
 80078a6:	e03b      	b.n	8007920 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ae:	695b      	ldr	r3, [r3, #20]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d00b      	beq.n	80078cc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ba:	695b      	ldr	r3, [r3, #20]
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	7c12      	ldrb	r2, [r2, #16]
 80078c0:	f107 0108 	add.w	r1, r7, #8
 80078c4:	4610      	mov	r0, r2
 80078c6:	4798      	blx	r3
 80078c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078ca:	e029      	b.n	8007920 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078cc:	6839      	ldr	r1, [r7, #0]
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 fa4a 	bl	8007d68 <USBD_CtlError>
            err++;
 80078d4:	7afb      	ldrb	r3, [r7, #11]
 80078d6:	3301      	adds	r3, #1
 80078d8:	72fb      	strb	r3, [r7, #11]
          break;
 80078da:	e021      	b.n	8007920 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078e2:	699b      	ldr	r3, [r3, #24]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00b      	beq.n	8007900 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	7c12      	ldrb	r2, [r2, #16]
 80078f4:	f107 0108 	add.w	r1, r7, #8
 80078f8:	4610      	mov	r0, r2
 80078fa:	4798      	blx	r3
 80078fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078fe:	e00f      	b.n	8007920 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007900:	6839      	ldr	r1, [r7, #0]
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 fa30 	bl	8007d68 <USBD_CtlError>
            err++;
 8007908:	7afb      	ldrb	r3, [r7, #11]
 800790a:	3301      	adds	r3, #1
 800790c:	72fb      	strb	r3, [r7, #11]
          break;
 800790e:	e007      	b.n	8007920 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007910:	6839      	ldr	r1, [r7, #0]
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 fa28 	bl	8007d68 <USBD_CtlError>
          err++;
 8007918:	7afb      	ldrb	r3, [r7, #11]
 800791a:	3301      	adds	r3, #1
 800791c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800791e:	bf00      	nop
      }
      break;
 8007920:	e037      	b.n	8007992 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	7c1b      	ldrb	r3, [r3, #16]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d109      	bne.n	800793e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007932:	f107 0208 	add.w	r2, r7, #8
 8007936:	4610      	mov	r0, r2
 8007938:	4798      	blx	r3
 800793a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800793c:	e029      	b.n	8007992 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800793e:	6839      	ldr	r1, [r7, #0]
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 fa11 	bl	8007d68 <USBD_CtlError>
        err++;
 8007946:	7afb      	ldrb	r3, [r7, #11]
 8007948:	3301      	adds	r3, #1
 800794a:	72fb      	strb	r3, [r7, #11]
      break;
 800794c:	e021      	b.n	8007992 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	7c1b      	ldrb	r3, [r3, #16]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10d      	bne.n	8007972 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800795c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800795e:	f107 0208 	add.w	r2, r7, #8
 8007962:	4610      	mov	r0, r2
 8007964:	4798      	blx	r3
 8007966:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	3301      	adds	r3, #1
 800796c:	2207      	movs	r2, #7
 800796e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007970:	e00f      	b.n	8007992 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007972:	6839      	ldr	r1, [r7, #0]
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 f9f7 	bl	8007d68 <USBD_CtlError>
        err++;
 800797a:	7afb      	ldrb	r3, [r7, #11]
 800797c:	3301      	adds	r3, #1
 800797e:	72fb      	strb	r3, [r7, #11]
      break;
 8007980:	e007      	b.n	8007992 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007982:	6839      	ldr	r1, [r7, #0]
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 f9ef 	bl	8007d68 <USBD_CtlError>
      err++;
 800798a:	7afb      	ldrb	r3, [r7, #11]
 800798c:	3301      	adds	r3, #1
 800798e:	72fb      	strb	r3, [r7, #11]
      break;
 8007990:	bf00      	nop
  }

  if (err != 0U)
 8007992:	7afb      	ldrb	r3, [r7, #11]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d11e      	bne.n	80079d6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	88db      	ldrh	r3, [r3, #6]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d016      	beq.n	80079ce <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80079a0:	893b      	ldrh	r3, [r7, #8]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00e      	beq.n	80079c4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	88da      	ldrh	r2, [r3, #6]
 80079aa:	893b      	ldrh	r3, [r7, #8]
 80079ac:	4293      	cmp	r3, r2
 80079ae:	bf28      	it	cs
 80079b0:	4613      	movcs	r3, r2
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80079b6:	893b      	ldrh	r3, [r7, #8]
 80079b8:	461a      	mov	r2, r3
 80079ba:	68f9      	ldr	r1, [r7, #12]
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 fa44 	bl	8007e4a <USBD_CtlSendData>
 80079c2:	e009      	b.n	80079d8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80079c4:	6839      	ldr	r1, [r7, #0]
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 f9ce 	bl	8007d68 <USBD_CtlError>
 80079cc:	e004      	b.n	80079d8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 fa95 	bl	8007efe <USBD_CtlSendStatus>
 80079d4:	e000      	b.n	80079d8 <USBD_GetDescriptor+0x2cc>
    return;
 80079d6:	bf00      	nop
  }
}
 80079d8:	3710      	adds	r7, #16
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop

080079e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	889b      	ldrh	r3, [r3, #4]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d131      	bne.n	8007a56 <USBD_SetAddress+0x76>
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	88db      	ldrh	r3, [r3, #6]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d12d      	bne.n	8007a56 <USBD_SetAddress+0x76>
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	885b      	ldrh	r3, [r3, #2]
 80079fe:	2b7f      	cmp	r3, #127	; 0x7f
 8007a00:	d829      	bhi.n	8007a56 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	885b      	ldrh	r3, [r3, #2]
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a0c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	2b03      	cmp	r3, #3
 8007a18:	d104      	bne.n	8007a24 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007a1a:	6839      	ldr	r1, [r7, #0]
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 f9a3 	bl	8007d68 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a22:	e01d      	b.n	8007a60 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	7bfa      	ldrb	r2, [r7, #15]
 8007a28:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007a2c:	7bfb      	ldrb	r3, [r7, #15]
 8007a2e:	4619      	mov	r1, r3
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 fee3 	bl	80087fc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 fa61 	bl	8007efe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007a3c:	7bfb      	ldrb	r3, [r7, #15]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d004      	beq.n	8007a4c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2202      	movs	r2, #2
 8007a46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a4a:	e009      	b.n	8007a60 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a54:	e004      	b.n	8007a60 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007a56:	6839      	ldr	r1, [r7, #0]
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 f985 	bl	8007d68 <USBD_CtlError>
  }
}
 8007a5e:	bf00      	nop
 8007a60:	bf00      	nop
 8007a62:	3710      	adds	r7, #16
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a72:	2300      	movs	r3, #0
 8007a74:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	885b      	ldrh	r3, [r3, #2]
 8007a7a:	b2da      	uxtb	r2, r3
 8007a7c:	4b4c      	ldr	r3, [pc, #304]	; (8007bb0 <USBD_SetConfig+0x148>)
 8007a7e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007a80:	4b4b      	ldr	r3, [pc, #300]	; (8007bb0 <USBD_SetConfig+0x148>)
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d905      	bls.n	8007a94 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007a88:	6839      	ldr	r1, [r7, #0]
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 f96c 	bl	8007d68 <USBD_CtlError>
    return USBD_FAIL;
 8007a90:	2303      	movs	r3, #3
 8007a92:	e088      	b.n	8007ba6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d002      	beq.n	8007aa6 <USBD_SetConfig+0x3e>
 8007aa0:	2b03      	cmp	r3, #3
 8007aa2:	d025      	beq.n	8007af0 <USBD_SetConfig+0x88>
 8007aa4:	e071      	b.n	8007b8a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007aa6:	4b42      	ldr	r3, [pc, #264]	; (8007bb0 <USBD_SetConfig+0x148>)
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d01c      	beq.n	8007ae8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007aae:	4b40      	ldr	r3, [pc, #256]	; (8007bb0 <USBD_SetConfig+0x148>)
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ab8:	4b3d      	ldr	r3, [pc, #244]	; (8007bb0 <USBD_SetConfig+0x148>)
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	4619      	mov	r1, r3
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f7ff f948 	bl	8006d54 <USBD_SetClassConfig>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007ac8:	7bfb      	ldrb	r3, [r7, #15]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d004      	beq.n	8007ad8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007ace:	6839      	ldr	r1, [r7, #0]
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 f949 	bl	8007d68 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007ad6:	e065      	b.n	8007ba4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 fa10 	bl	8007efe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2203      	movs	r2, #3
 8007ae2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007ae6:	e05d      	b.n	8007ba4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 fa08 	bl	8007efe <USBD_CtlSendStatus>
      break;
 8007aee:	e059      	b.n	8007ba4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007af0:	4b2f      	ldr	r3, [pc, #188]	; (8007bb0 <USBD_SetConfig+0x148>)
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d112      	bne.n	8007b1e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2202      	movs	r2, #2
 8007afc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007b00:	4b2b      	ldr	r3, [pc, #172]	; (8007bb0 <USBD_SetConfig+0x148>)
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	461a      	mov	r2, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007b0a:	4b29      	ldr	r3, [pc, #164]	; (8007bb0 <USBD_SetConfig+0x148>)
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	4619      	mov	r1, r3
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f7ff f93b 	bl	8006d8c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 f9f1 	bl	8007efe <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007b1c:	e042      	b.n	8007ba4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007b1e:	4b24      	ldr	r3, [pc, #144]	; (8007bb0 <USBD_SetConfig+0x148>)
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	461a      	mov	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d02a      	beq.n	8007b82 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	4619      	mov	r1, r3
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f7ff f929 	bl	8006d8c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007b3a:	4b1d      	ldr	r3, [pc, #116]	; (8007bb0 <USBD_SetConfig+0x148>)
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	461a      	mov	r2, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007b44:	4b1a      	ldr	r3, [pc, #104]	; (8007bb0 <USBD_SetConfig+0x148>)
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	4619      	mov	r1, r3
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f7ff f902 	bl	8006d54 <USBD_SetClassConfig>
 8007b50:	4603      	mov	r3, r0
 8007b52:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007b54:	7bfb      	ldrb	r3, [r7, #15]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00f      	beq.n	8007b7a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007b5a:	6839      	ldr	r1, [r7, #0]
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 f903 	bl	8007d68 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	4619      	mov	r1, r3
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f7ff f90e 	bl	8006d8c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2202      	movs	r2, #2
 8007b74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007b78:	e014      	b.n	8007ba4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 f9bf 	bl	8007efe <USBD_CtlSendStatus>
      break;
 8007b80:	e010      	b.n	8007ba4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f9bb 	bl	8007efe <USBD_CtlSendStatus>
      break;
 8007b88:	e00c      	b.n	8007ba4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007b8a:	6839      	ldr	r1, [r7, #0]
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 f8eb 	bl	8007d68 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007b92:	4b07      	ldr	r3, [pc, #28]	; (8007bb0 <USBD_SetConfig+0x148>)
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	4619      	mov	r1, r3
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f7ff f8f7 	bl	8006d8c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ba2:	bf00      	nop
  }

  return ret;
 8007ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	200003bc 	.word	0x200003bc

08007bb4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	88db      	ldrh	r3, [r3, #6]
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d004      	beq.n	8007bd0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007bc6:	6839      	ldr	r1, [r7, #0]
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 f8cd 	bl	8007d68 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007bce:	e023      	b.n	8007c18 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	dc02      	bgt.n	8007be2 <USBD_GetConfig+0x2e>
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	dc03      	bgt.n	8007be8 <USBD_GetConfig+0x34>
 8007be0:	e015      	b.n	8007c0e <USBD_GetConfig+0x5a>
 8007be2:	2b03      	cmp	r3, #3
 8007be4:	d00b      	beq.n	8007bfe <USBD_GetConfig+0x4a>
 8007be6:	e012      	b.n	8007c0e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	3308      	adds	r3, #8
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 f927 	bl	8007e4a <USBD_CtlSendData>
        break;
 8007bfc:	e00c      	b.n	8007c18 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	3304      	adds	r3, #4
 8007c02:	2201      	movs	r2, #1
 8007c04:	4619      	mov	r1, r3
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 f91f 	bl	8007e4a <USBD_CtlSendData>
        break;
 8007c0c:	e004      	b.n	8007c18 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007c0e:	6839      	ldr	r1, [r7, #0]
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 f8a9 	bl	8007d68 <USBD_CtlError>
        break;
 8007c16:	bf00      	nop
}
 8007c18:	bf00      	nop
 8007c1a:	3708      	adds	r7, #8
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	3b01      	subs	r3, #1
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	d81e      	bhi.n	8007c76 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	88db      	ldrh	r3, [r3, #6]
 8007c3c:	2b02      	cmp	r3, #2
 8007c3e:	d004      	beq.n	8007c4a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007c40:	6839      	ldr	r1, [r7, #0]
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 f890 	bl	8007d68 <USBD_CtlError>
        break;
 8007c48:	e01a      	b.n	8007c80 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d005      	beq.n	8007c66 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	f043 0202 	orr.w	r2, r3, #2
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	330c      	adds	r3, #12
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 f8eb 	bl	8007e4a <USBD_CtlSendData>
      break;
 8007c74:	e004      	b.n	8007c80 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007c76:	6839      	ldr	r1, [r7, #0]
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f875 	bl	8007d68 <USBD_CtlError>
      break;
 8007c7e:	bf00      	nop
  }
}
 8007c80:	bf00      	nop
 8007c82:	3708      	adds	r7, #8
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	885b      	ldrh	r3, [r3, #2]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d106      	bne.n	8007ca8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f92b 	bl	8007efe <USBD_CtlSendStatus>
  }
}
 8007ca8:	bf00      	nop
 8007caa:	3708      	adds	r7, #8
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	3b01      	subs	r3, #1
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d80b      	bhi.n	8007ce0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	885b      	ldrh	r3, [r3, #2]
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d10c      	bne.n	8007cea <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 f910 	bl	8007efe <USBD_CtlSendStatus>
      }
      break;
 8007cde:	e004      	b.n	8007cea <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007ce0:	6839      	ldr	r1, [r7, #0]
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 f840 	bl	8007d68 <USBD_CtlError>
      break;
 8007ce8:	e000      	b.n	8007cec <USBD_ClrFeature+0x3c>
      break;
 8007cea:	bf00      	nop
  }
}
 8007cec:	bf00      	nop
 8007cee:	3708      	adds	r7, #8
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	781a      	ldrb	r2, [r3, #0]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	781a      	ldrb	r2, [r3, #0]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007d1e:	68f8      	ldr	r0, [r7, #12]
 8007d20:	f7ff fabb 	bl	800729a <SWAPBYTE>
 8007d24:	4603      	mov	r3, r0
 8007d26:	461a      	mov	r2, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	3301      	adds	r3, #1
 8007d30:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	3301      	adds	r3, #1
 8007d36:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007d38:	68f8      	ldr	r0, [r7, #12]
 8007d3a:	f7ff faae 	bl	800729a <SWAPBYTE>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	461a      	mov	r2, r3
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f7ff faa1 	bl	800729a <SWAPBYTE>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	80da      	strh	r2, [r3, #6]
}
 8007d60:	bf00      	nop
 8007d62:	3710      	adds	r7, #16
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d72:	2180      	movs	r1, #128	; 0x80
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 fcd7 	bl	8008728 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007d7a:	2100      	movs	r1, #0
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 fcd3 	bl	8008728 <USBD_LL_StallEP>
}
 8007d82:	bf00      	nop
 8007d84:	3708      	adds	r7, #8
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b086      	sub	sp, #24
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	60f8      	str	r0, [r7, #12]
 8007d92:	60b9      	str	r1, [r7, #8]
 8007d94:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007d96:	2300      	movs	r3, #0
 8007d98:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d036      	beq.n	8007e0e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007da4:	6938      	ldr	r0, [r7, #16]
 8007da6:	f000 f836 	bl	8007e16 <USBD_GetLen>
 8007daa:	4603      	mov	r3, r0
 8007dac:	3301      	adds	r3, #1
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	005b      	lsls	r3, r3, #1
 8007db2:	b29a      	uxth	r2, r3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007db8:	7dfb      	ldrb	r3, [r7, #23]
 8007dba:	68ba      	ldr	r2, [r7, #8]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	7812      	ldrb	r2, [r2, #0]
 8007dc2:	701a      	strb	r2, [r3, #0]
  idx++;
 8007dc4:	7dfb      	ldrb	r3, [r7, #23]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007dca:	7dfb      	ldrb	r3, [r7, #23]
 8007dcc:	68ba      	ldr	r2, [r7, #8]
 8007dce:	4413      	add	r3, r2
 8007dd0:	2203      	movs	r2, #3
 8007dd2:	701a      	strb	r2, [r3, #0]
  idx++;
 8007dd4:	7dfb      	ldrb	r3, [r7, #23]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007dda:	e013      	b.n	8007e04 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007ddc:	7dfb      	ldrb	r3, [r7, #23]
 8007dde:	68ba      	ldr	r2, [r7, #8]
 8007de0:	4413      	add	r3, r2
 8007de2:	693a      	ldr	r2, [r7, #16]
 8007de4:	7812      	ldrb	r2, [r2, #0]
 8007de6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	3301      	adds	r3, #1
 8007dec:	613b      	str	r3, [r7, #16]
    idx++;
 8007dee:	7dfb      	ldrb	r3, [r7, #23]
 8007df0:	3301      	adds	r3, #1
 8007df2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007df4:	7dfb      	ldrb	r3, [r7, #23]
 8007df6:	68ba      	ldr	r2, [r7, #8]
 8007df8:	4413      	add	r3, r2
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	701a      	strb	r2, [r3, #0]
    idx++;
 8007dfe:	7dfb      	ldrb	r3, [r7, #23]
 8007e00:	3301      	adds	r3, #1
 8007e02:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d1e7      	bne.n	8007ddc <USBD_GetString+0x52>
 8007e0c:	e000      	b.n	8007e10 <USBD_GetString+0x86>
    return;
 8007e0e:	bf00      	nop
  }
}
 8007e10:	3718      	adds	r7, #24
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007e16:	b480      	push	{r7}
 8007e18:	b085      	sub	sp, #20
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007e26:	e005      	b.n	8007e34 <USBD_GetLen+0x1e>
  {
    len++;
 8007e28:	7bfb      	ldrb	r3, [r7, #15]
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	3301      	adds	r3, #1
 8007e32:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d1f5      	bne.n	8007e28 <USBD_GetLen+0x12>
  }

  return len;
 8007e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3714      	adds	r7, #20
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b084      	sub	sp, #16
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	60f8      	str	r0, [r7, #12]
 8007e52:	60b9      	str	r1, [r7, #8]
 8007e54:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2202      	movs	r2, #2
 8007e5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	68ba      	ldr	r2, [r7, #8]
 8007e6e:	2100      	movs	r1, #0
 8007e70:	68f8      	ldr	r0, [r7, #12]
 8007e72:	f000 fce2 	bl	800883a <USBD_LL_Transmit>

  return USBD_OK;
 8007e76:	2300      	movs	r3, #0
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3710      	adds	r7, #16
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	60b9      	str	r1, [r7, #8]
 8007e8a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	68ba      	ldr	r2, [r7, #8]
 8007e90:	2100      	movs	r1, #0
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f000 fcd1 	bl	800883a <USBD_LL_Transmit>

  return USBD_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b084      	sub	sp, #16
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	60f8      	str	r0, [r7, #12]
 8007eaa:	60b9      	str	r1, [r7, #8]
 8007eac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2203      	movs	r2, #3
 8007eb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	68ba      	ldr	r2, [r7, #8]
 8007eca:	2100      	movs	r1, #0
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f000 fcd5 	bl	800887c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ed2:	2300      	movs	r3, #0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3710      	adds	r7, #16
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	68ba      	ldr	r2, [r7, #8]
 8007eec:	2100      	movs	r1, #0
 8007eee:	68f8      	ldr	r0, [r7, #12]
 8007ef0:	f000 fcc4 	bl	800887c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3710      	adds	r7, #16
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}

08007efe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007efe:	b580      	push	{r7, lr}
 8007f00:	b082      	sub	sp, #8
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2204      	movs	r2, #4
 8007f0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007f0e:	2300      	movs	r3, #0
 8007f10:	2200      	movs	r2, #0
 8007f12:	2100      	movs	r1, #0
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 fc90 	bl	800883a <USBD_LL_Transmit>

  return USBD_OK;
 8007f1a:	2300      	movs	r3, #0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3708      	adds	r7, #8
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2205      	movs	r2, #5
 8007f30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f34:	2300      	movs	r3, #0
 8007f36:	2200      	movs	r2, #0
 8007f38:	2100      	movs	r1, #0
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 fc9e 	bl	800887c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
	...

08007f4c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007f50:	2200      	movs	r2, #0
 8007f52:	4912      	ldr	r1, [pc, #72]	; (8007f9c <MX_USB_DEVICE_Init+0x50>)
 8007f54:	4812      	ldr	r0, [pc, #72]	; (8007fa0 <MX_USB_DEVICE_Init+0x54>)
 8007f56:	f7fe fe8f 	bl	8006c78 <USBD_Init>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d001      	beq.n	8007f64 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007f60:	f7f9 fd9c 	bl	8001a9c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007f64:	490f      	ldr	r1, [pc, #60]	; (8007fa4 <MX_USB_DEVICE_Init+0x58>)
 8007f66:	480e      	ldr	r0, [pc, #56]	; (8007fa0 <MX_USB_DEVICE_Init+0x54>)
 8007f68:	f7fe feb6 	bl	8006cd8 <USBD_RegisterClass>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d001      	beq.n	8007f76 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007f72:	f7f9 fd93 	bl	8001a9c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007f76:	490c      	ldr	r1, [pc, #48]	; (8007fa8 <MX_USB_DEVICE_Init+0x5c>)
 8007f78:	4809      	ldr	r0, [pc, #36]	; (8007fa0 <MX_USB_DEVICE_Init+0x54>)
 8007f7a:	f7fe fdd7 	bl	8006b2c <USBD_CDC_RegisterInterface>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d001      	beq.n	8007f88 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007f84:	f7f9 fd8a 	bl	8001a9c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007f88:	4805      	ldr	r0, [pc, #20]	; (8007fa0 <MX_USB_DEVICE_Init+0x54>)
 8007f8a:	f7fe fecc 	bl	8006d26 <USBD_Start>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d001      	beq.n	8007f98 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007f94:	f7f9 fd82 	bl	8001a9c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007f98:	bf00      	nop
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	20000130 	.word	0x20000130
 8007fa0:	2000065c 	.word	0x2000065c
 8007fa4:	20000018 	.word	0x20000018
 8007fa8:	2000011c 	.word	0x2000011c

08007fac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	4905      	ldr	r1, [pc, #20]	; (8007fc8 <CDC_Init_FS+0x1c>)
 8007fb4:	4805      	ldr	r0, [pc, #20]	; (8007fcc <CDC_Init_FS+0x20>)
 8007fb6:	f7fe fdce 	bl	8006b56 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007fba:	4905      	ldr	r1, [pc, #20]	; (8007fd0 <CDC_Init_FS+0x24>)
 8007fbc:	4803      	ldr	r0, [pc, #12]	; (8007fcc <CDC_Init_FS+0x20>)
 8007fbe:	f7fe fde8 	bl	8006b92 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007fc2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	2000112c 	.word	0x2000112c
 8007fcc:	2000065c 	.word	0x2000065c
 8007fd0:	2000092c 	.word	0x2000092c

08007fd4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007fd8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	4603      	mov	r3, r0
 8007fec:	6039      	str	r1, [r7, #0]
 8007fee:	71fb      	strb	r3, [r7, #7]
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007ff4:	79fb      	ldrb	r3, [r7, #7]
 8007ff6:	2b23      	cmp	r3, #35	; 0x23
 8007ff8:	d84a      	bhi.n	8008090 <CDC_Control_FS+0xac>
 8007ffa:	a201      	add	r2, pc, #4	; (adr r2, 8008000 <CDC_Control_FS+0x1c>)
 8007ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008000:	08008091 	.word	0x08008091
 8008004:	08008091 	.word	0x08008091
 8008008:	08008091 	.word	0x08008091
 800800c:	08008091 	.word	0x08008091
 8008010:	08008091 	.word	0x08008091
 8008014:	08008091 	.word	0x08008091
 8008018:	08008091 	.word	0x08008091
 800801c:	08008091 	.word	0x08008091
 8008020:	08008091 	.word	0x08008091
 8008024:	08008091 	.word	0x08008091
 8008028:	08008091 	.word	0x08008091
 800802c:	08008091 	.word	0x08008091
 8008030:	08008091 	.word	0x08008091
 8008034:	08008091 	.word	0x08008091
 8008038:	08008091 	.word	0x08008091
 800803c:	08008091 	.word	0x08008091
 8008040:	08008091 	.word	0x08008091
 8008044:	08008091 	.word	0x08008091
 8008048:	08008091 	.word	0x08008091
 800804c:	08008091 	.word	0x08008091
 8008050:	08008091 	.word	0x08008091
 8008054:	08008091 	.word	0x08008091
 8008058:	08008091 	.word	0x08008091
 800805c:	08008091 	.word	0x08008091
 8008060:	08008091 	.word	0x08008091
 8008064:	08008091 	.word	0x08008091
 8008068:	08008091 	.word	0x08008091
 800806c:	08008091 	.word	0x08008091
 8008070:	08008091 	.word	0x08008091
 8008074:	08008091 	.word	0x08008091
 8008078:	08008091 	.word	0x08008091
 800807c:	08008091 	.word	0x08008091
 8008080:	08008091 	.word	0x08008091
 8008084:	08008091 	.word	0x08008091
 8008088:	08008091 	.word	0x08008091
 800808c:	08008091 	.word	0x08008091
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008090:	bf00      	nop
  }

  return (USBD_OK);
 8008092:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008094:	4618      	mov	r0, r3
 8008096:	370c      	adds	r7, #12
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr

080080a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80080aa:	6879      	ldr	r1, [r7, #4]
 80080ac:	4805      	ldr	r0, [pc, #20]	; (80080c4 <CDC_Receive_FS+0x24>)
 80080ae:	f7fe fd70 	bl	8006b92 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80080b2:	4804      	ldr	r0, [pc, #16]	; (80080c4 <CDC_Receive_FS+0x24>)
 80080b4:	f7fe fdb6 	bl	8006c24 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80080b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3708      	adds	r7, #8
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	2000065c 	.word	0x2000065c

080080c8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	460b      	mov	r3, r1
 80080d2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80080d4:	2300      	movs	r3, #0
 80080d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80080d8:	4b0d      	ldr	r3, [pc, #52]	; (8008110 <CDC_Transmit_FS+0x48>)
 80080da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080de:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d001      	beq.n	80080ee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80080ea:	2301      	movs	r3, #1
 80080ec:	e00b      	b.n	8008106 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80080ee:	887b      	ldrh	r3, [r7, #2]
 80080f0:	461a      	mov	r2, r3
 80080f2:	6879      	ldr	r1, [r7, #4]
 80080f4:	4806      	ldr	r0, [pc, #24]	; (8008110 <CDC_Transmit_FS+0x48>)
 80080f6:	f7fe fd2e 	bl	8006b56 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80080fa:	4805      	ldr	r0, [pc, #20]	; (8008110 <CDC_Transmit_FS+0x48>)
 80080fc:	f7fe fd62 	bl	8006bc4 <USBD_CDC_TransmitPacket>
 8008100:	4603      	mov	r3, r0
 8008102:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008104:	7bfb      	ldrb	r3, [r7, #15]
}
 8008106:	4618      	mov	r0, r3
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	2000065c 	.word	0x2000065c

08008114 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008114:	b480      	push	{r7}
 8008116:	b087      	sub	sp, #28
 8008118:	af00      	add	r7, sp, #0
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	4613      	mov	r3, r2
 8008120:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008122:	2300      	movs	r3, #0
 8008124:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008126:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800812a:	4618      	mov	r0, r3
 800812c:	371c      	adds	r7, #28
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr
	...

08008138 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	4603      	mov	r3, r0
 8008140:	6039      	str	r1, [r7, #0]
 8008142:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	2212      	movs	r2, #18
 8008148:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800814a:	4b03      	ldr	r3, [pc, #12]	; (8008158 <USBD_FS_DeviceDescriptor+0x20>)
}
 800814c:	4618      	mov	r0, r3
 800814e:	370c      	adds	r7, #12
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr
 8008158:	2000014c 	.word	0x2000014c

0800815c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	4603      	mov	r3, r0
 8008164:	6039      	str	r1, [r7, #0]
 8008166:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	2204      	movs	r2, #4
 800816c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800816e:	4b03      	ldr	r3, [pc, #12]	; (800817c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008170:	4618      	mov	r0, r3
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr
 800817c:	20000160 	.word	0x20000160

08008180 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	4603      	mov	r3, r0
 8008188:	6039      	str	r1, [r7, #0]
 800818a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800818c:	79fb      	ldrb	r3, [r7, #7]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d105      	bne.n	800819e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008192:	683a      	ldr	r2, [r7, #0]
 8008194:	4907      	ldr	r1, [pc, #28]	; (80081b4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008196:	4808      	ldr	r0, [pc, #32]	; (80081b8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008198:	f7ff fdf7 	bl	8007d8a <USBD_GetString>
 800819c:	e004      	b.n	80081a8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800819e:	683a      	ldr	r2, [r7, #0]
 80081a0:	4904      	ldr	r1, [pc, #16]	; (80081b4 <USBD_FS_ProductStrDescriptor+0x34>)
 80081a2:	4805      	ldr	r0, [pc, #20]	; (80081b8 <USBD_FS_ProductStrDescriptor+0x38>)
 80081a4:	f7ff fdf1 	bl	8007d8a <USBD_GetString>
  }
  return USBD_StrDesc;
 80081a8:	4b02      	ldr	r3, [pc, #8]	; (80081b4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3708      	adds	r7, #8
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	2000192c 	.word	0x2000192c
 80081b8:	0800c6b8 	.word	0x0800c6b8

080081bc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	4603      	mov	r3, r0
 80081c4:	6039      	str	r1, [r7, #0]
 80081c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80081c8:	683a      	ldr	r2, [r7, #0]
 80081ca:	4904      	ldr	r1, [pc, #16]	; (80081dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80081cc:	4804      	ldr	r0, [pc, #16]	; (80081e0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80081ce:	f7ff fddc 	bl	8007d8a <USBD_GetString>
  return USBD_StrDesc;
 80081d2:	4b02      	ldr	r3, [pc, #8]	; (80081dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3708      	adds	r7, #8
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	2000192c 	.word	0x2000192c
 80081e0:	0800c6d0 	.word	0x0800c6d0

080081e4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	4603      	mov	r3, r0
 80081ec:	6039      	str	r1, [r7, #0]
 80081ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	221a      	movs	r2, #26
 80081f4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80081f6:	f000 f843 	bl	8008280 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80081fa:	4b02      	ldr	r3, [pc, #8]	; (8008204 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3708      	adds	r7, #8
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}
 8008204:	20000164 	.word	0x20000164

08008208 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	4603      	mov	r3, r0
 8008210:	6039      	str	r1, [r7, #0]
 8008212:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008214:	79fb      	ldrb	r3, [r7, #7]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d105      	bne.n	8008226 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800821a:	683a      	ldr	r2, [r7, #0]
 800821c:	4907      	ldr	r1, [pc, #28]	; (800823c <USBD_FS_ConfigStrDescriptor+0x34>)
 800821e:	4808      	ldr	r0, [pc, #32]	; (8008240 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008220:	f7ff fdb3 	bl	8007d8a <USBD_GetString>
 8008224:	e004      	b.n	8008230 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008226:	683a      	ldr	r2, [r7, #0]
 8008228:	4904      	ldr	r1, [pc, #16]	; (800823c <USBD_FS_ConfigStrDescriptor+0x34>)
 800822a:	4805      	ldr	r0, [pc, #20]	; (8008240 <USBD_FS_ConfigStrDescriptor+0x38>)
 800822c:	f7ff fdad 	bl	8007d8a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008230:	4b02      	ldr	r3, [pc, #8]	; (800823c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008232:	4618      	mov	r0, r3
 8008234:	3708      	adds	r7, #8
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	2000192c 	.word	0x2000192c
 8008240:	0800c6e4 	.word	0x0800c6e4

08008244 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	4603      	mov	r3, r0
 800824c:	6039      	str	r1, [r7, #0]
 800824e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008250:	79fb      	ldrb	r3, [r7, #7]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d105      	bne.n	8008262 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008256:	683a      	ldr	r2, [r7, #0]
 8008258:	4907      	ldr	r1, [pc, #28]	; (8008278 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800825a:	4808      	ldr	r0, [pc, #32]	; (800827c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800825c:	f7ff fd95 	bl	8007d8a <USBD_GetString>
 8008260:	e004      	b.n	800826c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008262:	683a      	ldr	r2, [r7, #0]
 8008264:	4904      	ldr	r1, [pc, #16]	; (8008278 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008266:	4805      	ldr	r0, [pc, #20]	; (800827c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008268:	f7ff fd8f 	bl	8007d8a <USBD_GetString>
  }
  return USBD_StrDesc;
 800826c:	4b02      	ldr	r3, [pc, #8]	; (8008278 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800826e:	4618      	mov	r0, r3
 8008270:	3708      	adds	r7, #8
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
 8008276:	bf00      	nop
 8008278:	2000192c 	.word	0x2000192c
 800827c:	0800c6f0 	.word	0x0800c6f0

08008280 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008286:	4b0f      	ldr	r3, [pc, #60]	; (80082c4 <Get_SerialNum+0x44>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800828c:	4b0e      	ldr	r3, [pc, #56]	; (80082c8 <Get_SerialNum+0x48>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008292:	4b0e      	ldr	r3, [pc, #56]	; (80082cc <Get_SerialNum+0x4c>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4413      	add	r3, r2
 800829e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d009      	beq.n	80082ba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80082a6:	2208      	movs	r2, #8
 80082a8:	4909      	ldr	r1, [pc, #36]	; (80082d0 <Get_SerialNum+0x50>)
 80082aa:	68f8      	ldr	r0, [r7, #12]
 80082ac:	f000 f814 	bl	80082d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80082b0:	2204      	movs	r2, #4
 80082b2:	4908      	ldr	r1, [pc, #32]	; (80082d4 <Get_SerialNum+0x54>)
 80082b4:	68b8      	ldr	r0, [r7, #8]
 80082b6:	f000 f80f 	bl	80082d8 <IntToUnicode>
  }
}
 80082ba:	bf00      	nop
 80082bc:	3710      	adds	r7, #16
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	1fff7a10 	.word	0x1fff7a10
 80082c8:	1fff7a14 	.word	0x1fff7a14
 80082cc:	1fff7a18 	.word	0x1fff7a18
 80082d0:	20000166 	.word	0x20000166
 80082d4:	20000176 	.word	0x20000176

080082d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80082d8:	b480      	push	{r7}
 80082da:	b087      	sub	sp, #28
 80082dc:	af00      	add	r7, sp, #0
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	4613      	mov	r3, r2
 80082e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80082e6:	2300      	movs	r3, #0
 80082e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80082ea:	2300      	movs	r3, #0
 80082ec:	75fb      	strb	r3, [r7, #23]
 80082ee:	e027      	b.n	8008340 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	0f1b      	lsrs	r3, r3, #28
 80082f4:	2b09      	cmp	r3, #9
 80082f6:	d80b      	bhi.n	8008310 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	0f1b      	lsrs	r3, r3, #28
 80082fc:	b2da      	uxtb	r2, r3
 80082fe:	7dfb      	ldrb	r3, [r7, #23]
 8008300:	005b      	lsls	r3, r3, #1
 8008302:	4619      	mov	r1, r3
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	440b      	add	r3, r1
 8008308:	3230      	adds	r2, #48	; 0x30
 800830a:	b2d2      	uxtb	r2, r2
 800830c:	701a      	strb	r2, [r3, #0]
 800830e:	e00a      	b.n	8008326 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	0f1b      	lsrs	r3, r3, #28
 8008314:	b2da      	uxtb	r2, r3
 8008316:	7dfb      	ldrb	r3, [r7, #23]
 8008318:	005b      	lsls	r3, r3, #1
 800831a:	4619      	mov	r1, r3
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	440b      	add	r3, r1
 8008320:	3237      	adds	r2, #55	; 0x37
 8008322:	b2d2      	uxtb	r2, r2
 8008324:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	011b      	lsls	r3, r3, #4
 800832a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800832c:	7dfb      	ldrb	r3, [r7, #23]
 800832e:	005b      	lsls	r3, r3, #1
 8008330:	3301      	adds	r3, #1
 8008332:	68ba      	ldr	r2, [r7, #8]
 8008334:	4413      	add	r3, r2
 8008336:	2200      	movs	r2, #0
 8008338:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800833a:	7dfb      	ldrb	r3, [r7, #23]
 800833c:	3301      	adds	r3, #1
 800833e:	75fb      	strb	r3, [r7, #23]
 8008340:	7dfa      	ldrb	r2, [r7, #23]
 8008342:	79fb      	ldrb	r3, [r7, #7]
 8008344:	429a      	cmp	r2, r3
 8008346:	d3d3      	bcc.n	80082f0 <IntToUnicode+0x18>
  }
}
 8008348:	bf00      	nop
 800834a:	bf00      	nop
 800834c:	371c      	adds	r7, #28
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr
	...

08008358 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b08a      	sub	sp, #40	; 0x28
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008360:	f107 0314 	add.w	r3, r7, #20
 8008364:	2200      	movs	r2, #0
 8008366:	601a      	str	r2, [r3, #0]
 8008368:	605a      	str	r2, [r3, #4]
 800836a:	609a      	str	r2, [r3, #8]
 800836c:	60da      	str	r2, [r3, #12]
 800836e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008378:	d13a      	bne.n	80083f0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800837a:	2300      	movs	r3, #0
 800837c:	613b      	str	r3, [r7, #16]
 800837e:	4b1e      	ldr	r3, [pc, #120]	; (80083f8 <HAL_PCD_MspInit+0xa0>)
 8008380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008382:	4a1d      	ldr	r2, [pc, #116]	; (80083f8 <HAL_PCD_MspInit+0xa0>)
 8008384:	f043 0301 	orr.w	r3, r3, #1
 8008388:	6313      	str	r3, [r2, #48]	; 0x30
 800838a:	4b1b      	ldr	r3, [pc, #108]	; (80083f8 <HAL_PCD_MspInit+0xa0>)
 800838c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800838e:	f003 0301 	and.w	r3, r3, #1
 8008392:	613b      	str	r3, [r7, #16]
 8008394:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008396:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800839a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800839c:	2302      	movs	r3, #2
 800839e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083a0:	2300      	movs	r3, #0
 80083a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80083a4:	2303      	movs	r3, #3
 80083a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80083a8:	230a      	movs	r3, #10
 80083aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083ac:	f107 0314 	add.w	r3, r7, #20
 80083b0:	4619      	mov	r1, r3
 80083b2:	4812      	ldr	r0, [pc, #72]	; (80083fc <HAL_PCD_MspInit+0xa4>)
 80083b4:	f7f9 fec6 	bl	8002144 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80083b8:	4b0f      	ldr	r3, [pc, #60]	; (80083f8 <HAL_PCD_MspInit+0xa0>)
 80083ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083bc:	4a0e      	ldr	r2, [pc, #56]	; (80083f8 <HAL_PCD_MspInit+0xa0>)
 80083be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083c2:	6353      	str	r3, [r2, #52]	; 0x34
 80083c4:	2300      	movs	r3, #0
 80083c6:	60fb      	str	r3, [r7, #12]
 80083c8:	4b0b      	ldr	r3, [pc, #44]	; (80083f8 <HAL_PCD_MspInit+0xa0>)
 80083ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083cc:	4a0a      	ldr	r2, [pc, #40]	; (80083f8 <HAL_PCD_MspInit+0xa0>)
 80083ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80083d2:	6453      	str	r3, [r2, #68]	; 0x44
 80083d4:	4b08      	ldr	r3, [pc, #32]	; (80083f8 <HAL_PCD_MspInit+0xa0>)
 80083d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083dc:	60fb      	str	r3, [r7, #12]
 80083de:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80083e0:	2200      	movs	r2, #0
 80083e2:	2100      	movs	r1, #0
 80083e4:	2043      	movs	r0, #67	; 0x43
 80083e6:	f7f9 fe76 	bl	80020d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80083ea:	2043      	movs	r0, #67	; 0x43
 80083ec:	f7f9 fe8f 	bl	800210e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80083f0:	bf00      	nop
 80083f2:	3728      	adds	r7, #40	; 0x28
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	40023800 	.word	0x40023800
 80083fc:	40020000 	.word	0x40020000

08008400 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008414:	4619      	mov	r1, r3
 8008416:	4610      	mov	r0, r2
 8008418:	f7fe fcd0 	bl	8006dbc <USBD_LL_SetupStage>
}
 800841c:	bf00      	nop
 800841e:	3708      	adds	r7, #8
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	460b      	mov	r3, r1
 800842e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008436:	78fa      	ldrb	r2, [r7, #3]
 8008438:	6879      	ldr	r1, [r7, #4]
 800843a:	4613      	mov	r3, r2
 800843c:	00db      	lsls	r3, r3, #3
 800843e:	1a9b      	subs	r3, r3, r2
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	440b      	add	r3, r1
 8008444:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	78fb      	ldrb	r3, [r7, #3]
 800844c:	4619      	mov	r1, r3
 800844e:	f7fe fd0a 	bl	8006e66 <USBD_LL_DataOutStage>
}
 8008452:	bf00      	nop
 8008454:	3708      	adds	r7, #8
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b082      	sub	sp, #8
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
 8008462:	460b      	mov	r3, r1
 8008464:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800846c:	78fa      	ldrb	r2, [r7, #3]
 800846e:	6879      	ldr	r1, [r7, #4]
 8008470:	4613      	mov	r3, r2
 8008472:	00db      	lsls	r3, r3, #3
 8008474:	1a9b      	subs	r3, r3, r2
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	440b      	add	r3, r1
 800847a:	3348      	adds	r3, #72	; 0x48
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	78fb      	ldrb	r3, [r7, #3]
 8008480:	4619      	mov	r1, r3
 8008482:	f7fe fd53 	bl	8006f2c <USBD_LL_DataInStage>
}
 8008486:	bf00      	nop
 8008488:	3708      	adds	r7, #8
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800848e:	b580      	push	{r7, lr}
 8008490:	b082      	sub	sp, #8
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800849c:	4618      	mov	r0, r3
 800849e:	f7fe fe67 	bl	8007170 <USBD_LL_SOF>
}
 80084a2:	bf00      	nop
 80084a4:	3708      	adds	r7, #8
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b084      	sub	sp, #16
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80084b2:	2301      	movs	r3, #1
 80084b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	68db      	ldr	r3, [r3, #12]
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	d001      	beq.n	80084c2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80084be:	f7f9 faed 	bl	8001a9c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80084c8:	7bfa      	ldrb	r2, [r7, #15]
 80084ca:	4611      	mov	r1, r2
 80084cc:	4618      	mov	r0, r3
 80084ce:	f7fe fe11 	bl	80070f4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80084d8:	4618      	mov	r0, r3
 80084da:	f7fe fdbd 	bl	8007058 <USBD_LL_Reset>
}
 80084de:	bf00      	nop
 80084e0:	3710      	adds	r7, #16
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
	...

080084e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7fe fe0c 	bl	8007114 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	6812      	ldr	r2, [r2, #0]
 800850a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800850e:	f043 0301 	orr.w	r3, r3, #1
 8008512:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6a1b      	ldr	r3, [r3, #32]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d005      	beq.n	8008528 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800851c:	4b04      	ldr	r3, [pc, #16]	; (8008530 <HAL_PCD_SuspendCallback+0x48>)
 800851e:	691b      	ldr	r3, [r3, #16]
 8008520:	4a03      	ldr	r2, [pc, #12]	; (8008530 <HAL_PCD_SuspendCallback+0x48>)
 8008522:	f043 0306 	orr.w	r3, r3, #6
 8008526:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008528:	bf00      	nop
 800852a:	3708      	adds	r7, #8
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}
 8008530:	e000ed00 	.word	0xe000ed00

08008534 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008542:	4618      	mov	r0, r3
 8008544:	f7fe fdfc 	bl	8007140 <USBD_LL_Resume>
}
 8008548:	bf00      	nop
 800854a:	3708      	adds	r7, #8
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	460b      	mov	r3, r1
 800855a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008562:	78fa      	ldrb	r2, [r7, #3]
 8008564:	4611      	mov	r1, r2
 8008566:	4618      	mov	r0, r3
 8008568:	f7fe fe4a 	bl	8007200 <USBD_LL_IsoOUTIncomplete>
}
 800856c:	bf00      	nop
 800856e:	3708      	adds	r7, #8
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	460b      	mov	r3, r1
 800857e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008586:	78fa      	ldrb	r2, [r7, #3]
 8008588:	4611      	mov	r1, r2
 800858a:	4618      	mov	r0, r3
 800858c:	f7fe fe12 	bl	80071b4 <USBD_LL_IsoINIncomplete>
}
 8008590:	bf00      	nop
 8008592:	3708      	adds	r7, #8
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7fe fe50 	bl	800724c <USBD_LL_DevConnected>
}
 80085ac:	bf00      	nop
 80085ae:	3708      	adds	r7, #8
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80085c2:	4618      	mov	r0, r3
 80085c4:	f7fe fe4d 	bl	8007262 <USBD_LL_DevDisconnected>
}
 80085c8:	bf00      	nop
 80085ca:	3708      	adds	r7, #8
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b082      	sub	sp, #8
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d13c      	bne.n	800865a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80085e0:	4a20      	ldr	r2, [pc, #128]	; (8008664 <USBD_LL_Init+0x94>)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4a1e      	ldr	r2, [pc, #120]	; (8008664 <USBD_LL_Init+0x94>)
 80085ec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80085f0:	4b1c      	ldr	r3, [pc, #112]	; (8008664 <USBD_LL_Init+0x94>)
 80085f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80085f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80085f8:	4b1a      	ldr	r3, [pc, #104]	; (8008664 <USBD_LL_Init+0x94>)
 80085fa:	2204      	movs	r2, #4
 80085fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80085fe:	4b19      	ldr	r3, [pc, #100]	; (8008664 <USBD_LL_Init+0x94>)
 8008600:	2202      	movs	r2, #2
 8008602:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008604:	4b17      	ldr	r3, [pc, #92]	; (8008664 <USBD_LL_Init+0x94>)
 8008606:	2200      	movs	r2, #0
 8008608:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800860a:	4b16      	ldr	r3, [pc, #88]	; (8008664 <USBD_LL_Init+0x94>)
 800860c:	2202      	movs	r2, #2
 800860e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008610:	4b14      	ldr	r3, [pc, #80]	; (8008664 <USBD_LL_Init+0x94>)
 8008612:	2200      	movs	r2, #0
 8008614:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008616:	4b13      	ldr	r3, [pc, #76]	; (8008664 <USBD_LL_Init+0x94>)
 8008618:	2200      	movs	r2, #0
 800861a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800861c:	4b11      	ldr	r3, [pc, #68]	; (8008664 <USBD_LL_Init+0x94>)
 800861e:	2200      	movs	r2, #0
 8008620:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008622:	4b10      	ldr	r3, [pc, #64]	; (8008664 <USBD_LL_Init+0x94>)
 8008624:	2200      	movs	r2, #0
 8008626:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008628:	4b0e      	ldr	r3, [pc, #56]	; (8008664 <USBD_LL_Init+0x94>)
 800862a:	2200      	movs	r2, #0
 800862c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800862e:	480d      	ldr	r0, [pc, #52]	; (8008664 <USBD_LL_Init+0x94>)
 8008630:	f7fa fecb 	bl	80033ca <HAL_PCD_Init>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d001      	beq.n	800863e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800863a:	f7f9 fa2f 	bl	8001a9c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800863e:	2180      	movs	r1, #128	; 0x80
 8008640:	4808      	ldr	r0, [pc, #32]	; (8008664 <USBD_LL_Init+0x94>)
 8008642:	f7fc f828 	bl	8004696 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008646:	2240      	movs	r2, #64	; 0x40
 8008648:	2100      	movs	r1, #0
 800864a:	4806      	ldr	r0, [pc, #24]	; (8008664 <USBD_LL_Init+0x94>)
 800864c:	f7fb ffdc 	bl	8004608 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008650:	2280      	movs	r2, #128	; 0x80
 8008652:	2101      	movs	r1, #1
 8008654:	4803      	ldr	r0, [pc, #12]	; (8008664 <USBD_LL_Init+0x94>)
 8008656:	f7fb ffd7 	bl	8004608 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3708      	adds	r7, #8
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	20001b2c 	.word	0x20001b2c

08008668 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008670:	2300      	movs	r3, #0
 8008672:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008674:	2300      	movs	r3, #0
 8008676:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800867e:	4618      	mov	r0, r3
 8008680:	f7fa ffc0 	bl	8003604 <HAL_PCD_Start>
 8008684:	4603      	mov	r3, r0
 8008686:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008688:	7bfb      	ldrb	r3, [r7, #15]
 800868a:	4618      	mov	r0, r3
 800868c:	f000 f942 	bl	8008914 <USBD_Get_USB_Status>
 8008690:	4603      	mov	r3, r0
 8008692:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008694:	7bbb      	ldrb	r3, [r7, #14]
}
 8008696:	4618      	mov	r0, r3
 8008698:	3710      	adds	r7, #16
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800869e:	b580      	push	{r7, lr}
 80086a0:	b084      	sub	sp, #16
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
 80086a6:	4608      	mov	r0, r1
 80086a8:	4611      	mov	r1, r2
 80086aa:	461a      	mov	r2, r3
 80086ac:	4603      	mov	r3, r0
 80086ae:	70fb      	strb	r3, [r7, #3]
 80086b0:	460b      	mov	r3, r1
 80086b2:	70bb      	strb	r3, [r7, #2]
 80086b4:	4613      	mov	r3, r2
 80086b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086b8:	2300      	movs	r3, #0
 80086ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086bc:	2300      	movs	r3, #0
 80086be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80086c6:	78bb      	ldrb	r3, [r7, #2]
 80086c8:	883a      	ldrh	r2, [r7, #0]
 80086ca:	78f9      	ldrb	r1, [r7, #3]
 80086cc:	f7fb fba4 	bl	8003e18 <HAL_PCD_EP_Open>
 80086d0:	4603      	mov	r3, r0
 80086d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086d4:	7bfb      	ldrb	r3, [r7, #15]
 80086d6:	4618      	mov	r0, r3
 80086d8:	f000 f91c 	bl	8008914 <USBD_Get_USB_Status>
 80086dc:	4603      	mov	r3, r0
 80086de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3710      	adds	r7, #16
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b084      	sub	sp, #16
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
 80086f2:	460b      	mov	r3, r1
 80086f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086f6:	2300      	movs	r3, #0
 80086f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086fa:	2300      	movs	r3, #0
 80086fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008704:	78fa      	ldrb	r2, [r7, #3]
 8008706:	4611      	mov	r1, r2
 8008708:	4618      	mov	r0, r3
 800870a:	f7fb fbed 	bl	8003ee8 <HAL_PCD_EP_Close>
 800870e:	4603      	mov	r3, r0
 8008710:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008712:	7bfb      	ldrb	r3, [r7, #15]
 8008714:	4618      	mov	r0, r3
 8008716:	f000 f8fd 	bl	8008914 <USBD_Get_USB_Status>
 800871a:	4603      	mov	r3, r0
 800871c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800871e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008720:	4618      	mov	r0, r3
 8008722:	3710      	adds	r7, #16
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	460b      	mov	r3, r1
 8008732:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008734:	2300      	movs	r3, #0
 8008736:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008738:	2300      	movs	r3, #0
 800873a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008742:	78fa      	ldrb	r2, [r7, #3]
 8008744:	4611      	mov	r1, r2
 8008746:	4618      	mov	r0, r3
 8008748:	f7fb fcc5 	bl	80040d6 <HAL_PCD_EP_SetStall>
 800874c:	4603      	mov	r3, r0
 800874e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008750:	7bfb      	ldrb	r3, [r7, #15]
 8008752:	4618      	mov	r0, r3
 8008754:	f000 f8de 	bl	8008914 <USBD_Get_USB_Status>
 8008758:	4603      	mov	r3, r0
 800875a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800875c:	7bbb      	ldrb	r3, [r7, #14]
}
 800875e:	4618      	mov	r0, r3
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b084      	sub	sp, #16
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
 800876e:	460b      	mov	r3, r1
 8008770:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008772:	2300      	movs	r3, #0
 8008774:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008776:	2300      	movs	r3, #0
 8008778:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008780:	78fa      	ldrb	r2, [r7, #3]
 8008782:	4611      	mov	r1, r2
 8008784:	4618      	mov	r0, r3
 8008786:	f7fb fd0a 	bl	800419e <HAL_PCD_EP_ClrStall>
 800878a:	4603      	mov	r3, r0
 800878c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800878e:	7bfb      	ldrb	r3, [r7, #15]
 8008790:	4618      	mov	r0, r3
 8008792:	f000 f8bf 	bl	8008914 <USBD_Get_USB_Status>
 8008796:	4603      	mov	r3, r0
 8008798:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800879a:	7bbb      	ldrb	r3, [r7, #14]
}
 800879c:	4618      	mov	r0, r3
 800879e:	3710      	adds	r7, #16
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	460b      	mov	r3, r1
 80087ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80087b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80087b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	da0b      	bge.n	80087d8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80087c0:	78fb      	ldrb	r3, [r7, #3]
 80087c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087c6:	68f9      	ldr	r1, [r7, #12]
 80087c8:	4613      	mov	r3, r2
 80087ca:	00db      	lsls	r3, r3, #3
 80087cc:	1a9b      	subs	r3, r3, r2
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	440b      	add	r3, r1
 80087d2:	333e      	adds	r3, #62	; 0x3e
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	e00b      	b.n	80087f0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80087d8:	78fb      	ldrb	r3, [r7, #3]
 80087da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087de:	68f9      	ldr	r1, [r7, #12]
 80087e0:	4613      	mov	r3, r2
 80087e2:	00db      	lsls	r3, r3, #3
 80087e4:	1a9b      	subs	r3, r3, r2
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	440b      	add	r3, r1
 80087ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80087ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3714      	adds	r7, #20
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	460b      	mov	r3, r1
 8008806:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008808:	2300      	movs	r3, #0
 800880a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800880c:	2300      	movs	r3, #0
 800880e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008816:	78fa      	ldrb	r2, [r7, #3]
 8008818:	4611      	mov	r1, r2
 800881a:	4618      	mov	r0, r3
 800881c:	f7fb fad7 	bl	8003dce <HAL_PCD_SetAddress>
 8008820:	4603      	mov	r3, r0
 8008822:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008824:	7bfb      	ldrb	r3, [r7, #15]
 8008826:	4618      	mov	r0, r3
 8008828:	f000 f874 	bl	8008914 <USBD_Get_USB_Status>
 800882c:	4603      	mov	r3, r0
 800882e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008830:	7bbb      	ldrb	r3, [r7, #14]
}
 8008832:	4618      	mov	r0, r3
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b086      	sub	sp, #24
 800883e:	af00      	add	r7, sp, #0
 8008840:	60f8      	str	r0, [r7, #12]
 8008842:	607a      	str	r2, [r7, #4]
 8008844:	603b      	str	r3, [r7, #0]
 8008846:	460b      	mov	r3, r1
 8008848:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800884a:	2300      	movs	r3, #0
 800884c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800884e:	2300      	movs	r3, #0
 8008850:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008858:	7af9      	ldrb	r1, [r7, #11]
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	f7fb fbf0 	bl	8004042 <HAL_PCD_EP_Transmit>
 8008862:	4603      	mov	r3, r0
 8008864:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008866:	7dfb      	ldrb	r3, [r7, #23]
 8008868:	4618      	mov	r0, r3
 800886a:	f000 f853 	bl	8008914 <USBD_Get_USB_Status>
 800886e:	4603      	mov	r3, r0
 8008870:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008872:	7dbb      	ldrb	r3, [r7, #22]
}
 8008874:	4618      	mov	r0, r3
 8008876:	3718      	adds	r7, #24
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b086      	sub	sp, #24
 8008880:	af00      	add	r7, sp, #0
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	607a      	str	r2, [r7, #4]
 8008886:	603b      	str	r3, [r7, #0]
 8008888:	460b      	mov	r3, r1
 800888a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800888c:	2300      	movs	r3, #0
 800888e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008890:	2300      	movs	r3, #0
 8008892:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800889a:	7af9      	ldrb	r1, [r7, #11]
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	f7fb fb6c 	bl	8003f7c <HAL_PCD_EP_Receive>
 80088a4:	4603      	mov	r3, r0
 80088a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088a8:	7dfb      	ldrb	r3, [r7, #23]
 80088aa:	4618      	mov	r0, r3
 80088ac:	f000 f832 	bl	8008914 <USBD_Get_USB_Status>
 80088b0:	4603      	mov	r3, r0
 80088b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80088b4:	7dbb      	ldrb	r3, [r7, #22]
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3718      	adds	r7, #24
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}

080088be <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088be:	b580      	push	{r7, lr}
 80088c0:	b082      	sub	sp, #8
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
 80088c6:	460b      	mov	r3, r1
 80088c8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80088d0:	78fa      	ldrb	r2, [r7, #3]
 80088d2:	4611      	mov	r1, r2
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7fb fb9c 	bl	8004012 <HAL_PCD_EP_GetRxCount>
 80088da:	4603      	mov	r3, r0
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3708      	adds	r7, #8
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80088ec:	4b03      	ldr	r3, [pc, #12]	; (80088fc <USBD_static_malloc+0x18>)
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	370c      	adds	r7, #12
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr
 80088fa:	bf00      	nop
 80088fc:	200003c0 	.word	0x200003c0

08008900 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]

}
 8008908:	bf00      	nop
 800890a:	370c      	adds	r7, #12
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr

08008914 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008914:	b480      	push	{r7}
 8008916:	b085      	sub	sp, #20
 8008918:	af00      	add	r7, sp, #0
 800891a:	4603      	mov	r3, r0
 800891c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800891e:	2300      	movs	r3, #0
 8008920:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008922:	79fb      	ldrb	r3, [r7, #7]
 8008924:	2b03      	cmp	r3, #3
 8008926:	d817      	bhi.n	8008958 <USBD_Get_USB_Status+0x44>
 8008928:	a201      	add	r2, pc, #4	; (adr r2, 8008930 <USBD_Get_USB_Status+0x1c>)
 800892a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800892e:	bf00      	nop
 8008930:	08008941 	.word	0x08008941
 8008934:	08008947 	.word	0x08008947
 8008938:	0800894d 	.word	0x0800894d
 800893c:	08008953 	.word	0x08008953
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008940:	2300      	movs	r3, #0
 8008942:	73fb      	strb	r3, [r7, #15]
    break;
 8008944:	e00b      	b.n	800895e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008946:	2303      	movs	r3, #3
 8008948:	73fb      	strb	r3, [r7, #15]
    break;
 800894a:	e008      	b.n	800895e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800894c:	2301      	movs	r3, #1
 800894e:	73fb      	strb	r3, [r7, #15]
    break;
 8008950:	e005      	b.n	800895e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008952:	2303      	movs	r3, #3
 8008954:	73fb      	strb	r3, [r7, #15]
    break;
 8008956:	e002      	b.n	800895e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008958:	2303      	movs	r3, #3
 800895a:	73fb      	strb	r3, [r7, #15]
    break;
 800895c:	bf00      	nop
  }
  return usb_status;
 800895e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008960:	4618      	mov	r0, r3
 8008962:	3714      	adds	r7, #20
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr

0800896c <__errno>:
 800896c:	4b01      	ldr	r3, [pc, #4]	; (8008974 <__errno+0x8>)
 800896e:	6818      	ldr	r0, [r3, #0]
 8008970:	4770      	bx	lr
 8008972:	bf00      	nop
 8008974:	20000180 	.word	0x20000180

08008978 <__libc_init_array>:
 8008978:	b570      	push	{r4, r5, r6, lr}
 800897a:	4d0d      	ldr	r5, [pc, #52]	; (80089b0 <__libc_init_array+0x38>)
 800897c:	4c0d      	ldr	r4, [pc, #52]	; (80089b4 <__libc_init_array+0x3c>)
 800897e:	1b64      	subs	r4, r4, r5
 8008980:	10a4      	asrs	r4, r4, #2
 8008982:	2600      	movs	r6, #0
 8008984:	42a6      	cmp	r6, r4
 8008986:	d109      	bne.n	800899c <__libc_init_array+0x24>
 8008988:	4d0b      	ldr	r5, [pc, #44]	; (80089b8 <__libc_init_array+0x40>)
 800898a:	4c0c      	ldr	r4, [pc, #48]	; (80089bc <__libc_init_array+0x44>)
 800898c:	f003 fe6a 	bl	800c664 <_init>
 8008990:	1b64      	subs	r4, r4, r5
 8008992:	10a4      	asrs	r4, r4, #2
 8008994:	2600      	movs	r6, #0
 8008996:	42a6      	cmp	r6, r4
 8008998:	d105      	bne.n	80089a6 <__libc_init_array+0x2e>
 800899a:	bd70      	pop	{r4, r5, r6, pc}
 800899c:	f855 3b04 	ldr.w	r3, [r5], #4
 80089a0:	4798      	blx	r3
 80089a2:	3601      	adds	r6, #1
 80089a4:	e7ee      	b.n	8008984 <__libc_init_array+0xc>
 80089a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80089aa:	4798      	blx	r3
 80089ac:	3601      	adds	r6, #1
 80089ae:	e7f2      	b.n	8008996 <__libc_init_array+0x1e>
 80089b0:	0800cb48 	.word	0x0800cb48
 80089b4:	0800cb48 	.word	0x0800cb48
 80089b8:	0800cb48 	.word	0x0800cb48
 80089bc:	0800cb4c 	.word	0x0800cb4c

080089c0 <memset>:
 80089c0:	4402      	add	r2, r0
 80089c2:	4603      	mov	r3, r0
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d100      	bne.n	80089ca <memset+0xa>
 80089c8:	4770      	bx	lr
 80089ca:	f803 1b01 	strb.w	r1, [r3], #1
 80089ce:	e7f9      	b.n	80089c4 <memset+0x4>

080089d0 <__cvt>:
 80089d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089d4:	ec55 4b10 	vmov	r4, r5, d0
 80089d8:	2d00      	cmp	r5, #0
 80089da:	460e      	mov	r6, r1
 80089dc:	4619      	mov	r1, r3
 80089de:	462b      	mov	r3, r5
 80089e0:	bfbb      	ittet	lt
 80089e2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80089e6:	461d      	movlt	r5, r3
 80089e8:	2300      	movge	r3, #0
 80089ea:	232d      	movlt	r3, #45	; 0x2d
 80089ec:	700b      	strb	r3, [r1, #0]
 80089ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80089f4:	4691      	mov	r9, r2
 80089f6:	f023 0820 	bic.w	r8, r3, #32
 80089fa:	bfbc      	itt	lt
 80089fc:	4622      	movlt	r2, r4
 80089fe:	4614      	movlt	r4, r2
 8008a00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008a04:	d005      	beq.n	8008a12 <__cvt+0x42>
 8008a06:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008a0a:	d100      	bne.n	8008a0e <__cvt+0x3e>
 8008a0c:	3601      	adds	r6, #1
 8008a0e:	2102      	movs	r1, #2
 8008a10:	e000      	b.n	8008a14 <__cvt+0x44>
 8008a12:	2103      	movs	r1, #3
 8008a14:	ab03      	add	r3, sp, #12
 8008a16:	9301      	str	r3, [sp, #4]
 8008a18:	ab02      	add	r3, sp, #8
 8008a1a:	9300      	str	r3, [sp, #0]
 8008a1c:	ec45 4b10 	vmov	d0, r4, r5
 8008a20:	4653      	mov	r3, sl
 8008a22:	4632      	mov	r2, r6
 8008a24:	f000 fcec 	bl	8009400 <_dtoa_r>
 8008a28:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008a2c:	4607      	mov	r7, r0
 8008a2e:	d102      	bne.n	8008a36 <__cvt+0x66>
 8008a30:	f019 0f01 	tst.w	r9, #1
 8008a34:	d022      	beq.n	8008a7c <__cvt+0xac>
 8008a36:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008a3a:	eb07 0906 	add.w	r9, r7, r6
 8008a3e:	d110      	bne.n	8008a62 <__cvt+0x92>
 8008a40:	783b      	ldrb	r3, [r7, #0]
 8008a42:	2b30      	cmp	r3, #48	; 0x30
 8008a44:	d10a      	bne.n	8008a5c <__cvt+0x8c>
 8008a46:	2200      	movs	r2, #0
 8008a48:	2300      	movs	r3, #0
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	4629      	mov	r1, r5
 8008a4e:	f7f8 f843 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a52:	b918      	cbnz	r0, 8008a5c <__cvt+0x8c>
 8008a54:	f1c6 0601 	rsb	r6, r6, #1
 8008a58:	f8ca 6000 	str.w	r6, [sl]
 8008a5c:	f8da 3000 	ldr.w	r3, [sl]
 8008a60:	4499      	add	r9, r3
 8008a62:	2200      	movs	r2, #0
 8008a64:	2300      	movs	r3, #0
 8008a66:	4620      	mov	r0, r4
 8008a68:	4629      	mov	r1, r5
 8008a6a:	f7f8 f835 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a6e:	b108      	cbz	r0, 8008a74 <__cvt+0xa4>
 8008a70:	f8cd 900c 	str.w	r9, [sp, #12]
 8008a74:	2230      	movs	r2, #48	; 0x30
 8008a76:	9b03      	ldr	r3, [sp, #12]
 8008a78:	454b      	cmp	r3, r9
 8008a7a:	d307      	bcc.n	8008a8c <__cvt+0xbc>
 8008a7c:	9b03      	ldr	r3, [sp, #12]
 8008a7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a80:	1bdb      	subs	r3, r3, r7
 8008a82:	4638      	mov	r0, r7
 8008a84:	6013      	str	r3, [r2, #0]
 8008a86:	b004      	add	sp, #16
 8008a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a8c:	1c59      	adds	r1, r3, #1
 8008a8e:	9103      	str	r1, [sp, #12]
 8008a90:	701a      	strb	r2, [r3, #0]
 8008a92:	e7f0      	b.n	8008a76 <__cvt+0xa6>

08008a94 <__exponent>:
 8008a94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a96:	4603      	mov	r3, r0
 8008a98:	2900      	cmp	r1, #0
 8008a9a:	bfb8      	it	lt
 8008a9c:	4249      	neglt	r1, r1
 8008a9e:	f803 2b02 	strb.w	r2, [r3], #2
 8008aa2:	bfb4      	ite	lt
 8008aa4:	222d      	movlt	r2, #45	; 0x2d
 8008aa6:	222b      	movge	r2, #43	; 0x2b
 8008aa8:	2909      	cmp	r1, #9
 8008aaa:	7042      	strb	r2, [r0, #1]
 8008aac:	dd2a      	ble.n	8008b04 <__exponent+0x70>
 8008aae:	f10d 0407 	add.w	r4, sp, #7
 8008ab2:	46a4      	mov	ip, r4
 8008ab4:	270a      	movs	r7, #10
 8008ab6:	46a6      	mov	lr, r4
 8008ab8:	460a      	mov	r2, r1
 8008aba:	fb91 f6f7 	sdiv	r6, r1, r7
 8008abe:	fb07 1516 	mls	r5, r7, r6, r1
 8008ac2:	3530      	adds	r5, #48	; 0x30
 8008ac4:	2a63      	cmp	r2, #99	; 0x63
 8008ac6:	f104 34ff 	add.w	r4, r4, #4294967295
 8008aca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008ace:	4631      	mov	r1, r6
 8008ad0:	dcf1      	bgt.n	8008ab6 <__exponent+0x22>
 8008ad2:	3130      	adds	r1, #48	; 0x30
 8008ad4:	f1ae 0502 	sub.w	r5, lr, #2
 8008ad8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008adc:	1c44      	adds	r4, r0, #1
 8008ade:	4629      	mov	r1, r5
 8008ae0:	4561      	cmp	r1, ip
 8008ae2:	d30a      	bcc.n	8008afa <__exponent+0x66>
 8008ae4:	f10d 0209 	add.w	r2, sp, #9
 8008ae8:	eba2 020e 	sub.w	r2, r2, lr
 8008aec:	4565      	cmp	r5, ip
 8008aee:	bf88      	it	hi
 8008af0:	2200      	movhi	r2, #0
 8008af2:	4413      	add	r3, r2
 8008af4:	1a18      	subs	r0, r3, r0
 8008af6:	b003      	add	sp, #12
 8008af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008afa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008afe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008b02:	e7ed      	b.n	8008ae0 <__exponent+0x4c>
 8008b04:	2330      	movs	r3, #48	; 0x30
 8008b06:	3130      	adds	r1, #48	; 0x30
 8008b08:	7083      	strb	r3, [r0, #2]
 8008b0a:	70c1      	strb	r1, [r0, #3]
 8008b0c:	1d03      	adds	r3, r0, #4
 8008b0e:	e7f1      	b.n	8008af4 <__exponent+0x60>

08008b10 <_printf_float>:
 8008b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b14:	ed2d 8b02 	vpush	{d8}
 8008b18:	b08d      	sub	sp, #52	; 0x34
 8008b1a:	460c      	mov	r4, r1
 8008b1c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008b20:	4616      	mov	r6, r2
 8008b22:	461f      	mov	r7, r3
 8008b24:	4605      	mov	r5, r0
 8008b26:	f001 fa57 	bl	8009fd8 <_localeconv_r>
 8008b2a:	f8d0 a000 	ldr.w	sl, [r0]
 8008b2e:	4650      	mov	r0, sl
 8008b30:	f7f7 fb56 	bl	80001e0 <strlen>
 8008b34:	2300      	movs	r3, #0
 8008b36:	930a      	str	r3, [sp, #40]	; 0x28
 8008b38:	6823      	ldr	r3, [r4, #0]
 8008b3a:	9305      	str	r3, [sp, #20]
 8008b3c:	f8d8 3000 	ldr.w	r3, [r8]
 8008b40:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008b44:	3307      	adds	r3, #7
 8008b46:	f023 0307 	bic.w	r3, r3, #7
 8008b4a:	f103 0208 	add.w	r2, r3, #8
 8008b4e:	f8c8 2000 	str.w	r2, [r8]
 8008b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b56:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008b5a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008b5e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008b62:	9307      	str	r3, [sp, #28]
 8008b64:	f8cd 8018 	str.w	r8, [sp, #24]
 8008b68:	ee08 0a10 	vmov	s16, r0
 8008b6c:	4b9f      	ldr	r3, [pc, #636]	; (8008dec <_printf_float+0x2dc>)
 8008b6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b72:	f04f 32ff 	mov.w	r2, #4294967295
 8008b76:	f7f7 ffe1 	bl	8000b3c <__aeabi_dcmpun>
 8008b7a:	bb88      	cbnz	r0, 8008be0 <_printf_float+0xd0>
 8008b7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b80:	4b9a      	ldr	r3, [pc, #616]	; (8008dec <_printf_float+0x2dc>)
 8008b82:	f04f 32ff 	mov.w	r2, #4294967295
 8008b86:	f7f7 ffbb 	bl	8000b00 <__aeabi_dcmple>
 8008b8a:	bb48      	cbnz	r0, 8008be0 <_printf_float+0xd0>
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	2300      	movs	r3, #0
 8008b90:	4640      	mov	r0, r8
 8008b92:	4649      	mov	r1, r9
 8008b94:	f7f7 ffaa 	bl	8000aec <__aeabi_dcmplt>
 8008b98:	b110      	cbz	r0, 8008ba0 <_printf_float+0x90>
 8008b9a:	232d      	movs	r3, #45	; 0x2d
 8008b9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ba0:	4b93      	ldr	r3, [pc, #588]	; (8008df0 <_printf_float+0x2e0>)
 8008ba2:	4894      	ldr	r0, [pc, #592]	; (8008df4 <_printf_float+0x2e4>)
 8008ba4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008ba8:	bf94      	ite	ls
 8008baa:	4698      	movls	r8, r3
 8008bac:	4680      	movhi	r8, r0
 8008bae:	2303      	movs	r3, #3
 8008bb0:	6123      	str	r3, [r4, #16]
 8008bb2:	9b05      	ldr	r3, [sp, #20]
 8008bb4:	f023 0204 	bic.w	r2, r3, #4
 8008bb8:	6022      	str	r2, [r4, #0]
 8008bba:	f04f 0900 	mov.w	r9, #0
 8008bbe:	9700      	str	r7, [sp, #0]
 8008bc0:	4633      	mov	r3, r6
 8008bc2:	aa0b      	add	r2, sp, #44	; 0x2c
 8008bc4:	4621      	mov	r1, r4
 8008bc6:	4628      	mov	r0, r5
 8008bc8:	f000 f9d8 	bl	8008f7c <_printf_common>
 8008bcc:	3001      	adds	r0, #1
 8008bce:	f040 8090 	bne.w	8008cf2 <_printf_float+0x1e2>
 8008bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8008bd6:	b00d      	add	sp, #52	; 0x34
 8008bd8:	ecbd 8b02 	vpop	{d8}
 8008bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008be0:	4642      	mov	r2, r8
 8008be2:	464b      	mov	r3, r9
 8008be4:	4640      	mov	r0, r8
 8008be6:	4649      	mov	r1, r9
 8008be8:	f7f7 ffa8 	bl	8000b3c <__aeabi_dcmpun>
 8008bec:	b140      	cbz	r0, 8008c00 <_printf_float+0xf0>
 8008bee:	464b      	mov	r3, r9
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	bfbc      	itt	lt
 8008bf4:	232d      	movlt	r3, #45	; 0x2d
 8008bf6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008bfa:	487f      	ldr	r0, [pc, #508]	; (8008df8 <_printf_float+0x2e8>)
 8008bfc:	4b7f      	ldr	r3, [pc, #508]	; (8008dfc <_printf_float+0x2ec>)
 8008bfe:	e7d1      	b.n	8008ba4 <_printf_float+0x94>
 8008c00:	6863      	ldr	r3, [r4, #4]
 8008c02:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008c06:	9206      	str	r2, [sp, #24]
 8008c08:	1c5a      	adds	r2, r3, #1
 8008c0a:	d13f      	bne.n	8008c8c <_printf_float+0x17c>
 8008c0c:	2306      	movs	r3, #6
 8008c0e:	6063      	str	r3, [r4, #4]
 8008c10:	9b05      	ldr	r3, [sp, #20]
 8008c12:	6861      	ldr	r1, [r4, #4]
 8008c14:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008c18:	2300      	movs	r3, #0
 8008c1a:	9303      	str	r3, [sp, #12]
 8008c1c:	ab0a      	add	r3, sp, #40	; 0x28
 8008c1e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008c22:	ab09      	add	r3, sp, #36	; 0x24
 8008c24:	ec49 8b10 	vmov	d0, r8, r9
 8008c28:	9300      	str	r3, [sp, #0]
 8008c2a:	6022      	str	r2, [r4, #0]
 8008c2c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008c30:	4628      	mov	r0, r5
 8008c32:	f7ff fecd 	bl	80089d0 <__cvt>
 8008c36:	9b06      	ldr	r3, [sp, #24]
 8008c38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c3a:	2b47      	cmp	r3, #71	; 0x47
 8008c3c:	4680      	mov	r8, r0
 8008c3e:	d108      	bne.n	8008c52 <_printf_float+0x142>
 8008c40:	1cc8      	adds	r0, r1, #3
 8008c42:	db02      	blt.n	8008c4a <_printf_float+0x13a>
 8008c44:	6863      	ldr	r3, [r4, #4]
 8008c46:	4299      	cmp	r1, r3
 8008c48:	dd41      	ble.n	8008cce <_printf_float+0x1be>
 8008c4a:	f1ab 0b02 	sub.w	fp, fp, #2
 8008c4e:	fa5f fb8b 	uxtb.w	fp, fp
 8008c52:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008c56:	d820      	bhi.n	8008c9a <_printf_float+0x18a>
 8008c58:	3901      	subs	r1, #1
 8008c5a:	465a      	mov	r2, fp
 8008c5c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008c60:	9109      	str	r1, [sp, #36]	; 0x24
 8008c62:	f7ff ff17 	bl	8008a94 <__exponent>
 8008c66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c68:	1813      	adds	r3, r2, r0
 8008c6a:	2a01      	cmp	r2, #1
 8008c6c:	4681      	mov	r9, r0
 8008c6e:	6123      	str	r3, [r4, #16]
 8008c70:	dc02      	bgt.n	8008c78 <_printf_float+0x168>
 8008c72:	6822      	ldr	r2, [r4, #0]
 8008c74:	07d2      	lsls	r2, r2, #31
 8008c76:	d501      	bpl.n	8008c7c <_printf_float+0x16c>
 8008c78:	3301      	adds	r3, #1
 8008c7a:	6123      	str	r3, [r4, #16]
 8008c7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d09c      	beq.n	8008bbe <_printf_float+0xae>
 8008c84:	232d      	movs	r3, #45	; 0x2d
 8008c86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c8a:	e798      	b.n	8008bbe <_printf_float+0xae>
 8008c8c:	9a06      	ldr	r2, [sp, #24]
 8008c8e:	2a47      	cmp	r2, #71	; 0x47
 8008c90:	d1be      	bne.n	8008c10 <_printf_float+0x100>
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1bc      	bne.n	8008c10 <_printf_float+0x100>
 8008c96:	2301      	movs	r3, #1
 8008c98:	e7b9      	b.n	8008c0e <_printf_float+0xfe>
 8008c9a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008c9e:	d118      	bne.n	8008cd2 <_printf_float+0x1c2>
 8008ca0:	2900      	cmp	r1, #0
 8008ca2:	6863      	ldr	r3, [r4, #4]
 8008ca4:	dd0b      	ble.n	8008cbe <_printf_float+0x1ae>
 8008ca6:	6121      	str	r1, [r4, #16]
 8008ca8:	b913      	cbnz	r3, 8008cb0 <_printf_float+0x1a0>
 8008caa:	6822      	ldr	r2, [r4, #0]
 8008cac:	07d0      	lsls	r0, r2, #31
 8008cae:	d502      	bpl.n	8008cb6 <_printf_float+0x1a6>
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	440b      	add	r3, r1
 8008cb4:	6123      	str	r3, [r4, #16]
 8008cb6:	65a1      	str	r1, [r4, #88]	; 0x58
 8008cb8:	f04f 0900 	mov.w	r9, #0
 8008cbc:	e7de      	b.n	8008c7c <_printf_float+0x16c>
 8008cbe:	b913      	cbnz	r3, 8008cc6 <_printf_float+0x1b6>
 8008cc0:	6822      	ldr	r2, [r4, #0]
 8008cc2:	07d2      	lsls	r2, r2, #31
 8008cc4:	d501      	bpl.n	8008cca <_printf_float+0x1ba>
 8008cc6:	3302      	adds	r3, #2
 8008cc8:	e7f4      	b.n	8008cb4 <_printf_float+0x1a4>
 8008cca:	2301      	movs	r3, #1
 8008ccc:	e7f2      	b.n	8008cb4 <_printf_float+0x1a4>
 8008cce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008cd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cd4:	4299      	cmp	r1, r3
 8008cd6:	db05      	blt.n	8008ce4 <_printf_float+0x1d4>
 8008cd8:	6823      	ldr	r3, [r4, #0]
 8008cda:	6121      	str	r1, [r4, #16]
 8008cdc:	07d8      	lsls	r0, r3, #31
 8008cde:	d5ea      	bpl.n	8008cb6 <_printf_float+0x1a6>
 8008ce0:	1c4b      	adds	r3, r1, #1
 8008ce2:	e7e7      	b.n	8008cb4 <_printf_float+0x1a4>
 8008ce4:	2900      	cmp	r1, #0
 8008ce6:	bfd4      	ite	le
 8008ce8:	f1c1 0202 	rsble	r2, r1, #2
 8008cec:	2201      	movgt	r2, #1
 8008cee:	4413      	add	r3, r2
 8008cf0:	e7e0      	b.n	8008cb4 <_printf_float+0x1a4>
 8008cf2:	6823      	ldr	r3, [r4, #0]
 8008cf4:	055a      	lsls	r2, r3, #21
 8008cf6:	d407      	bmi.n	8008d08 <_printf_float+0x1f8>
 8008cf8:	6923      	ldr	r3, [r4, #16]
 8008cfa:	4642      	mov	r2, r8
 8008cfc:	4631      	mov	r1, r6
 8008cfe:	4628      	mov	r0, r5
 8008d00:	47b8      	blx	r7
 8008d02:	3001      	adds	r0, #1
 8008d04:	d12c      	bne.n	8008d60 <_printf_float+0x250>
 8008d06:	e764      	b.n	8008bd2 <_printf_float+0xc2>
 8008d08:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008d0c:	f240 80e0 	bls.w	8008ed0 <_printf_float+0x3c0>
 8008d10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d14:	2200      	movs	r2, #0
 8008d16:	2300      	movs	r3, #0
 8008d18:	f7f7 fede 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d1c:	2800      	cmp	r0, #0
 8008d1e:	d034      	beq.n	8008d8a <_printf_float+0x27a>
 8008d20:	4a37      	ldr	r2, [pc, #220]	; (8008e00 <_printf_float+0x2f0>)
 8008d22:	2301      	movs	r3, #1
 8008d24:	4631      	mov	r1, r6
 8008d26:	4628      	mov	r0, r5
 8008d28:	47b8      	blx	r7
 8008d2a:	3001      	adds	r0, #1
 8008d2c:	f43f af51 	beq.w	8008bd2 <_printf_float+0xc2>
 8008d30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d34:	429a      	cmp	r2, r3
 8008d36:	db02      	blt.n	8008d3e <_printf_float+0x22e>
 8008d38:	6823      	ldr	r3, [r4, #0]
 8008d3a:	07d8      	lsls	r0, r3, #31
 8008d3c:	d510      	bpl.n	8008d60 <_printf_float+0x250>
 8008d3e:	ee18 3a10 	vmov	r3, s16
 8008d42:	4652      	mov	r2, sl
 8008d44:	4631      	mov	r1, r6
 8008d46:	4628      	mov	r0, r5
 8008d48:	47b8      	blx	r7
 8008d4a:	3001      	adds	r0, #1
 8008d4c:	f43f af41 	beq.w	8008bd2 <_printf_float+0xc2>
 8008d50:	f04f 0800 	mov.w	r8, #0
 8008d54:	f104 091a 	add.w	r9, r4, #26
 8008d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d5a:	3b01      	subs	r3, #1
 8008d5c:	4543      	cmp	r3, r8
 8008d5e:	dc09      	bgt.n	8008d74 <_printf_float+0x264>
 8008d60:	6823      	ldr	r3, [r4, #0]
 8008d62:	079b      	lsls	r3, r3, #30
 8008d64:	f100 8105 	bmi.w	8008f72 <_printf_float+0x462>
 8008d68:	68e0      	ldr	r0, [r4, #12]
 8008d6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d6c:	4298      	cmp	r0, r3
 8008d6e:	bfb8      	it	lt
 8008d70:	4618      	movlt	r0, r3
 8008d72:	e730      	b.n	8008bd6 <_printf_float+0xc6>
 8008d74:	2301      	movs	r3, #1
 8008d76:	464a      	mov	r2, r9
 8008d78:	4631      	mov	r1, r6
 8008d7a:	4628      	mov	r0, r5
 8008d7c:	47b8      	blx	r7
 8008d7e:	3001      	adds	r0, #1
 8008d80:	f43f af27 	beq.w	8008bd2 <_printf_float+0xc2>
 8008d84:	f108 0801 	add.w	r8, r8, #1
 8008d88:	e7e6      	b.n	8008d58 <_printf_float+0x248>
 8008d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	dc39      	bgt.n	8008e04 <_printf_float+0x2f4>
 8008d90:	4a1b      	ldr	r2, [pc, #108]	; (8008e00 <_printf_float+0x2f0>)
 8008d92:	2301      	movs	r3, #1
 8008d94:	4631      	mov	r1, r6
 8008d96:	4628      	mov	r0, r5
 8008d98:	47b8      	blx	r7
 8008d9a:	3001      	adds	r0, #1
 8008d9c:	f43f af19 	beq.w	8008bd2 <_printf_float+0xc2>
 8008da0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008da4:	4313      	orrs	r3, r2
 8008da6:	d102      	bne.n	8008dae <_printf_float+0x29e>
 8008da8:	6823      	ldr	r3, [r4, #0]
 8008daa:	07d9      	lsls	r1, r3, #31
 8008dac:	d5d8      	bpl.n	8008d60 <_printf_float+0x250>
 8008dae:	ee18 3a10 	vmov	r3, s16
 8008db2:	4652      	mov	r2, sl
 8008db4:	4631      	mov	r1, r6
 8008db6:	4628      	mov	r0, r5
 8008db8:	47b8      	blx	r7
 8008dba:	3001      	adds	r0, #1
 8008dbc:	f43f af09 	beq.w	8008bd2 <_printf_float+0xc2>
 8008dc0:	f04f 0900 	mov.w	r9, #0
 8008dc4:	f104 0a1a 	add.w	sl, r4, #26
 8008dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dca:	425b      	negs	r3, r3
 8008dcc:	454b      	cmp	r3, r9
 8008dce:	dc01      	bgt.n	8008dd4 <_printf_float+0x2c4>
 8008dd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dd2:	e792      	b.n	8008cfa <_printf_float+0x1ea>
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	4652      	mov	r2, sl
 8008dd8:	4631      	mov	r1, r6
 8008dda:	4628      	mov	r0, r5
 8008ddc:	47b8      	blx	r7
 8008dde:	3001      	adds	r0, #1
 8008de0:	f43f aef7 	beq.w	8008bd2 <_printf_float+0xc2>
 8008de4:	f109 0901 	add.w	r9, r9, #1
 8008de8:	e7ee      	b.n	8008dc8 <_printf_float+0x2b8>
 8008dea:	bf00      	nop
 8008dec:	7fefffff 	.word	0x7fefffff
 8008df0:	0800c71c 	.word	0x0800c71c
 8008df4:	0800c720 	.word	0x0800c720
 8008df8:	0800c728 	.word	0x0800c728
 8008dfc:	0800c724 	.word	0x0800c724
 8008e00:	0800c72c 	.word	0x0800c72c
 8008e04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	bfa8      	it	ge
 8008e0c:	461a      	movge	r2, r3
 8008e0e:	2a00      	cmp	r2, #0
 8008e10:	4691      	mov	r9, r2
 8008e12:	dc37      	bgt.n	8008e84 <_printf_float+0x374>
 8008e14:	f04f 0b00 	mov.w	fp, #0
 8008e18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e1c:	f104 021a 	add.w	r2, r4, #26
 8008e20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e22:	9305      	str	r3, [sp, #20]
 8008e24:	eba3 0309 	sub.w	r3, r3, r9
 8008e28:	455b      	cmp	r3, fp
 8008e2a:	dc33      	bgt.n	8008e94 <_printf_float+0x384>
 8008e2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e30:	429a      	cmp	r2, r3
 8008e32:	db3b      	blt.n	8008eac <_printf_float+0x39c>
 8008e34:	6823      	ldr	r3, [r4, #0]
 8008e36:	07da      	lsls	r2, r3, #31
 8008e38:	d438      	bmi.n	8008eac <_printf_float+0x39c>
 8008e3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e3c:	9b05      	ldr	r3, [sp, #20]
 8008e3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e40:	1ad3      	subs	r3, r2, r3
 8008e42:	eba2 0901 	sub.w	r9, r2, r1
 8008e46:	4599      	cmp	r9, r3
 8008e48:	bfa8      	it	ge
 8008e4a:	4699      	movge	r9, r3
 8008e4c:	f1b9 0f00 	cmp.w	r9, #0
 8008e50:	dc35      	bgt.n	8008ebe <_printf_float+0x3ae>
 8008e52:	f04f 0800 	mov.w	r8, #0
 8008e56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e5a:	f104 0a1a 	add.w	sl, r4, #26
 8008e5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e62:	1a9b      	subs	r3, r3, r2
 8008e64:	eba3 0309 	sub.w	r3, r3, r9
 8008e68:	4543      	cmp	r3, r8
 8008e6a:	f77f af79 	ble.w	8008d60 <_printf_float+0x250>
 8008e6e:	2301      	movs	r3, #1
 8008e70:	4652      	mov	r2, sl
 8008e72:	4631      	mov	r1, r6
 8008e74:	4628      	mov	r0, r5
 8008e76:	47b8      	blx	r7
 8008e78:	3001      	adds	r0, #1
 8008e7a:	f43f aeaa 	beq.w	8008bd2 <_printf_float+0xc2>
 8008e7e:	f108 0801 	add.w	r8, r8, #1
 8008e82:	e7ec      	b.n	8008e5e <_printf_float+0x34e>
 8008e84:	4613      	mov	r3, r2
 8008e86:	4631      	mov	r1, r6
 8008e88:	4642      	mov	r2, r8
 8008e8a:	4628      	mov	r0, r5
 8008e8c:	47b8      	blx	r7
 8008e8e:	3001      	adds	r0, #1
 8008e90:	d1c0      	bne.n	8008e14 <_printf_float+0x304>
 8008e92:	e69e      	b.n	8008bd2 <_printf_float+0xc2>
 8008e94:	2301      	movs	r3, #1
 8008e96:	4631      	mov	r1, r6
 8008e98:	4628      	mov	r0, r5
 8008e9a:	9205      	str	r2, [sp, #20]
 8008e9c:	47b8      	blx	r7
 8008e9e:	3001      	adds	r0, #1
 8008ea0:	f43f ae97 	beq.w	8008bd2 <_printf_float+0xc2>
 8008ea4:	9a05      	ldr	r2, [sp, #20]
 8008ea6:	f10b 0b01 	add.w	fp, fp, #1
 8008eaa:	e7b9      	b.n	8008e20 <_printf_float+0x310>
 8008eac:	ee18 3a10 	vmov	r3, s16
 8008eb0:	4652      	mov	r2, sl
 8008eb2:	4631      	mov	r1, r6
 8008eb4:	4628      	mov	r0, r5
 8008eb6:	47b8      	blx	r7
 8008eb8:	3001      	adds	r0, #1
 8008eba:	d1be      	bne.n	8008e3a <_printf_float+0x32a>
 8008ebc:	e689      	b.n	8008bd2 <_printf_float+0xc2>
 8008ebe:	9a05      	ldr	r2, [sp, #20]
 8008ec0:	464b      	mov	r3, r9
 8008ec2:	4442      	add	r2, r8
 8008ec4:	4631      	mov	r1, r6
 8008ec6:	4628      	mov	r0, r5
 8008ec8:	47b8      	blx	r7
 8008eca:	3001      	adds	r0, #1
 8008ecc:	d1c1      	bne.n	8008e52 <_printf_float+0x342>
 8008ece:	e680      	b.n	8008bd2 <_printf_float+0xc2>
 8008ed0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ed2:	2a01      	cmp	r2, #1
 8008ed4:	dc01      	bgt.n	8008eda <_printf_float+0x3ca>
 8008ed6:	07db      	lsls	r3, r3, #31
 8008ed8:	d538      	bpl.n	8008f4c <_printf_float+0x43c>
 8008eda:	2301      	movs	r3, #1
 8008edc:	4642      	mov	r2, r8
 8008ede:	4631      	mov	r1, r6
 8008ee0:	4628      	mov	r0, r5
 8008ee2:	47b8      	blx	r7
 8008ee4:	3001      	adds	r0, #1
 8008ee6:	f43f ae74 	beq.w	8008bd2 <_printf_float+0xc2>
 8008eea:	ee18 3a10 	vmov	r3, s16
 8008eee:	4652      	mov	r2, sl
 8008ef0:	4631      	mov	r1, r6
 8008ef2:	4628      	mov	r0, r5
 8008ef4:	47b8      	blx	r7
 8008ef6:	3001      	adds	r0, #1
 8008ef8:	f43f ae6b 	beq.w	8008bd2 <_printf_float+0xc2>
 8008efc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008f00:	2200      	movs	r2, #0
 8008f02:	2300      	movs	r3, #0
 8008f04:	f7f7 fde8 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f08:	b9d8      	cbnz	r0, 8008f42 <_printf_float+0x432>
 8008f0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f0c:	f108 0201 	add.w	r2, r8, #1
 8008f10:	3b01      	subs	r3, #1
 8008f12:	4631      	mov	r1, r6
 8008f14:	4628      	mov	r0, r5
 8008f16:	47b8      	blx	r7
 8008f18:	3001      	adds	r0, #1
 8008f1a:	d10e      	bne.n	8008f3a <_printf_float+0x42a>
 8008f1c:	e659      	b.n	8008bd2 <_printf_float+0xc2>
 8008f1e:	2301      	movs	r3, #1
 8008f20:	4652      	mov	r2, sl
 8008f22:	4631      	mov	r1, r6
 8008f24:	4628      	mov	r0, r5
 8008f26:	47b8      	blx	r7
 8008f28:	3001      	adds	r0, #1
 8008f2a:	f43f ae52 	beq.w	8008bd2 <_printf_float+0xc2>
 8008f2e:	f108 0801 	add.w	r8, r8, #1
 8008f32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f34:	3b01      	subs	r3, #1
 8008f36:	4543      	cmp	r3, r8
 8008f38:	dcf1      	bgt.n	8008f1e <_printf_float+0x40e>
 8008f3a:	464b      	mov	r3, r9
 8008f3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008f40:	e6dc      	b.n	8008cfc <_printf_float+0x1ec>
 8008f42:	f04f 0800 	mov.w	r8, #0
 8008f46:	f104 0a1a 	add.w	sl, r4, #26
 8008f4a:	e7f2      	b.n	8008f32 <_printf_float+0x422>
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	4642      	mov	r2, r8
 8008f50:	e7df      	b.n	8008f12 <_printf_float+0x402>
 8008f52:	2301      	movs	r3, #1
 8008f54:	464a      	mov	r2, r9
 8008f56:	4631      	mov	r1, r6
 8008f58:	4628      	mov	r0, r5
 8008f5a:	47b8      	blx	r7
 8008f5c:	3001      	adds	r0, #1
 8008f5e:	f43f ae38 	beq.w	8008bd2 <_printf_float+0xc2>
 8008f62:	f108 0801 	add.w	r8, r8, #1
 8008f66:	68e3      	ldr	r3, [r4, #12]
 8008f68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f6a:	1a5b      	subs	r3, r3, r1
 8008f6c:	4543      	cmp	r3, r8
 8008f6e:	dcf0      	bgt.n	8008f52 <_printf_float+0x442>
 8008f70:	e6fa      	b.n	8008d68 <_printf_float+0x258>
 8008f72:	f04f 0800 	mov.w	r8, #0
 8008f76:	f104 0919 	add.w	r9, r4, #25
 8008f7a:	e7f4      	b.n	8008f66 <_printf_float+0x456>

08008f7c <_printf_common>:
 8008f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f80:	4616      	mov	r6, r2
 8008f82:	4699      	mov	r9, r3
 8008f84:	688a      	ldr	r2, [r1, #8]
 8008f86:	690b      	ldr	r3, [r1, #16]
 8008f88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	bfb8      	it	lt
 8008f90:	4613      	movlt	r3, r2
 8008f92:	6033      	str	r3, [r6, #0]
 8008f94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f98:	4607      	mov	r7, r0
 8008f9a:	460c      	mov	r4, r1
 8008f9c:	b10a      	cbz	r2, 8008fa2 <_printf_common+0x26>
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	6033      	str	r3, [r6, #0]
 8008fa2:	6823      	ldr	r3, [r4, #0]
 8008fa4:	0699      	lsls	r1, r3, #26
 8008fa6:	bf42      	ittt	mi
 8008fa8:	6833      	ldrmi	r3, [r6, #0]
 8008faa:	3302      	addmi	r3, #2
 8008fac:	6033      	strmi	r3, [r6, #0]
 8008fae:	6825      	ldr	r5, [r4, #0]
 8008fb0:	f015 0506 	ands.w	r5, r5, #6
 8008fb4:	d106      	bne.n	8008fc4 <_printf_common+0x48>
 8008fb6:	f104 0a19 	add.w	sl, r4, #25
 8008fba:	68e3      	ldr	r3, [r4, #12]
 8008fbc:	6832      	ldr	r2, [r6, #0]
 8008fbe:	1a9b      	subs	r3, r3, r2
 8008fc0:	42ab      	cmp	r3, r5
 8008fc2:	dc26      	bgt.n	8009012 <_printf_common+0x96>
 8008fc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008fc8:	1e13      	subs	r3, r2, #0
 8008fca:	6822      	ldr	r2, [r4, #0]
 8008fcc:	bf18      	it	ne
 8008fce:	2301      	movne	r3, #1
 8008fd0:	0692      	lsls	r2, r2, #26
 8008fd2:	d42b      	bmi.n	800902c <_printf_common+0xb0>
 8008fd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008fd8:	4649      	mov	r1, r9
 8008fda:	4638      	mov	r0, r7
 8008fdc:	47c0      	blx	r8
 8008fde:	3001      	adds	r0, #1
 8008fe0:	d01e      	beq.n	8009020 <_printf_common+0xa4>
 8008fe2:	6823      	ldr	r3, [r4, #0]
 8008fe4:	68e5      	ldr	r5, [r4, #12]
 8008fe6:	6832      	ldr	r2, [r6, #0]
 8008fe8:	f003 0306 	and.w	r3, r3, #6
 8008fec:	2b04      	cmp	r3, #4
 8008fee:	bf08      	it	eq
 8008ff0:	1aad      	subeq	r5, r5, r2
 8008ff2:	68a3      	ldr	r3, [r4, #8]
 8008ff4:	6922      	ldr	r2, [r4, #16]
 8008ff6:	bf0c      	ite	eq
 8008ff8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ffc:	2500      	movne	r5, #0
 8008ffe:	4293      	cmp	r3, r2
 8009000:	bfc4      	itt	gt
 8009002:	1a9b      	subgt	r3, r3, r2
 8009004:	18ed      	addgt	r5, r5, r3
 8009006:	2600      	movs	r6, #0
 8009008:	341a      	adds	r4, #26
 800900a:	42b5      	cmp	r5, r6
 800900c:	d11a      	bne.n	8009044 <_printf_common+0xc8>
 800900e:	2000      	movs	r0, #0
 8009010:	e008      	b.n	8009024 <_printf_common+0xa8>
 8009012:	2301      	movs	r3, #1
 8009014:	4652      	mov	r2, sl
 8009016:	4649      	mov	r1, r9
 8009018:	4638      	mov	r0, r7
 800901a:	47c0      	blx	r8
 800901c:	3001      	adds	r0, #1
 800901e:	d103      	bne.n	8009028 <_printf_common+0xac>
 8009020:	f04f 30ff 	mov.w	r0, #4294967295
 8009024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009028:	3501      	adds	r5, #1
 800902a:	e7c6      	b.n	8008fba <_printf_common+0x3e>
 800902c:	18e1      	adds	r1, r4, r3
 800902e:	1c5a      	adds	r2, r3, #1
 8009030:	2030      	movs	r0, #48	; 0x30
 8009032:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009036:	4422      	add	r2, r4
 8009038:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800903c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009040:	3302      	adds	r3, #2
 8009042:	e7c7      	b.n	8008fd4 <_printf_common+0x58>
 8009044:	2301      	movs	r3, #1
 8009046:	4622      	mov	r2, r4
 8009048:	4649      	mov	r1, r9
 800904a:	4638      	mov	r0, r7
 800904c:	47c0      	blx	r8
 800904e:	3001      	adds	r0, #1
 8009050:	d0e6      	beq.n	8009020 <_printf_common+0xa4>
 8009052:	3601      	adds	r6, #1
 8009054:	e7d9      	b.n	800900a <_printf_common+0x8e>
	...

08009058 <_printf_i>:
 8009058:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800905c:	460c      	mov	r4, r1
 800905e:	4691      	mov	r9, r2
 8009060:	7e27      	ldrb	r7, [r4, #24]
 8009062:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009064:	2f78      	cmp	r7, #120	; 0x78
 8009066:	4680      	mov	r8, r0
 8009068:	469a      	mov	sl, r3
 800906a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800906e:	d807      	bhi.n	8009080 <_printf_i+0x28>
 8009070:	2f62      	cmp	r7, #98	; 0x62
 8009072:	d80a      	bhi.n	800908a <_printf_i+0x32>
 8009074:	2f00      	cmp	r7, #0
 8009076:	f000 80d8 	beq.w	800922a <_printf_i+0x1d2>
 800907a:	2f58      	cmp	r7, #88	; 0x58
 800907c:	f000 80a3 	beq.w	80091c6 <_printf_i+0x16e>
 8009080:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009084:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009088:	e03a      	b.n	8009100 <_printf_i+0xa8>
 800908a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800908e:	2b15      	cmp	r3, #21
 8009090:	d8f6      	bhi.n	8009080 <_printf_i+0x28>
 8009092:	a001      	add	r0, pc, #4	; (adr r0, 8009098 <_printf_i+0x40>)
 8009094:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009098:	080090f1 	.word	0x080090f1
 800909c:	08009105 	.word	0x08009105
 80090a0:	08009081 	.word	0x08009081
 80090a4:	08009081 	.word	0x08009081
 80090a8:	08009081 	.word	0x08009081
 80090ac:	08009081 	.word	0x08009081
 80090b0:	08009105 	.word	0x08009105
 80090b4:	08009081 	.word	0x08009081
 80090b8:	08009081 	.word	0x08009081
 80090bc:	08009081 	.word	0x08009081
 80090c0:	08009081 	.word	0x08009081
 80090c4:	08009211 	.word	0x08009211
 80090c8:	08009135 	.word	0x08009135
 80090cc:	080091f3 	.word	0x080091f3
 80090d0:	08009081 	.word	0x08009081
 80090d4:	08009081 	.word	0x08009081
 80090d8:	08009233 	.word	0x08009233
 80090dc:	08009081 	.word	0x08009081
 80090e0:	08009135 	.word	0x08009135
 80090e4:	08009081 	.word	0x08009081
 80090e8:	08009081 	.word	0x08009081
 80090ec:	080091fb 	.word	0x080091fb
 80090f0:	680b      	ldr	r3, [r1, #0]
 80090f2:	1d1a      	adds	r2, r3, #4
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	600a      	str	r2, [r1, #0]
 80090f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80090fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009100:	2301      	movs	r3, #1
 8009102:	e0a3      	b.n	800924c <_printf_i+0x1f4>
 8009104:	6825      	ldr	r5, [r4, #0]
 8009106:	6808      	ldr	r0, [r1, #0]
 8009108:	062e      	lsls	r6, r5, #24
 800910a:	f100 0304 	add.w	r3, r0, #4
 800910e:	d50a      	bpl.n	8009126 <_printf_i+0xce>
 8009110:	6805      	ldr	r5, [r0, #0]
 8009112:	600b      	str	r3, [r1, #0]
 8009114:	2d00      	cmp	r5, #0
 8009116:	da03      	bge.n	8009120 <_printf_i+0xc8>
 8009118:	232d      	movs	r3, #45	; 0x2d
 800911a:	426d      	negs	r5, r5
 800911c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009120:	485e      	ldr	r0, [pc, #376]	; (800929c <_printf_i+0x244>)
 8009122:	230a      	movs	r3, #10
 8009124:	e019      	b.n	800915a <_printf_i+0x102>
 8009126:	f015 0f40 	tst.w	r5, #64	; 0x40
 800912a:	6805      	ldr	r5, [r0, #0]
 800912c:	600b      	str	r3, [r1, #0]
 800912e:	bf18      	it	ne
 8009130:	b22d      	sxthne	r5, r5
 8009132:	e7ef      	b.n	8009114 <_printf_i+0xbc>
 8009134:	680b      	ldr	r3, [r1, #0]
 8009136:	6825      	ldr	r5, [r4, #0]
 8009138:	1d18      	adds	r0, r3, #4
 800913a:	6008      	str	r0, [r1, #0]
 800913c:	0628      	lsls	r0, r5, #24
 800913e:	d501      	bpl.n	8009144 <_printf_i+0xec>
 8009140:	681d      	ldr	r5, [r3, #0]
 8009142:	e002      	b.n	800914a <_printf_i+0xf2>
 8009144:	0669      	lsls	r1, r5, #25
 8009146:	d5fb      	bpl.n	8009140 <_printf_i+0xe8>
 8009148:	881d      	ldrh	r5, [r3, #0]
 800914a:	4854      	ldr	r0, [pc, #336]	; (800929c <_printf_i+0x244>)
 800914c:	2f6f      	cmp	r7, #111	; 0x6f
 800914e:	bf0c      	ite	eq
 8009150:	2308      	moveq	r3, #8
 8009152:	230a      	movne	r3, #10
 8009154:	2100      	movs	r1, #0
 8009156:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800915a:	6866      	ldr	r6, [r4, #4]
 800915c:	60a6      	str	r6, [r4, #8]
 800915e:	2e00      	cmp	r6, #0
 8009160:	bfa2      	ittt	ge
 8009162:	6821      	ldrge	r1, [r4, #0]
 8009164:	f021 0104 	bicge.w	r1, r1, #4
 8009168:	6021      	strge	r1, [r4, #0]
 800916a:	b90d      	cbnz	r5, 8009170 <_printf_i+0x118>
 800916c:	2e00      	cmp	r6, #0
 800916e:	d04d      	beq.n	800920c <_printf_i+0x1b4>
 8009170:	4616      	mov	r6, r2
 8009172:	fbb5 f1f3 	udiv	r1, r5, r3
 8009176:	fb03 5711 	mls	r7, r3, r1, r5
 800917a:	5dc7      	ldrb	r7, [r0, r7]
 800917c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009180:	462f      	mov	r7, r5
 8009182:	42bb      	cmp	r3, r7
 8009184:	460d      	mov	r5, r1
 8009186:	d9f4      	bls.n	8009172 <_printf_i+0x11a>
 8009188:	2b08      	cmp	r3, #8
 800918a:	d10b      	bne.n	80091a4 <_printf_i+0x14c>
 800918c:	6823      	ldr	r3, [r4, #0]
 800918e:	07df      	lsls	r7, r3, #31
 8009190:	d508      	bpl.n	80091a4 <_printf_i+0x14c>
 8009192:	6923      	ldr	r3, [r4, #16]
 8009194:	6861      	ldr	r1, [r4, #4]
 8009196:	4299      	cmp	r1, r3
 8009198:	bfde      	ittt	le
 800919a:	2330      	movle	r3, #48	; 0x30
 800919c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80091a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80091a4:	1b92      	subs	r2, r2, r6
 80091a6:	6122      	str	r2, [r4, #16]
 80091a8:	f8cd a000 	str.w	sl, [sp]
 80091ac:	464b      	mov	r3, r9
 80091ae:	aa03      	add	r2, sp, #12
 80091b0:	4621      	mov	r1, r4
 80091b2:	4640      	mov	r0, r8
 80091b4:	f7ff fee2 	bl	8008f7c <_printf_common>
 80091b8:	3001      	adds	r0, #1
 80091ba:	d14c      	bne.n	8009256 <_printf_i+0x1fe>
 80091bc:	f04f 30ff 	mov.w	r0, #4294967295
 80091c0:	b004      	add	sp, #16
 80091c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091c6:	4835      	ldr	r0, [pc, #212]	; (800929c <_printf_i+0x244>)
 80091c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80091cc:	6823      	ldr	r3, [r4, #0]
 80091ce:	680e      	ldr	r6, [r1, #0]
 80091d0:	061f      	lsls	r7, r3, #24
 80091d2:	f856 5b04 	ldr.w	r5, [r6], #4
 80091d6:	600e      	str	r6, [r1, #0]
 80091d8:	d514      	bpl.n	8009204 <_printf_i+0x1ac>
 80091da:	07d9      	lsls	r1, r3, #31
 80091dc:	bf44      	itt	mi
 80091de:	f043 0320 	orrmi.w	r3, r3, #32
 80091e2:	6023      	strmi	r3, [r4, #0]
 80091e4:	b91d      	cbnz	r5, 80091ee <_printf_i+0x196>
 80091e6:	6823      	ldr	r3, [r4, #0]
 80091e8:	f023 0320 	bic.w	r3, r3, #32
 80091ec:	6023      	str	r3, [r4, #0]
 80091ee:	2310      	movs	r3, #16
 80091f0:	e7b0      	b.n	8009154 <_printf_i+0xfc>
 80091f2:	6823      	ldr	r3, [r4, #0]
 80091f4:	f043 0320 	orr.w	r3, r3, #32
 80091f8:	6023      	str	r3, [r4, #0]
 80091fa:	2378      	movs	r3, #120	; 0x78
 80091fc:	4828      	ldr	r0, [pc, #160]	; (80092a0 <_printf_i+0x248>)
 80091fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009202:	e7e3      	b.n	80091cc <_printf_i+0x174>
 8009204:	065e      	lsls	r6, r3, #25
 8009206:	bf48      	it	mi
 8009208:	b2ad      	uxthmi	r5, r5
 800920a:	e7e6      	b.n	80091da <_printf_i+0x182>
 800920c:	4616      	mov	r6, r2
 800920e:	e7bb      	b.n	8009188 <_printf_i+0x130>
 8009210:	680b      	ldr	r3, [r1, #0]
 8009212:	6826      	ldr	r6, [r4, #0]
 8009214:	6960      	ldr	r0, [r4, #20]
 8009216:	1d1d      	adds	r5, r3, #4
 8009218:	600d      	str	r5, [r1, #0]
 800921a:	0635      	lsls	r5, r6, #24
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	d501      	bpl.n	8009224 <_printf_i+0x1cc>
 8009220:	6018      	str	r0, [r3, #0]
 8009222:	e002      	b.n	800922a <_printf_i+0x1d2>
 8009224:	0671      	lsls	r1, r6, #25
 8009226:	d5fb      	bpl.n	8009220 <_printf_i+0x1c8>
 8009228:	8018      	strh	r0, [r3, #0]
 800922a:	2300      	movs	r3, #0
 800922c:	6123      	str	r3, [r4, #16]
 800922e:	4616      	mov	r6, r2
 8009230:	e7ba      	b.n	80091a8 <_printf_i+0x150>
 8009232:	680b      	ldr	r3, [r1, #0]
 8009234:	1d1a      	adds	r2, r3, #4
 8009236:	600a      	str	r2, [r1, #0]
 8009238:	681e      	ldr	r6, [r3, #0]
 800923a:	6862      	ldr	r2, [r4, #4]
 800923c:	2100      	movs	r1, #0
 800923e:	4630      	mov	r0, r6
 8009240:	f7f6 ffd6 	bl	80001f0 <memchr>
 8009244:	b108      	cbz	r0, 800924a <_printf_i+0x1f2>
 8009246:	1b80      	subs	r0, r0, r6
 8009248:	6060      	str	r0, [r4, #4]
 800924a:	6863      	ldr	r3, [r4, #4]
 800924c:	6123      	str	r3, [r4, #16]
 800924e:	2300      	movs	r3, #0
 8009250:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009254:	e7a8      	b.n	80091a8 <_printf_i+0x150>
 8009256:	6923      	ldr	r3, [r4, #16]
 8009258:	4632      	mov	r2, r6
 800925a:	4649      	mov	r1, r9
 800925c:	4640      	mov	r0, r8
 800925e:	47d0      	blx	sl
 8009260:	3001      	adds	r0, #1
 8009262:	d0ab      	beq.n	80091bc <_printf_i+0x164>
 8009264:	6823      	ldr	r3, [r4, #0]
 8009266:	079b      	lsls	r3, r3, #30
 8009268:	d413      	bmi.n	8009292 <_printf_i+0x23a>
 800926a:	68e0      	ldr	r0, [r4, #12]
 800926c:	9b03      	ldr	r3, [sp, #12]
 800926e:	4298      	cmp	r0, r3
 8009270:	bfb8      	it	lt
 8009272:	4618      	movlt	r0, r3
 8009274:	e7a4      	b.n	80091c0 <_printf_i+0x168>
 8009276:	2301      	movs	r3, #1
 8009278:	4632      	mov	r2, r6
 800927a:	4649      	mov	r1, r9
 800927c:	4640      	mov	r0, r8
 800927e:	47d0      	blx	sl
 8009280:	3001      	adds	r0, #1
 8009282:	d09b      	beq.n	80091bc <_printf_i+0x164>
 8009284:	3501      	adds	r5, #1
 8009286:	68e3      	ldr	r3, [r4, #12]
 8009288:	9903      	ldr	r1, [sp, #12]
 800928a:	1a5b      	subs	r3, r3, r1
 800928c:	42ab      	cmp	r3, r5
 800928e:	dcf2      	bgt.n	8009276 <_printf_i+0x21e>
 8009290:	e7eb      	b.n	800926a <_printf_i+0x212>
 8009292:	2500      	movs	r5, #0
 8009294:	f104 0619 	add.w	r6, r4, #25
 8009298:	e7f5      	b.n	8009286 <_printf_i+0x22e>
 800929a:	bf00      	nop
 800929c:	0800c72e 	.word	0x0800c72e
 80092a0:	0800c73f 	.word	0x0800c73f

080092a4 <siprintf>:
 80092a4:	b40e      	push	{r1, r2, r3}
 80092a6:	b500      	push	{lr}
 80092a8:	b09c      	sub	sp, #112	; 0x70
 80092aa:	ab1d      	add	r3, sp, #116	; 0x74
 80092ac:	9002      	str	r0, [sp, #8]
 80092ae:	9006      	str	r0, [sp, #24]
 80092b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80092b4:	4809      	ldr	r0, [pc, #36]	; (80092dc <siprintf+0x38>)
 80092b6:	9107      	str	r1, [sp, #28]
 80092b8:	9104      	str	r1, [sp, #16]
 80092ba:	4909      	ldr	r1, [pc, #36]	; (80092e0 <siprintf+0x3c>)
 80092bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80092c0:	9105      	str	r1, [sp, #20]
 80092c2:	6800      	ldr	r0, [r0, #0]
 80092c4:	9301      	str	r3, [sp, #4]
 80092c6:	a902      	add	r1, sp, #8
 80092c8:	f001 fb34 	bl	800a934 <_svfiprintf_r>
 80092cc:	9b02      	ldr	r3, [sp, #8]
 80092ce:	2200      	movs	r2, #0
 80092d0:	701a      	strb	r2, [r3, #0]
 80092d2:	b01c      	add	sp, #112	; 0x70
 80092d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80092d8:	b003      	add	sp, #12
 80092da:	4770      	bx	lr
 80092dc:	20000180 	.word	0x20000180
 80092e0:	ffff0208 	.word	0xffff0208

080092e4 <quorem>:
 80092e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092e8:	6903      	ldr	r3, [r0, #16]
 80092ea:	690c      	ldr	r4, [r1, #16]
 80092ec:	42a3      	cmp	r3, r4
 80092ee:	4607      	mov	r7, r0
 80092f0:	f2c0 8081 	blt.w	80093f6 <quorem+0x112>
 80092f4:	3c01      	subs	r4, #1
 80092f6:	f101 0814 	add.w	r8, r1, #20
 80092fa:	f100 0514 	add.w	r5, r0, #20
 80092fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009302:	9301      	str	r3, [sp, #4]
 8009304:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009308:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800930c:	3301      	adds	r3, #1
 800930e:	429a      	cmp	r2, r3
 8009310:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009314:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009318:	fbb2 f6f3 	udiv	r6, r2, r3
 800931c:	d331      	bcc.n	8009382 <quorem+0x9e>
 800931e:	f04f 0e00 	mov.w	lr, #0
 8009322:	4640      	mov	r0, r8
 8009324:	46ac      	mov	ip, r5
 8009326:	46f2      	mov	sl, lr
 8009328:	f850 2b04 	ldr.w	r2, [r0], #4
 800932c:	b293      	uxth	r3, r2
 800932e:	fb06 e303 	mla	r3, r6, r3, lr
 8009332:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009336:	b29b      	uxth	r3, r3
 8009338:	ebaa 0303 	sub.w	r3, sl, r3
 800933c:	0c12      	lsrs	r2, r2, #16
 800933e:	f8dc a000 	ldr.w	sl, [ip]
 8009342:	fb06 e202 	mla	r2, r6, r2, lr
 8009346:	fa13 f38a 	uxtah	r3, r3, sl
 800934a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800934e:	fa1f fa82 	uxth.w	sl, r2
 8009352:	f8dc 2000 	ldr.w	r2, [ip]
 8009356:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800935a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800935e:	b29b      	uxth	r3, r3
 8009360:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009364:	4581      	cmp	r9, r0
 8009366:	f84c 3b04 	str.w	r3, [ip], #4
 800936a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800936e:	d2db      	bcs.n	8009328 <quorem+0x44>
 8009370:	f855 300b 	ldr.w	r3, [r5, fp]
 8009374:	b92b      	cbnz	r3, 8009382 <quorem+0x9e>
 8009376:	9b01      	ldr	r3, [sp, #4]
 8009378:	3b04      	subs	r3, #4
 800937a:	429d      	cmp	r5, r3
 800937c:	461a      	mov	r2, r3
 800937e:	d32e      	bcc.n	80093de <quorem+0xfa>
 8009380:	613c      	str	r4, [r7, #16]
 8009382:	4638      	mov	r0, r7
 8009384:	f001 f8c0 	bl	800a508 <__mcmp>
 8009388:	2800      	cmp	r0, #0
 800938a:	db24      	blt.n	80093d6 <quorem+0xf2>
 800938c:	3601      	adds	r6, #1
 800938e:	4628      	mov	r0, r5
 8009390:	f04f 0c00 	mov.w	ip, #0
 8009394:	f858 2b04 	ldr.w	r2, [r8], #4
 8009398:	f8d0 e000 	ldr.w	lr, [r0]
 800939c:	b293      	uxth	r3, r2
 800939e:	ebac 0303 	sub.w	r3, ip, r3
 80093a2:	0c12      	lsrs	r2, r2, #16
 80093a4:	fa13 f38e 	uxtah	r3, r3, lr
 80093a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80093ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093b6:	45c1      	cmp	r9, r8
 80093b8:	f840 3b04 	str.w	r3, [r0], #4
 80093bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80093c0:	d2e8      	bcs.n	8009394 <quorem+0xb0>
 80093c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093ca:	b922      	cbnz	r2, 80093d6 <quorem+0xf2>
 80093cc:	3b04      	subs	r3, #4
 80093ce:	429d      	cmp	r5, r3
 80093d0:	461a      	mov	r2, r3
 80093d2:	d30a      	bcc.n	80093ea <quorem+0x106>
 80093d4:	613c      	str	r4, [r7, #16]
 80093d6:	4630      	mov	r0, r6
 80093d8:	b003      	add	sp, #12
 80093da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093de:	6812      	ldr	r2, [r2, #0]
 80093e0:	3b04      	subs	r3, #4
 80093e2:	2a00      	cmp	r2, #0
 80093e4:	d1cc      	bne.n	8009380 <quorem+0x9c>
 80093e6:	3c01      	subs	r4, #1
 80093e8:	e7c7      	b.n	800937a <quorem+0x96>
 80093ea:	6812      	ldr	r2, [r2, #0]
 80093ec:	3b04      	subs	r3, #4
 80093ee:	2a00      	cmp	r2, #0
 80093f0:	d1f0      	bne.n	80093d4 <quorem+0xf0>
 80093f2:	3c01      	subs	r4, #1
 80093f4:	e7eb      	b.n	80093ce <quorem+0xea>
 80093f6:	2000      	movs	r0, #0
 80093f8:	e7ee      	b.n	80093d8 <quorem+0xf4>
 80093fa:	0000      	movs	r0, r0
 80093fc:	0000      	movs	r0, r0
	...

08009400 <_dtoa_r>:
 8009400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009404:	ed2d 8b02 	vpush	{d8}
 8009408:	ec57 6b10 	vmov	r6, r7, d0
 800940c:	b095      	sub	sp, #84	; 0x54
 800940e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009410:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009414:	9105      	str	r1, [sp, #20]
 8009416:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800941a:	4604      	mov	r4, r0
 800941c:	9209      	str	r2, [sp, #36]	; 0x24
 800941e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009420:	b975      	cbnz	r5, 8009440 <_dtoa_r+0x40>
 8009422:	2010      	movs	r0, #16
 8009424:	f000 fddc 	bl	8009fe0 <malloc>
 8009428:	4602      	mov	r2, r0
 800942a:	6260      	str	r0, [r4, #36]	; 0x24
 800942c:	b920      	cbnz	r0, 8009438 <_dtoa_r+0x38>
 800942e:	4bb2      	ldr	r3, [pc, #712]	; (80096f8 <_dtoa_r+0x2f8>)
 8009430:	21ea      	movs	r1, #234	; 0xea
 8009432:	48b2      	ldr	r0, [pc, #712]	; (80096fc <_dtoa_r+0x2fc>)
 8009434:	f001 fb8e 	bl	800ab54 <__assert_func>
 8009438:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800943c:	6005      	str	r5, [r0, #0]
 800943e:	60c5      	str	r5, [r0, #12]
 8009440:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009442:	6819      	ldr	r1, [r3, #0]
 8009444:	b151      	cbz	r1, 800945c <_dtoa_r+0x5c>
 8009446:	685a      	ldr	r2, [r3, #4]
 8009448:	604a      	str	r2, [r1, #4]
 800944a:	2301      	movs	r3, #1
 800944c:	4093      	lsls	r3, r2
 800944e:	608b      	str	r3, [r1, #8]
 8009450:	4620      	mov	r0, r4
 8009452:	f000 fe1b 	bl	800a08c <_Bfree>
 8009456:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009458:	2200      	movs	r2, #0
 800945a:	601a      	str	r2, [r3, #0]
 800945c:	1e3b      	subs	r3, r7, #0
 800945e:	bfb9      	ittee	lt
 8009460:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009464:	9303      	strlt	r3, [sp, #12]
 8009466:	2300      	movge	r3, #0
 8009468:	f8c8 3000 	strge.w	r3, [r8]
 800946c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009470:	4ba3      	ldr	r3, [pc, #652]	; (8009700 <_dtoa_r+0x300>)
 8009472:	bfbc      	itt	lt
 8009474:	2201      	movlt	r2, #1
 8009476:	f8c8 2000 	strlt.w	r2, [r8]
 800947a:	ea33 0309 	bics.w	r3, r3, r9
 800947e:	d11b      	bne.n	80094b8 <_dtoa_r+0xb8>
 8009480:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009482:	f242 730f 	movw	r3, #9999	; 0x270f
 8009486:	6013      	str	r3, [r2, #0]
 8009488:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800948c:	4333      	orrs	r3, r6
 800948e:	f000 857a 	beq.w	8009f86 <_dtoa_r+0xb86>
 8009492:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009494:	b963      	cbnz	r3, 80094b0 <_dtoa_r+0xb0>
 8009496:	4b9b      	ldr	r3, [pc, #620]	; (8009704 <_dtoa_r+0x304>)
 8009498:	e024      	b.n	80094e4 <_dtoa_r+0xe4>
 800949a:	4b9b      	ldr	r3, [pc, #620]	; (8009708 <_dtoa_r+0x308>)
 800949c:	9300      	str	r3, [sp, #0]
 800949e:	3308      	adds	r3, #8
 80094a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80094a2:	6013      	str	r3, [r2, #0]
 80094a4:	9800      	ldr	r0, [sp, #0]
 80094a6:	b015      	add	sp, #84	; 0x54
 80094a8:	ecbd 8b02 	vpop	{d8}
 80094ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094b0:	4b94      	ldr	r3, [pc, #592]	; (8009704 <_dtoa_r+0x304>)
 80094b2:	9300      	str	r3, [sp, #0]
 80094b4:	3303      	adds	r3, #3
 80094b6:	e7f3      	b.n	80094a0 <_dtoa_r+0xa0>
 80094b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80094bc:	2200      	movs	r2, #0
 80094be:	ec51 0b17 	vmov	r0, r1, d7
 80094c2:	2300      	movs	r3, #0
 80094c4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80094c8:	f7f7 fb06 	bl	8000ad8 <__aeabi_dcmpeq>
 80094cc:	4680      	mov	r8, r0
 80094ce:	b158      	cbz	r0, 80094e8 <_dtoa_r+0xe8>
 80094d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80094d2:	2301      	movs	r3, #1
 80094d4:	6013      	str	r3, [r2, #0]
 80094d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094d8:	2b00      	cmp	r3, #0
 80094da:	f000 8551 	beq.w	8009f80 <_dtoa_r+0xb80>
 80094de:	488b      	ldr	r0, [pc, #556]	; (800970c <_dtoa_r+0x30c>)
 80094e0:	6018      	str	r0, [r3, #0]
 80094e2:	1e43      	subs	r3, r0, #1
 80094e4:	9300      	str	r3, [sp, #0]
 80094e6:	e7dd      	b.n	80094a4 <_dtoa_r+0xa4>
 80094e8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80094ec:	aa12      	add	r2, sp, #72	; 0x48
 80094ee:	a913      	add	r1, sp, #76	; 0x4c
 80094f0:	4620      	mov	r0, r4
 80094f2:	f001 f8ad 	bl	800a650 <__d2b>
 80094f6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80094fa:	4683      	mov	fp, r0
 80094fc:	2d00      	cmp	r5, #0
 80094fe:	d07c      	beq.n	80095fa <_dtoa_r+0x1fa>
 8009500:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009502:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009506:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800950a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800950e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009512:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009516:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800951a:	4b7d      	ldr	r3, [pc, #500]	; (8009710 <_dtoa_r+0x310>)
 800951c:	2200      	movs	r2, #0
 800951e:	4630      	mov	r0, r6
 8009520:	4639      	mov	r1, r7
 8009522:	f7f6 feb9 	bl	8000298 <__aeabi_dsub>
 8009526:	a36e      	add	r3, pc, #440	; (adr r3, 80096e0 <_dtoa_r+0x2e0>)
 8009528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952c:	f7f7 f86c 	bl	8000608 <__aeabi_dmul>
 8009530:	a36d      	add	r3, pc, #436	; (adr r3, 80096e8 <_dtoa_r+0x2e8>)
 8009532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009536:	f7f6 feb1 	bl	800029c <__adddf3>
 800953a:	4606      	mov	r6, r0
 800953c:	4628      	mov	r0, r5
 800953e:	460f      	mov	r7, r1
 8009540:	f7f6 fff8 	bl	8000534 <__aeabi_i2d>
 8009544:	a36a      	add	r3, pc, #424	; (adr r3, 80096f0 <_dtoa_r+0x2f0>)
 8009546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954a:	f7f7 f85d 	bl	8000608 <__aeabi_dmul>
 800954e:	4602      	mov	r2, r0
 8009550:	460b      	mov	r3, r1
 8009552:	4630      	mov	r0, r6
 8009554:	4639      	mov	r1, r7
 8009556:	f7f6 fea1 	bl	800029c <__adddf3>
 800955a:	4606      	mov	r6, r0
 800955c:	460f      	mov	r7, r1
 800955e:	f7f7 fb03 	bl	8000b68 <__aeabi_d2iz>
 8009562:	2200      	movs	r2, #0
 8009564:	4682      	mov	sl, r0
 8009566:	2300      	movs	r3, #0
 8009568:	4630      	mov	r0, r6
 800956a:	4639      	mov	r1, r7
 800956c:	f7f7 fabe 	bl	8000aec <__aeabi_dcmplt>
 8009570:	b148      	cbz	r0, 8009586 <_dtoa_r+0x186>
 8009572:	4650      	mov	r0, sl
 8009574:	f7f6 ffde 	bl	8000534 <__aeabi_i2d>
 8009578:	4632      	mov	r2, r6
 800957a:	463b      	mov	r3, r7
 800957c:	f7f7 faac 	bl	8000ad8 <__aeabi_dcmpeq>
 8009580:	b908      	cbnz	r0, 8009586 <_dtoa_r+0x186>
 8009582:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009586:	f1ba 0f16 	cmp.w	sl, #22
 800958a:	d854      	bhi.n	8009636 <_dtoa_r+0x236>
 800958c:	4b61      	ldr	r3, [pc, #388]	; (8009714 <_dtoa_r+0x314>)
 800958e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009596:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800959a:	f7f7 faa7 	bl	8000aec <__aeabi_dcmplt>
 800959e:	2800      	cmp	r0, #0
 80095a0:	d04b      	beq.n	800963a <_dtoa_r+0x23a>
 80095a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80095a6:	2300      	movs	r3, #0
 80095a8:	930e      	str	r3, [sp, #56]	; 0x38
 80095aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80095ac:	1b5d      	subs	r5, r3, r5
 80095ae:	1e6b      	subs	r3, r5, #1
 80095b0:	9304      	str	r3, [sp, #16]
 80095b2:	bf43      	ittte	mi
 80095b4:	2300      	movmi	r3, #0
 80095b6:	f1c5 0801 	rsbmi	r8, r5, #1
 80095ba:	9304      	strmi	r3, [sp, #16]
 80095bc:	f04f 0800 	movpl.w	r8, #0
 80095c0:	f1ba 0f00 	cmp.w	sl, #0
 80095c4:	db3b      	blt.n	800963e <_dtoa_r+0x23e>
 80095c6:	9b04      	ldr	r3, [sp, #16]
 80095c8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80095cc:	4453      	add	r3, sl
 80095ce:	9304      	str	r3, [sp, #16]
 80095d0:	2300      	movs	r3, #0
 80095d2:	9306      	str	r3, [sp, #24]
 80095d4:	9b05      	ldr	r3, [sp, #20]
 80095d6:	2b09      	cmp	r3, #9
 80095d8:	d869      	bhi.n	80096ae <_dtoa_r+0x2ae>
 80095da:	2b05      	cmp	r3, #5
 80095dc:	bfc4      	itt	gt
 80095de:	3b04      	subgt	r3, #4
 80095e0:	9305      	strgt	r3, [sp, #20]
 80095e2:	9b05      	ldr	r3, [sp, #20]
 80095e4:	f1a3 0302 	sub.w	r3, r3, #2
 80095e8:	bfcc      	ite	gt
 80095ea:	2500      	movgt	r5, #0
 80095ec:	2501      	movle	r5, #1
 80095ee:	2b03      	cmp	r3, #3
 80095f0:	d869      	bhi.n	80096c6 <_dtoa_r+0x2c6>
 80095f2:	e8df f003 	tbb	[pc, r3]
 80095f6:	4e2c      	.short	0x4e2c
 80095f8:	5a4c      	.short	0x5a4c
 80095fa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80095fe:	441d      	add	r5, r3
 8009600:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009604:	2b20      	cmp	r3, #32
 8009606:	bfc1      	itttt	gt
 8009608:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800960c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009610:	fa09 f303 	lslgt.w	r3, r9, r3
 8009614:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009618:	bfda      	itte	le
 800961a:	f1c3 0320 	rsble	r3, r3, #32
 800961e:	fa06 f003 	lslle.w	r0, r6, r3
 8009622:	4318      	orrgt	r0, r3
 8009624:	f7f6 ff76 	bl	8000514 <__aeabi_ui2d>
 8009628:	2301      	movs	r3, #1
 800962a:	4606      	mov	r6, r0
 800962c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009630:	3d01      	subs	r5, #1
 8009632:	9310      	str	r3, [sp, #64]	; 0x40
 8009634:	e771      	b.n	800951a <_dtoa_r+0x11a>
 8009636:	2301      	movs	r3, #1
 8009638:	e7b6      	b.n	80095a8 <_dtoa_r+0x1a8>
 800963a:	900e      	str	r0, [sp, #56]	; 0x38
 800963c:	e7b5      	b.n	80095aa <_dtoa_r+0x1aa>
 800963e:	f1ca 0300 	rsb	r3, sl, #0
 8009642:	9306      	str	r3, [sp, #24]
 8009644:	2300      	movs	r3, #0
 8009646:	eba8 080a 	sub.w	r8, r8, sl
 800964a:	930d      	str	r3, [sp, #52]	; 0x34
 800964c:	e7c2      	b.n	80095d4 <_dtoa_r+0x1d4>
 800964e:	2300      	movs	r3, #0
 8009650:	9308      	str	r3, [sp, #32]
 8009652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009654:	2b00      	cmp	r3, #0
 8009656:	dc39      	bgt.n	80096cc <_dtoa_r+0x2cc>
 8009658:	f04f 0901 	mov.w	r9, #1
 800965c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009660:	464b      	mov	r3, r9
 8009662:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009666:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009668:	2200      	movs	r2, #0
 800966a:	6042      	str	r2, [r0, #4]
 800966c:	2204      	movs	r2, #4
 800966e:	f102 0614 	add.w	r6, r2, #20
 8009672:	429e      	cmp	r6, r3
 8009674:	6841      	ldr	r1, [r0, #4]
 8009676:	d92f      	bls.n	80096d8 <_dtoa_r+0x2d8>
 8009678:	4620      	mov	r0, r4
 800967a:	f000 fcc7 	bl	800a00c <_Balloc>
 800967e:	9000      	str	r0, [sp, #0]
 8009680:	2800      	cmp	r0, #0
 8009682:	d14b      	bne.n	800971c <_dtoa_r+0x31c>
 8009684:	4b24      	ldr	r3, [pc, #144]	; (8009718 <_dtoa_r+0x318>)
 8009686:	4602      	mov	r2, r0
 8009688:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800968c:	e6d1      	b.n	8009432 <_dtoa_r+0x32>
 800968e:	2301      	movs	r3, #1
 8009690:	e7de      	b.n	8009650 <_dtoa_r+0x250>
 8009692:	2300      	movs	r3, #0
 8009694:	9308      	str	r3, [sp, #32]
 8009696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009698:	eb0a 0903 	add.w	r9, sl, r3
 800969c:	f109 0301 	add.w	r3, r9, #1
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	9301      	str	r3, [sp, #4]
 80096a4:	bfb8      	it	lt
 80096a6:	2301      	movlt	r3, #1
 80096a8:	e7dd      	b.n	8009666 <_dtoa_r+0x266>
 80096aa:	2301      	movs	r3, #1
 80096ac:	e7f2      	b.n	8009694 <_dtoa_r+0x294>
 80096ae:	2501      	movs	r5, #1
 80096b0:	2300      	movs	r3, #0
 80096b2:	9305      	str	r3, [sp, #20]
 80096b4:	9508      	str	r5, [sp, #32]
 80096b6:	f04f 39ff 	mov.w	r9, #4294967295
 80096ba:	2200      	movs	r2, #0
 80096bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80096c0:	2312      	movs	r3, #18
 80096c2:	9209      	str	r2, [sp, #36]	; 0x24
 80096c4:	e7cf      	b.n	8009666 <_dtoa_r+0x266>
 80096c6:	2301      	movs	r3, #1
 80096c8:	9308      	str	r3, [sp, #32]
 80096ca:	e7f4      	b.n	80096b6 <_dtoa_r+0x2b6>
 80096cc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80096d0:	f8cd 9004 	str.w	r9, [sp, #4]
 80096d4:	464b      	mov	r3, r9
 80096d6:	e7c6      	b.n	8009666 <_dtoa_r+0x266>
 80096d8:	3101      	adds	r1, #1
 80096da:	6041      	str	r1, [r0, #4]
 80096dc:	0052      	lsls	r2, r2, #1
 80096de:	e7c6      	b.n	800966e <_dtoa_r+0x26e>
 80096e0:	636f4361 	.word	0x636f4361
 80096e4:	3fd287a7 	.word	0x3fd287a7
 80096e8:	8b60c8b3 	.word	0x8b60c8b3
 80096ec:	3fc68a28 	.word	0x3fc68a28
 80096f0:	509f79fb 	.word	0x509f79fb
 80096f4:	3fd34413 	.word	0x3fd34413
 80096f8:	0800c75d 	.word	0x0800c75d
 80096fc:	0800c774 	.word	0x0800c774
 8009700:	7ff00000 	.word	0x7ff00000
 8009704:	0800c759 	.word	0x0800c759
 8009708:	0800c750 	.word	0x0800c750
 800970c:	0800c72d 	.word	0x0800c72d
 8009710:	3ff80000 	.word	0x3ff80000
 8009714:	0800c870 	.word	0x0800c870
 8009718:	0800c7d3 	.word	0x0800c7d3
 800971c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800971e:	9a00      	ldr	r2, [sp, #0]
 8009720:	601a      	str	r2, [r3, #0]
 8009722:	9b01      	ldr	r3, [sp, #4]
 8009724:	2b0e      	cmp	r3, #14
 8009726:	f200 80ad 	bhi.w	8009884 <_dtoa_r+0x484>
 800972a:	2d00      	cmp	r5, #0
 800972c:	f000 80aa 	beq.w	8009884 <_dtoa_r+0x484>
 8009730:	f1ba 0f00 	cmp.w	sl, #0
 8009734:	dd36      	ble.n	80097a4 <_dtoa_r+0x3a4>
 8009736:	4ac3      	ldr	r2, [pc, #780]	; (8009a44 <_dtoa_r+0x644>)
 8009738:	f00a 030f 	and.w	r3, sl, #15
 800973c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009740:	ed93 7b00 	vldr	d7, [r3]
 8009744:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009748:	ea4f 172a 	mov.w	r7, sl, asr #4
 800974c:	eeb0 8a47 	vmov.f32	s16, s14
 8009750:	eef0 8a67 	vmov.f32	s17, s15
 8009754:	d016      	beq.n	8009784 <_dtoa_r+0x384>
 8009756:	4bbc      	ldr	r3, [pc, #752]	; (8009a48 <_dtoa_r+0x648>)
 8009758:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800975c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009760:	f7f7 f87c 	bl	800085c <__aeabi_ddiv>
 8009764:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009768:	f007 070f 	and.w	r7, r7, #15
 800976c:	2503      	movs	r5, #3
 800976e:	4eb6      	ldr	r6, [pc, #728]	; (8009a48 <_dtoa_r+0x648>)
 8009770:	b957      	cbnz	r7, 8009788 <_dtoa_r+0x388>
 8009772:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009776:	ec53 2b18 	vmov	r2, r3, d8
 800977a:	f7f7 f86f 	bl	800085c <__aeabi_ddiv>
 800977e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009782:	e029      	b.n	80097d8 <_dtoa_r+0x3d8>
 8009784:	2502      	movs	r5, #2
 8009786:	e7f2      	b.n	800976e <_dtoa_r+0x36e>
 8009788:	07f9      	lsls	r1, r7, #31
 800978a:	d508      	bpl.n	800979e <_dtoa_r+0x39e>
 800978c:	ec51 0b18 	vmov	r0, r1, d8
 8009790:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009794:	f7f6 ff38 	bl	8000608 <__aeabi_dmul>
 8009798:	ec41 0b18 	vmov	d8, r0, r1
 800979c:	3501      	adds	r5, #1
 800979e:	107f      	asrs	r7, r7, #1
 80097a0:	3608      	adds	r6, #8
 80097a2:	e7e5      	b.n	8009770 <_dtoa_r+0x370>
 80097a4:	f000 80a6 	beq.w	80098f4 <_dtoa_r+0x4f4>
 80097a8:	f1ca 0600 	rsb	r6, sl, #0
 80097ac:	4ba5      	ldr	r3, [pc, #660]	; (8009a44 <_dtoa_r+0x644>)
 80097ae:	4fa6      	ldr	r7, [pc, #664]	; (8009a48 <_dtoa_r+0x648>)
 80097b0:	f006 020f 	and.w	r2, r6, #15
 80097b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097bc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80097c0:	f7f6 ff22 	bl	8000608 <__aeabi_dmul>
 80097c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097c8:	1136      	asrs	r6, r6, #4
 80097ca:	2300      	movs	r3, #0
 80097cc:	2502      	movs	r5, #2
 80097ce:	2e00      	cmp	r6, #0
 80097d0:	f040 8085 	bne.w	80098de <_dtoa_r+0x4de>
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d1d2      	bne.n	800977e <_dtoa_r+0x37e>
 80097d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097da:	2b00      	cmp	r3, #0
 80097dc:	f000 808c 	beq.w	80098f8 <_dtoa_r+0x4f8>
 80097e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80097e4:	4b99      	ldr	r3, [pc, #612]	; (8009a4c <_dtoa_r+0x64c>)
 80097e6:	2200      	movs	r2, #0
 80097e8:	4630      	mov	r0, r6
 80097ea:	4639      	mov	r1, r7
 80097ec:	f7f7 f97e 	bl	8000aec <__aeabi_dcmplt>
 80097f0:	2800      	cmp	r0, #0
 80097f2:	f000 8081 	beq.w	80098f8 <_dtoa_r+0x4f8>
 80097f6:	9b01      	ldr	r3, [sp, #4]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d07d      	beq.n	80098f8 <_dtoa_r+0x4f8>
 80097fc:	f1b9 0f00 	cmp.w	r9, #0
 8009800:	dd3c      	ble.n	800987c <_dtoa_r+0x47c>
 8009802:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009806:	9307      	str	r3, [sp, #28]
 8009808:	2200      	movs	r2, #0
 800980a:	4b91      	ldr	r3, [pc, #580]	; (8009a50 <_dtoa_r+0x650>)
 800980c:	4630      	mov	r0, r6
 800980e:	4639      	mov	r1, r7
 8009810:	f7f6 fefa 	bl	8000608 <__aeabi_dmul>
 8009814:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009818:	3501      	adds	r5, #1
 800981a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800981e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009822:	4628      	mov	r0, r5
 8009824:	f7f6 fe86 	bl	8000534 <__aeabi_i2d>
 8009828:	4632      	mov	r2, r6
 800982a:	463b      	mov	r3, r7
 800982c:	f7f6 feec 	bl	8000608 <__aeabi_dmul>
 8009830:	4b88      	ldr	r3, [pc, #544]	; (8009a54 <_dtoa_r+0x654>)
 8009832:	2200      	movs	r2, #0
 8009834:	f7f6 fd32 	bl	800029c <__adddf3>
 8009838:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800983c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009840:	9303      	str	r3, [sp, #12]
 8009842:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009844:	2b00      	cmp	r3, #0
 8009846:	d15c      	bne.n	8009902 <_dtoa_r+0x502>
 8009848:	4b83      	ldr	r3, [pc, #524]	; (8009a58 <_dtoa_r+0x658>)
 800984a:	2200      	movs	r2, #0
 800984c:	4630      	mov	r0, r6
 800984e:	4639      	mov	r1, r7
 8009850:	f7f6 fd22 	bl	8000298 <__aeabi_dsub>
 8009854:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009858:	4606      	mov	r6, r0
 800985a:	460f      	mov	r7, r1
 800985c:	f7f7 f964 	bl	8000b28 <__aeabi_dcmpgt>
 8009860:	2800      	cmp	r0, #0
 8009862:	f040 8296 	bne.w	8009d92 <_dtoa_r+0x992>
 8009866:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800986a:	4630      	mov	r0, r6
 800986c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009870:	4639      	mov	r1, r7
 8009872:	f7f7 f93b 	bl	8000aec <__aeabi_dcmplt>
 8009876:	2800      	cmp	r0, #0
 8009878:	f040 8288 	bne.w	8009d8c <_dtoa_r+0x98c>
 800987c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009880:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009884:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009886:	2b00      	cmp	r3, #0
 8009888:	f2c0 8158 	blt.w	8009b3c <_dtoa_r+0x73c>
 800988c:	f1ba 0f0e 	cmp.w	sl, #14
 8009890:	f300 8154 	bgt.w	8009b3c <_dtoa_r+0x73c>
 8009894:	4b6b      	ldr	r3, [pc, #428]	; (8009a44 <_dtoa_r+0x644>)
 8009896:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800989a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800989e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	f280 80e3 	bge.w	8009a6c <_dtoa_r+0x66c>
 80098a6:	9b01      	ldr	r3, [sp, #4]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	f300 80df 	bgt.w	8009a6c <_dtoa_r+0x66c>
 80098ae:	f040 826d 	bne.w	8009d8c <_dtoa_r+0x98c>
 80098b2:	4b69      	ldr	r3, [pc, #420]	; (8009a58 <_dtoa_r+0x658>)
 80098b4:	2200      	movs	r2, #0
 80098b6:	4640      	mov	r0, r8
 80098b8:	4649      	mov	r1, r9
 80098ba:	f7f6 fea5 	bl	8000608 <__aeabi_dmul>
 80098be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098c2:	f7f7 f927 	bl	8000b14 <__aeabi_dcmpge>
 80098c6:	9e01      	ldr	r6, [sp, #4]
 80098c8:	4637      	mov	r7, r6
 80098ca:	2800      	cmp	r0, #0
 80098cc:	f040 8243 	bne.w	8009d56 <_dtoa_r+0x956>
 80098d0:	9d00      	ldr	r5, [sp, #0]
 80098d2:	2331      	movs	r3, #49	; 0x31
 80098d4:	f805 3b01 	strb.w	r3, [r5], #1
 80098d8:	f10a 0a01 	add.w	sl, sl, #1
 80098dc:	e23f      	b.n	8009d5e <_dtoa_r+0x95e>
 80098de:	07f2      	lsls	r2, r6, #31
 80098e0:	d505      	bpl.n	80098ee <_dtoa_r+0x4ee>
 80098e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098e6:	f7f6 fe8f 	bl	8000608 <__aeabi_dmul>
 80098ea:	3501      	adds	r5, #1
 80098ec:	2301      	movs	r3, #1
 80098ee:	1076      	asrs	r6, r6, #1
 80098f0:	3708      	adds	r7, #8
 80098f2:	e76c      	b.n	80097ce <_dtoa_r+0x3ce>
 80098f4:	2502      	movs	r5, #2
 80098f6:	e76f      	b.n	80097d8 <_dtoa_r+0x3d8>
 80098f8:	9b01      	ldr	r3, [sp, #4]
 80098fa:	f8cd a01c 	str.w	sl, [sp, #28]
 80098fe:	930c      	str	r3, [sp, #48]	; 0x30
 8009900:	e78d      	b.n	800981e <_dtoa_r+0x41e>
 8009902:	9900      	ldr	r1, [sp, #0]
 8009904:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009906:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009908:	4b4e      	ldr	r3, [pc, #312]	; (8009a44 <_dtoa_r+0x644>)
 800990a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800990e:	4401      	add	r1, r0
 8009910:	9102      	str	r1, [sp, #8]
 8009912:	9908      	ldr	r1, [sp, #32]
 8009914:	eeb0 8a47 	vmov.f32	s16, s14
 8009918:	eef0 8a67 	vmov.f32	s17, s15
 800991c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009920:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009924:	2900      	cmp	r1, #0
 8009926:	d045      	beq.n	80099b4 <_dtoa_r+0x5b4>
 8009928:	494c      	ldr	r1, [pc, #304]	; (8009a5c <_dtoa_r+0x65c>)
 800992a:	2000      	movs	r0, #0
 800992c:	f7f6 ff96 	bl	800085c <__aeabi_ddiv>
 8009930:	ec53 2b18 	vmov	r2, r3, d8
 8009934:	f7f6 fcb0 	bl	8000298 <__aeabi_dsub>
 8009938:	9d00      	ldr	r5, [sp, #0]
 800993a:	ec41 0b18 	vmov	d8, r0, r1
 800993e:	4639      	mov	r1, r7
 8009940:	4630      	mov	r0, r6
 8009942:	f7f7 f911 	bl	8000b68 <__aeabi_d2iz>
 8009946:	900c      	str	r0, [sp, #48]	; 0x30
 8009948:	f7f6 fdf4 	bl	8000534 <__aeabi_i2d>
 800994c:	4602      	mov	r2, r0
 800994e:	460b      	mov	r3, r1
 8009950:	4630      	mov	r0, r6
 8009952:	4639      	mov	r1, r7
 8009954:	f7f6 fca0 	bl	8000298 <__aeabi_dsub>
 8009958:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800995a:	3330      	adds	r3, #48	; 0x30
 800995c:	f805 3b01 	strb.w	r3, [r5], #1
 8009960:	ec53 2b18 	vmov	r2, r3, d8
 8009964:	4606      	mov	r6, r0
 8009966:	460f      	mov	r7, r1
 8009968:	f7f7 f8c0 	bl	8000aec <__aeabi_dcmplt>
 800996c:	2800      	cmp	r0, #0
 800996e:	d165      	bne.n	8009a3c <_dtoa_r+0x63c>
 8009970:	4632      	mov	r2, r6
 8009972:	463b      	mov	r3, r7
 8009974:	4935      	ldr	r1, [pc, #212]	; (8009a4c <_dtoa_r+0x64c>)
 8009976:	2000      	movs	r0, #0
 8009978:	f7f6 fc8e 	bl	8000298 <__aeabi_dsub>
 800997c:	ec53 2b18 	vmov	r2, r3, d8
 8009980:	f7f7 f8b4 	bl	8000aec <__aeabi_dcmplt>
 8009984:	2800      	cmp	r0, #0
 8009986:	f040 80b9 	bne.w	8009afc <_dtoa_r+0x6fc>
 800998a:	9b02      	ldr	r3, [sp, #8]
 800998c:	429d      	cmp	r5, r3
 800998e:	f43f af75 	beq.w	800987c <_dtoa_r+0x47c>
 8009992:	4b2f      	ldr	r3, [pc, #188]	; (8009a50 <_dtoa_r+0x650>)
 8009994:	ec51 0b18 	vmov	r0, r1, d8
 8009998:	2200      	movs	r2, #0
 800999a:	f7f6 fe35 	bl	8000608 <__aeabi_dmul>
 800999e:	4b2c      	ldr	r3, [pc, #176]	; (8009a50 <_dtoa_r+0x650>)
 80099a0:	ec41 0b18 	vmov	d8, r0, r1
 80099a4:	2200      	movs	r2, #0
 80099a6:	4630      	mov	r0, r6
 80099a8:	4639      	mov	r1, r7
 80099aa:	f7f6 fe2d 	bl	8000608 <__aeabi_dmul>
 80099ae:	4606      	mov	r6, r0
 80099b0:	460f      	mov	r7, r1
 80099b2:	e7c4      	b.n	800993e <_dtoa_r+0x53e>
 80099b4:	ec51 0b17 	vmov	r0, r1, d7
 80099b8:	f7f6 fe26 	bl	8000608 <__aeabi_dmul>
 80099bc:	9b02      	ldr	r3, [sp, #8]
 80099be:	9d00      	ldr	r5, [sp, #0]
 80099c0:	930c      	str	r3, [sp, #48]	; 0x30
 80099c2:	ec41 0b18 	vmov	d8, r0, r1
 80099c6:	4639      	mov	r1, r7
 80099c8:	4630      	mov	r0, r6
 80099ca:	f7f7 f8cd 	bl	8000b68 <__aeabi_d2iz>
 80099ce:	9011      	str	r0, [sp, #68]	; 0x44
 80099d0:	f7f6 fdb0 	bl	8000534 <__aeabi_i2d>
 80099d4:	4602      	mov	r2, r0
 80099d6:	460b      	mov	r3, r1
 80099d8:	4630      	mov	r0, r6
 80099da:	4639      	mov	r1, r7
 80099dc:	f7f6 fc5c 	bl	8000298 <__aeabi_dsub>
 80099e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80099e2:	3330      	adds	r3, #48	; 0x30
 80099e4:	f805 3b01 	strb.w	r3, [r5], #1
 80099e8:	9b02      	ldr	r3, [sp, #8]
 80099ea:	429d      	cmp	r5, r3
 80099ec:	4606      	mov	r6, r0
 80099ee:	460f      	mov	r7, r1
 80099f0:	f04f 0200 	mov.w	r2, #0
 80099f4:	d134      	bne.n	8009a60 <_dtoa_r+0x660>
 80099f6:	4b19      	ldr	r3, [pc, #100]	; (8009a5c <_dtoa_r+0x65c>)
 80099f8:	ec51 0b18 	vmov	r0, r1, d8
 80099fc:	f7f6 fc4e 	bl	800029c <__adddf3>
 8009a00:	4602      	mov	r2, r0
 8009a02:	460b      	mov	r3, r1
 8009a04:	4630      	mov	r0, r6
 8009a06:	4639      	mov	r1, r7
 8009a08:	f7f7 f88e 	bl	8000b28 <__aeabi_dcmpgt>
 8009a0c:	2800      	cmp	r0, #0
 8009a0e:	d175      	bne.n	8009afc <_dtoa_r+0x6fc>
 8009a10:	ec53 2b18 	vmov	r2, r3, d8
 8009a14:	4911      	ldr	r1, [pc, #68]	; (8009a5c <_dtoa_r+0x65c>)
 8009a16:	2000      	movs	r0, #0
 8009a18:	f7f6 fc3e 	bl	8000298 <__aeabi_dsub>
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	460b      	mov	r3, r1
 8009a20:	4630      	mov	r0, r6
 8009a22:	4639      	mov	r1, r7
 8009a24:	f7f7 f862 	bl	8000aec <__aeabi_dcmplt>
 8009a28:	2800      	cmp	r0, #0
 8009a2a:	f43f af27 	beq.w	800987c <_dtoa_r+0x47c>
 8009a2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009a30:	1e6b      	subs	r3, r5, #1
 8009a32:	930c      	str	r3, [sp, #48]	; 0x30
 8009a34:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009a38:	2b30      	cmp	r3, #48	; 0x30
 8009a3a:	d0f8      	beq.n	8009a2e <_dtoa_r+0x62e>
 8009a3c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009a40:	e04a      	b.n	8009ad8 <_dtoa_r+0x6d8>
 8009a42:	bf00      	nop
 8009a44:	0800c870 	.word	0x0800c870
 8009a48:	0800c848 	.word	0x0800c848
 8009a4c:	3ff00000 	.word	0x3ff00000
 8009a50:	40240000 	.word	0x40240000
 8009a54:	401c0000 	.word	0x401c0000
 8009a58:	40140000 	.word	0x40140000
 8009a5c:	3fe00000 	.word	0x3fe00000
 8009a60:	4baf      	ldr	r3, [pc, #700]	; (8009d20 <_dtoa_r+0x920>)
 8009a62:	f7f6 fdd1 	bl	8000608 <__aeabi_dmul>
 8009a66:	4606      	mov	r6, r0
 8009a68:	460f      	mov	r7, r1
 8009a6a:	e7ac      	b.n	80099c6 <_dtoa_r+0x5c6>
 8009a6c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009a70:	9d00      	ldr	r5, [sp, #0]
 8009a72:	4642      	mov	r2, r8
 8009a74:	464b      	mov	r3, r9
 8009a76:	4630      	mov	r0, r6
 8009a78:	4639      	mov	r1, r7
 8009a7a:	f7f6 feef 	bl	800085c <__aeabi_ddiv>
 8009a7e:	f7f7 f873 	bl	8000b68 <__aeabi_d2iz>
 8009a82:	9002      	str	r0, [sp, #8]
 8009a84:	f7f6 fd56 	bl	8000534 <__aeabi_i2d>
 8009a88:	4642      	mov	r2, r8
 8009a8a:	464b      	mov	r3, r9
 8009a8c:	f7f6 fdbc 	bl	8000608 <__aeabi_dmul>
 8009a90:	4602      	mov	r2, r0
 8009a92:	460b      	mov	r3, r1
 8009a94:	4630      	mov	r0, r6
 8009a96:	4639      	mov	r1, r7
 8009a98:	f7f6 fbfe 	bl	8000298 <__aeabi_dsub>
 8009a9c:	9e02      	ldr	r6, [sp, #8]
 8009a9e:	9f01      	ldr	r7, [sp, #4]
 8009aa0:	3630      	adds	r6, #48	; 0x30
 8009aa2:	f805 6b01 	strb.w	r6, [r5], #1
 8009aa6:	9e00      	ldr	r6, [sp, #0]
 8009aa8:	1bae      	subs	r6, r5, r6
 8009aaa:	42b7      	cmp	r7, r6
 8009aac:	4602      	mov	r2, r0
 8009aae:	460b      	mov	r3, r1
 8009ab0:	d137      	bne.n	8009b22 <_dtoa_r+0x722>
 8009ab2:	f7f6 fbf3 	bl	800029c <__adddf3>
 8009ab6:	4642      	mov	r2, r8
 8009ab8:	464b      	mov	r3, r9
 8009aba:	4606      	mov	r6, r0
 8009abc:	460f      	mov	r7, r1
 8009abe:	f7f7 f833 	bl	8000b28 <__aeabi_dcmpgt>
 8009ac2:	b9c8      	cbnz	r0, 8009af8 <_dtoa_r+0x6f8>
 8009ac4:	4642      	mov	r2, r8
 8009ac6:	464b      	mov	r3, r9
 8009ac8:	4630      	mov	r0, r6
 8009aca:	4639      	mov	r1, r7
 8009acc:	f7f7 f804 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ad0:	b110      	cbz	r0, 8009ad8 <_dtoa_r+0x6d8>
 8009ad2:	9b02      	ldr	r3, [sp, #8]
 8009ad4:	07d9      	lsls	r1, r3, #31
 8009ad6:	d40f      	bmi.n	8009af8 <_dtoa_r+0x6f8>
 8009ad8:	4620      	mov	r0, r4
 8009ada:	4659      	mov	r1, fp
 8009adc:	f000 fad6 	bl	800a08c <_Bfree>
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	702b      	strb	r3, [r5, #0]
 8009ae4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ae6:	f10a 0001 	add.w	r0, sl, #1
 8009aea:	6018      	str	r0, [r3, #0]
 8009aec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	f43f acd8 	beq.w	80094a4 <_dtoa_r+0xa4>
 8009af4:	601d      	str	r5, [r3, #0]
 8009af6:	e4d5      	b.n	80094a4 <_dtoa_r+0xa4>
 8009af8:	f8cd a01c 	str.w	sl, [sp, #28]
 8009afc:	462b      	mov	r3, r5
 8009afe:	461d      	mov	r5, r3
 8009b00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b04:	2a39      	cmp	r2, #57	; 0x39
 8009b06:	d108      	bne.n	8009b1a <_dtoa_r+0x71a>
 8009b08:	9a00      	ldr	r2, [sp, #0]
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d1f7      	bne.n	8009afe <_dtoa_r+0x6fe>
 8009b0e:	9a07      	ldr	r2, [sp, #28]
 8009b10:	9900      	ldr	r1, [sp, #0]
 8009b12:	3201      	adds	r2, #1
 8009b14:	9207      	str	r2, [sp, #28]
 8009b16:	2230      	movs	r2, #48	; 0x30
 8009b18:	700a      	strb	r2, [r1, #0]
 8009b1a:	781a      	ldrb	r2, [r3, #0]
 8009b1c:	3201      	adds	r2, #1
 8009b1e:	701a      	strb	r2, [r3, #0]
 8009b20:	e78c      	b.n	8009a3c <_dtoa_r+0x63c>
 8009b22:	4b7f      	ldr	r3, [pc, #508]	; (8009d20 <_dtoa_r+0x920>)
 8009b24:	2200      	movs	r2, #0
 8009b26:	f7f6 fd6f 	bl	8000608 <__aeabi_dmul>
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	4606      	mov	r6, r0
 8009b30:	460f      	mov	r7, r1
 8009b32:	f7f6 ffd1 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b36:	2800      	cmp	r0, #0
 8009b38:	d09b      	beq.n	8009a72 <_dtoa_r+0x672>
 8009b3a:	e7cd      	b.n	8009ad8 <_dtoa_r+0x6d8>
 8009b3c:	9a08      	ldr	r2, [sp, #32]
 8009b3e:	2a00      	cmp	r2, #0
 8009b40:	f000 80c4 	beq.w	8009ccc <_dtoa_r+0x8cc>
 8009b44:	9a05      	ldr	r2, [sp, #20]
 8009b46:	2a01      	cmp	r2, #1
 8009b48:	f300 80a8 	bgt.w	8009c9c <_dtoa_r+0x89c>
 8009b4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009b4e:	2a00      	cmp	r2, #0
 8009b50:	f000 80a0 	beq.w	8009c94 <_dtoa_r+0x894>
 8009b54:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009b58:	9e06      	ldr	r6, [sp, #24]
 8009b5a:	4645      	mov	r5, r8
 8009b5c:	9a04      	ldr	r2, [sp, #16]
 8009b5e:	2101      	movs	r1, #1
 8009b60:	441a      	add	r2, r3
 8009b62:	4620      	mov	r0, r4
 8009b64:	4498      	add	r8, r3
 8009b66:	9204      	str	r2, [sp, #16]
 8009b68:	f000 fb4c 	bl	800a204 <__i2b>
 8009b6c:	4607      	mov	r7, r0
 8009b6e:	2d00      	cmp	r5, #0
 8009b70:	dd0b      	ble.n	8009b8a <_dtoa_r+0x78a>
 8009b72:	9b04      	ldr	r3, [sp, #16]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	dd08      	ble.n	8009b8a <_dtoa_r+0x78a>
 8009b78:	42ab      	cmp	r3, r5
 8009b7a:	9a04      	ldr	r2, [sp, #16]
 8009b7c:	bfa8      	it	ge
 8009b7e:	462b      	movge	r3, r5
 8009b80:	eba8 0803 	sub.w	r8, r8, r3
 8009b84:	1aed      	subs	r5, r5, r3
 8009b86:	1ad3      	subs	r3, r2, r3
 8009b88:	9304      	str	r3, [sp, #16]
 8009b8a:	9b06      	ldr	r3, [sp, #24]
 8009b8c:	b1fb      	cbz	r3, 8009bce <_dtoa_r+0x7ce>
 8009b8e:	9b08      	ldr	r3, [sp, #32]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	f000 809f 	beq.w	8009cd4 <_dtoa_r+0x8d4>
 8009b96:	2e00      	cmp	r6, #0
 8009b98:	dd11      	ble.n	8009bbe <_dtoa_r+0x7be>
 8009b9a:	4639      	mov	r1, r7
 8009b9c:	4632      	mov	r2, r6
 8009b9e:	4620      	mov	r0, r4
 8009ba0:	f000 fbec 	bl	800a37c <__pow5mult>
 8009ba4:	465a      	mov	r2, fp
 8009ba6:	4601      	mov	r1, r0
 8009ba8:	4607      	mov	r7, r0
 8009baa:	4620      	mov	r0, r4
 8009bac:	f000 fb40 	bl	800a230 <__multiply>
 8009bb0:	4659      	mov	r1, fp
 8009bb2:	9007      	str	r0, [sp, #28]
 8009bb4:	4620      	mov	r0, r4
 8009bb6:	f000 fa69 	bl	800a08c <_Bfree>
 8009bba:	9b07      	ldr	r3, [sp, #28]
 8009bbc:	469b      	mov	fp, r3
 8009bbe:	9b06      	ldr	r3, [sp, #24]
 8009bc0:	1b9a      	subs	r2, r3, r6
 8009bc2:	d004      	beq.n	8009bce <_dtoa_r+0x7ce>
 8009bc4:	4659      	mov	r1, fp
 8009bc6:	4620      	mov	r0, r4
 8009bc8:	f000 fbd8 	bl	800a37c <__pow5mult>
 8009bcc:	4683      	mov	fp, r0
 8009bce:	2101      	movs	r1, #1
 8009bd0:	4620      	mov	r0, r4
 8009bd2:	f000 fb17 	bl	800a204 <__i2b>
 8009bd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	4606      	mov	r6, r0
 8009bdc:	dd7c      	ble.n	8009cd8 <_dtoa_r+0x8d8>
 8009bde:	461a      	mov	r2, r3
 8009be0:	4601      	mov	r1, r0
 8009be2:	4620      	mov	r0, r4
 8009be4:	f000 fbca 	bl	800a37c <__pow5mult>
 8009be8:	9b05      	ldr	r3, [sp, #20]
 8009bea:	2b01      	cmp	r3, #1
 8009bec:	4606      	mov	r6, r0
 8009bee:	dd76      	ble.n	8009cde <_dtoa_r+0x8de>
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	9306      	str	r3, [sp, #24]
 8009bf4:	6933      	ldr	r3, [r6, #16]
 8009bf6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009bfa:	6918      	ldr	r0, [r3, #16]
 8009bfc:	f000 fab2 	bl	800a164 <__hi0bits>
 8009c00:	f1c0 0020 	rsb	r0, r0, #32
 8009c04:	9b04      	ldr	r3, [sp, #16]
 8009c06:	4418      	add	r0, r3
 8009c08:	f010 001f 	ands.w	r0, r0, #31
 8009c0c:	f000 8086 	beq.w	8009d1c <_dtoa_r+0x91c>
 8009c10:	f1c0 0320 	rsb	r3, r0, #32
 8009c14:	2b04      	cmp	r3, #4
 8009c16:	dd7f      	ble.n	8009d18 <_dtoa_r+0x918>
 8009c18:	f1c0 001c 	rsb	r0, r0, #28
 8009c1c:	9b04      	ldr	r3, [sp, #16]
 8009c1e:	4403      	add	r3, r0
 8009c20:	4480      	add	r8, r0
 8009c22:	4405      	add	r5, r0
 8009c24:	9304      	str	r3, [sp, #16]
 8009c26:	f1b8 0f00 	cmp.w	r8, #0
 8009c2a:	dd05      	ble.n	8009c38 <_dtoa_r+0x838>
 8009c2c:	4659      	mov	r1, fp
 8009c2e:	4642      	mov	r2, r8
 8009c30:	4620      	mov	r0, r4
 8009c32:	f000 fbfd 	bl	800a430 <__lshift>
 8009c36:	4683      	mov	fp, r0
 8009c38:	9b04      	ldr	r3, [sp, #16]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	dd05      	ble.n	8009c4a <_dtoa_r+0x84a>
 8009c3e:	4631      	mov	r1, r6
 8009c40:	461a      	mov	r2, r3
 8009c42:	4620      	mov	r0, r4
 8009c44:	f000 fbf4 	bl	800a430 <__lshift>
 8009c48:	4606      	mov	r6, r0
 8009c4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d069      	beq.n	8009d24 <_dtoa_r+0x924>
 8009c50:	4631      	mov	r1, r6
 8009c52:	4658      	mov	r0, fp
 8009c54:	f000 fc58 	bl	800a508 <__mcmp>
 8009c58:	2800      	cmp	r0, #0
 8009c5a:	da63      	bge.n	8009d24 <_dtoa_r+0x924>
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	4659      	mov	r1, fp
 8009c60:	220a      	movs	r2, #10
 8009c62:	4620      	mov	r0, r4
 8009c64:	f000 fa34 	bl	800a0d0 <__multadd>
 8009c68:	9b08      	ldr	r3, [sp, #32]
 8009c6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c6e:	4683      	mov	fp, r0
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	f000 818f 	beq.w	8009f94 <_dtoa_r+0xb94>
 8009c76:	4639      	mov	r1, r7
 8009c78:	2300      	movs	r3, #0
 8009c7a:	220a      	movs	r2, #10
 8009c7c:	4620      	mov	r0, r4
 8009c7e:	f000 fa27 	bl	800a0d0 <__multadd>
 8009c82:	f1b9 0f00 	cmp.w	r9, #0
 8009c86:	4607      	mov	r7, r0
 8009c88:	f300 808e 	bgt.w	8009da8 <_dtoa_r+0x9a8>
 8009c8c:	9b05      	ldr	r3, [sp, #20]
 8009c8e:	2b02      	cmp	r3, #2
 8009c90:	dc50      	bgt.n	8009d34 <_dtoa_r+0x934>
 8009c92:	e089      	b.n	8009da8 <_dtoa_r+0x9a8>
 8009c94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009c9a:	e75d      	b.n	8009b58 <_dtoa_r+0x758>
 8009c9c:	9b01      	ldr	r3, [sp, #4]
 8009c9e:	1e5e      	subs	r6, r3, #1
 8009ca0:	9b06      	ldr	r3, [sp, #24]
 8009ca2:	42b3      	cmp	r3, r6
 8009ca4:	bfbf      	itttt	lt
 8009ca6:	9b06      	ldrlt	r3, [sp, #24]
 8009ca8:	9606      	strlt	r6, [sp, #24]
 8009caa:	1af2      	sublt	r2, r6, r3
 8009cac:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009cae:	bfb6      	itet	lt
 8009cb0:	189b      	addlt	r3, r3, r2
 8009cb2:	1b9e      	subge	r6, r3, r6
 8009cb4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009cb6:	9b01      	ldr	r3, [sp, #4]
 8009cb8:	bfb8      	it	lt
 8009cba:	2600      	movlt	r6, #0
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	bfb5      	itete	lt
 8009cc0:	eba8 0503 	sublt.w	r5, r8, r3
 8009cc4:	9b01      	ldrge	r3, [sp, #4]
 8009cc6:	2300      	movlt	r3, #0
 8009cc8:	4645      	movge	r5, r8
 8009cca:	e747      	b.n	8009b5c <_dtoa_r+0x75c>
 8009ccc:	9e06      	ldr	r6, [sp, #24]
 8009cce:	9f08      	ldr	r7, [sp, #32]
 8009cd0:	4645      	mov	r5, r8
 8009cd2:	e74c      	b.n	8009b6e <_dtoa_r+0x76e>
 8009cd4:	9a06      	ldr	r2, [sp, #24]
 8009cd6:	e775      	b.n	8009bc4 <_dtoa_r+0x7c4>
 8009cd8:	9b05      	ldr	r3, [sp, #20]
 8009cda:	2b01      	cmp	r3, #1
 8009cdc:	dc18      	bgt.n	8009d10 <_dtoa_r+0x910>
 8009cde:	9b02      	ldr	r3, [sp, #8]
 8009ce0:	b9b3      	cbnz	r3, 8009d10 <_dtoa_r+0x910>
 8009ce2:	9b03      	ldr	r3, [sp, #12]
 8009ce4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ce8:	b9a3      	cbnz	r3, 8009d14 <_dtoa_r+0x914>
 8009cea:	9b03      	ldr	r3, [sp, #12]
 8009cec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009cf0:	0d1b      	lsrs	r3, r3, #20
 8009cf2:	051b      	lsls	r3, r3, #20
 8009cf4:	b12b      	cbz	r3, 8009d02 <_dtoa_r+0x902>
 8009cf6:	9b04      	ldr	r3, [sp, #16]
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	9304      	str	r3, [sp, #16]
 8009cfc:	f108 0801 	add.w	r8, r8, #1
 8009d00:	2301      	movs	r3, #1
 8009d02:	9306      	str	r3, [sp, #24]
 8009d04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	f47f af74 	bne.w	8009bf4 <_dtoa_r+0x7f4>
 8009d0c:	2001      	movs	r0, #1
 8009d0e:	e779      	b.n	8009c04 <_dtoa_r+0x804>
 8009d10:	2300      	movs	r3, #0
 8009d12:	e7f6      	b.n	8009d02 <_dtoa_r+0x902>
 8009d14:	9b02      	ldr	r3, [sp, #8]
 8009d16:	e7f4      	b.n	8009d02 <_dtoa_r+0x902>
 8009d18:	d085      	beq.n	8009c26 <_dtoa_r+0x826>
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	301c      	adds	r0, #28
 8009d1e:	e77d      	b.n	8009c1c <_dtoa_r+0x81c>
 8009d20:	40240000 	.word	0x40240000
 8009d24:	9b01      	ldr	r3, [sp, #4]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	dc38      	bgt.n	8009d9c <_dtoa_r+0x99c>
 8009d2a:	9b05      	ldr	r3, [sp, #20]
 8009d2c:	2b02      	cmp	r3, #2
 8009d2e:	dd35      	ble.n	8009d9c <_dtoa_r+0x99c>
 8009d30:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009d34:	f1b9 0f00 	cmp.w	r9, #0
 8009d38:	d10d      	bne.n	8009d56 <_dtoa_r+0x956>
 8009d3a:	4631      	mov	r1, r6
 8009d3c:	464b      	mov	r3, r9
 8009d3e:	2205      	movs	r2, #5
 8009d40:	4620      	mov	r0, r4
 8009d42:	f000 f9c5 	bl	800a0d0 <__multadd>
 8009d46:	4601      	mov	r1, r0
 8009d48:	4606      	mov	r6, r0
 8009d4a:	4658      	mov	r0, fp
 8009d4c:	f000 fbdc 	bl	800a508 <__mcmp>
 8009d50:	2800      	cmp	r0, #0
 8009d52:	f73f adbd 	bgt.w	80098d0 <_dtoa_r+0x4d0>
 8009d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d58:	9d00      	ldr	r5, [sp, #0]
 8009d5a:	ea6f 0a03 	mvn.w	sl, r3
 8009d5e:	f04f 0800 	mov.w	r8, #0
 8009d62:	4631      	mov	r1, r6
 8009d64:	4620      	mov	r0, r4
 8009d66:	f000 f991 	bl	800a08c <_Bfree>
 8009d6a:	2f00      	cmp	r7, #0
 8009d6c:	f43f aeb4 	beq.w	8009ad8 <_dtoa_r+0x6d8>
 8009d70:	f1b8 0f00 	cmp.w	r8, #0
 8009d74:	d005      	beq.n	8009d82 <_dtoa_r+0x982>
 8009d76:	45b8      	cmp	r8, r7
 8009d78:	d003      	beq.n	8009d82 <_dtoa_r+0x982>
 8009d7a:	4641      	mov	r1, r8
 8009d7c:	4620      	mov	r0, r4
 8009d7e:	f000 f985 	bl	800a08c <_Bfree>
 8009d82:	4639      	mov	r1, r7
 8009d84:	4620      	mov	r0, r4
 8009d86:	f000 f981 	bl	800a08c <_Bfree>
 8009d8a:	e6a5      	b.n	8009ad8 <_dtoa_r+0x6d8>
 8009d8c:	2600      	movs	r6, #0
 8009d8e:	4637      	mov	r7, r6
 8009d90:	e7e1      	b.n	8009d56 <_dtoa_r+0x956>
 8009d92:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009d94:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009d98:	4637      	mov	r7, r6
 8009d9a:	e599      	b.n	80098d0 <_dtoa_r+0x4d0>
 8009d9c:	9b08      	ldr	r3, [sp, #32]
 8009d9e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	f000 80fd 	beq.w	8009fa2 <_dtoa_r+0xba2>
 8009da8:	2d00      	cmp	r5, #0
 8009daa:	dd05      	ble.n	8009db8 <_dtoa_r+0x9b8>
 8009dac:	4639      	mov	r1, r7
 8009dae:	462a      	mov	r2, r5
 8009db0:	4620      	mov	r0, r4
 8009db2:	f000 fb3d 	bl	800a430 <__lshift>
 8009db6:	4607      	mov	r7, r0
 8009db8:	9b06      	ldr	r3, [sp, #24]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d05c      	beq.n	8009e78 <_dtoa_r+0xa78>
 8009dbe:	6879      	ldr	r1, [r7, #4]
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	f000 f923 	bl	800a00c <_Balloc>
 8009dc6:	4605      	mov	r5, r0
 8009dc8:	b928      	cbnz	r0, 8009dd6 <_dtoa_r+0x9d6>
 8009dca:	4b80      	ldr	r3, [pc, #512]	; (8009fcc <_dtoa_r+0xbcc>)
 8009dcc:	4602      	mov	r2, r0
 8009dce:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009dd2:	f7ff bb2e 	b.w	8009432 <_dtoa_r+0x32>
 8009dd6:	693a      	ldr	r2, [r7, #16]
 8009dd8:	3202      	adds	r2, #2
 8009dda:	0092      	lsls	r2, r2, #2
 8009ddc:	f107 010c 	add.w	r1, r7, #12
 8009de0:	300c      	adds	r0, #12
 8009de2:	f000 f905 	bl	8009ff0 <memcpy>
 8009de6:	2201      	movs	r2, #1
 8009de8:	4629      	mov	r1, r5
 8009dea:	4620      	mov	r0, r4
 8009dec:	f000 fb20 	bl	800a430 <__lshift>
 8009df0:	9b00      	ldr	r3, [sp, #0]
 8009df2:	3301      	adds	r3, #1
 8009df4:	9301      	str	r3, [sp, #4]
 8009df6:	9b00      	ldr	r3, [sp, #0]
 8009df8:	444b      	add	r3, r9
 8009dfa:	9307      	str	r3, [sp, #28]
 8009dfc:	9b02      	ldr	r3, [sp, #8]
 8009dfe:	f003 0301 	and.w	r3, r3, #1
 8009e02:	46b8      	mov	r8, r7
 8009e04:	9306      	str	r3, [sp, #24]
 8009e06:	4607      	mov	r7, r0
 8009e08:	9b01      	ldr	r3, [sp, #4]
 8009e0a:	4631      	mov	r1, r6
 8009e0c:	3b01      	subs	r3, #1
 8009e0e:	4658      	mov	r0, fp
 8009e10:	9302      	str	r3, [sp, #8]
 8009e12:	f7ff fa67 	bl	80092e4 <quorem>
 8009e16:	4603      	mov	r3, r0
 8009e18:	3330      	adds	r3, #48	; 0x30
 8009e1a:	9004      	str	r0, [sp, #16]
 8009e1c:	4641      	mov	r1, r8
 8009e1e:	4658      	mov	r0, fp
 8009e20:	9308      	str	r3, [sp, #32]
 8009e22:	f000 fb71 	bl	800a508 <__mcmp>
 8009e26:	463a      	mov	r2, r7
 8009e28:	4681      	mov	r9, r0
 8009e2a:	4631      	mov	r1, r6
 8009e2c:	4620      	mov	r0, r4
 8009e2e:	f000 fb87 	bl	800a540 <__mdiff>
 8009e32:	68c2      	ldr	r2, [r0, #12]
 8009e34:	9b08      	ldr	r3, [sp, #32]
 8009e36:	4605      	mov	r5, r0
 8009e38:	bb02      	cbnz	r2, 8009e7c <_dtoa_r+0xa7c>
 8009e3a:	4601      	mov	r1, r0
 8009e3c:	4658      	mov	r0, fp
 8009e3e:	f000 fb63 	bl	800a508 <__mcmp>
 8009e42:	9b08      	ldr	r3, [sp, #32]
 8009e44:	4602      	mov	r2, r0
 8009e46:	4629      	mov	r1, r5
 8009e48:	4620      	mov	r0, r4
 8009e4a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009e4e:	f000 f91d 	bl	800a08c <_Bfree>
 8009e52:	9b05      	ldr	r3, [sp, #20]
 8009e54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e56:	9d01      	ldr	r5, [sp, #4]
 8009e58:	ea43 0102 	orr.w	r1, r3, r2
 8009e5c:	9b06      	ldr	r3, [sp, #24]
 8009e5e:	430b      	orrs	r3, r1
 8009e60:	9b08      	ldr	r3, [sp, #32]
 8009e62:	d10d      	bne.n	8009e80 <_dtoa_r+0xa80>
 8009e64:	2b39      	cmp	r3, #57	; 0x39
 8009e66:	d029      	beq.n	8009ebc <_dtoa_r+0xabc>
 8009e68:	f1b9 0f00 	cmp.w	r9, #0
 8009e6c:	dd01      	ble.n	8009e72 <_dtoa_r+0xa72>
 8009e6e:	9b04      	ldr	r3, [sp, #16]
 8009e70:	3331      	adds	r3, #49	; 0x31
 8009e72:	9a02      	ldr	r2, [sp, #8]
 8009e74:	7013      	strb	r3, [r2, #0]
 8009e76:	e774      	b.n	8009d62 <_dtoa_r+0x962>
 8009e78:	4638      	mov	r0, r7
 8009e7a:	e7b9      	b.n	8009df0 <_dtoa_r+0x9f0>
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	e7e2      	b.n	8009e46 <_dtoa_r+0xa46>
 8009e80:	f1b9 0f00 	cmp.w	r9, #0
 8009e84:	db06      	blt.n	8009e94 <_dtoa_r+0xa94>
 8009e86:	9905      	ldr	r1, [sp, #20]
 8009e88:	ea41 0909 	orr.w	r9, r1, r9
 8009e8c:	9906      	ldr	r1, [sp, #24]
 8009e8e:	ea59 0101 	orrs.w	r1, r9, r1
 8009e92:	d120      	bne.n	8009ed6 <_dtoa_r+0xad6>
 8009e94:	2a00      	cmp	r2, #0
 8009e96:	ddec      	ble.n	8009e72 <_dtoa_r+0xa72>
 8009e98:	4659      	mov	r1, fp
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	4620      	mov	r0, r4
 8009e9e:	9301      	str	r3, [sp, #4]
 8009ea0:	f000 fac6 	bl	800a430 <__lshift>
 8009ea4:	4631      	mov	r1, r6
 8009ea6:	4683      	mov	fp, r0
 8009ea8:	f000 fb2e 	bl	800a508 <__mcmp>
 8009eac:	2800      	cmp	r0, #0
 8009eae:	9b01      	ldr	r3, [sp, #4]
 8009eb0:	dc02      	bgt.n	8009eb8 <_dtoa_r+0xab8>
 8009eb2:	d1de      	bne.n	8009e72 <_dtoa_r+0xa72>
 8009eb4:	07da      	lsls	r2, r3, #31
 8009eb6:	d5dc      	bpl.n	8009e72 <_dtoa_r+0xa72>
 8009eb8:	2b39      	cmp	r3, #57	; 0x39
 8009eba:	d1d8      	bne.n	8009e6e <_dtoa_r+0xa6e>
 8009ebc:	9a02      	ldr	r2, [sp, #8]
 8009ebe:	2339      	movs	r3, #57	; 0x39
 8009ec0:	7013      	strb	r3, [r2, #0]
 8009ec2:	462b      	mov	r3, r5
 8009ec4:	461d      	mov	r5, r3
 8009ec6:	3b01      	subs	r3, #1
 8009ec8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009ecc:	2a39      	cmp	r2, #57	; 0x39
 8009ece:	d050      	beq.n	8009f72 <_dtoa_r+0xb72>
 8009ed0:	3201      	adds	r2, #1
 8009ed2:	701a      	strb	r2, [r3, #0]
 8009ed4:	e745      	b.n	8009d62 <_dtoa_r+0x962>
 8009ed6:	2a00      	cmp	r2, #0
 8009ed8:	dd03      	ble.n	8009ee2 <_dtoa_r+0xae2>
 8009eda:	2b39      	cmp	r3, #57	; 0x39
 8009edc:	d0ee      	beq.n	8009ebc <_dtoa_r+0xabc>
 8009ede:	3301      	adds	r3, #1
 8009ee0:	e7c7      	b.n	8009e72 <_dtoa_r+0xa72>
 8009ee2:	9a01      	ldr	r2, [sp, #4]
 8009ee4:	9907      	ldr	r1, [sp, #28]
 8009ee6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009eea:	428a      	cmp	r2, r1
 8009eec:	d02a      	beq.n	8009f44 <_dtoa_r+0xb44>
 8009eee:	4659      	mov	r1, fp
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	220a      	movs	r2, #10
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	f000 f8eb 	bl	800a0d0 <__multadd>
 8009efa:	45b8      	cmp	r8, r7
 8009efc:	4683      	mov	fp, r0
 8009efe:	f04f 0300 	mov.w	r3, #0
 8009f02:	f04f 020a 	mov.w	r2, #10
 8009f06:	4641      	mov	r1, r8
 8009f08:	4620      	mov	r0, r4
 8009f0a:	d107      	bne.n	8009f1c <_dtoa_r+0xb1c>
 8009f0c:	f000 f8e0 	bl	800a0d0 <__multadd>
 8009f10:	4680      	mov	r8, r0
 8009f12:	4607      	mov	r7, r0
 8009f14:	9b01      	ldr	r3, [sp, #4]
 8009f16:	3301      	adds	r3, #1
 8009f18:	9301      	str	r3, [sp, #4]
 8009f1a:	e775      	b.n	8009e08 <_dtoa_r+0xa08>
 8009f1c:	f000 f8d8 	bl	800a0d0 <__multadd>
 8009f20:	4639      	mov	r1, r7
 8009f22:	4680      	mov	r8, r0
 8009f24:	2300      	movs	r3, #0
 8009f26:	220a      	movs	r2, #10
 8009f28:	4620      	mov	r0, r4
 8009f2a:	f000 f8d1 	bl	800a0d0 <__multadd>
 8009f2e:	4607      	mov	r7, r0
 8009f30:	e7f0      	b.n	8009f14 <_dtoa_r+0xb14>
 8009f32:	f1b9 0f00 	cmp.w	r9, #0
 8009f36:	9a00      	ldr	r2, [sp, #0]
 8009f38:	bfcc      	ite	gt
 8009f3a:	464d      	movgt	r5, r9
 8009f3c:	2501      	movle	r5, #1
 8009f3e:	4415      	add	r5, r2
 8009f40:	f04f 0800 	mov.w	r8, #0
 8009f44:	4659      	mov	r1, fp
 8009f46:	2201      	movs	r2, #1
 8009f48:	4620      	mov	r0, r4
 8009f4a:	9301      	str	r3, [sp, #4]
 8009f4c:	f000 fa70 	bl	800a430 <__lshift>
 8009f50:	4631      	mov	r1, r6
 8009f52:	4683      	mov	fp, r0
 8009f54:	f000 fad8 	bl	800a508 <__mcmp>
 8009f58:	2800      	cmp	r0, #0
 8009f5a:	dcb2      	bgt.n	8009ec2 <_dtoa_r+0xac2>
 8009f5c:	d102      	bne.n	8009f64 <_dtoa_r+0xb64>
 8009f5e:	9b01      	ldr	r3, [sp, #4]
 8009f60:	07db      	lsls	r3, r3, #31
 8009f62:	d4ae      	bmi.n	8009ec2 <_dtoa_r+0xac2>
 8009f64:	462b      	mov	r3, r5
 8009f66:	461d      	mov	r5, r3
 8009f68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f6c:	2a30      	cmp	r2, #48	; 0x30
 8009f6e:	d0fa      	beq.n	8009f66 <_dtoa_r+0xb66>
 8009f70:	e6f7      	b.n	8009d62 <_dtoa_r+0x962>
 8009f72:	9a00      	ldr	r2, [sp, #0]
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d1a5      	bne.n	8009ec4 <_dtoa_r+0xac4>
 8009f78:	f10a 0a01 	add.w	sl, sl, #1
 8009f7c:	2331      	movs	r3, #49	; 0x31
 8009f7e:	e779      	b.n	8009e74 <_dtoa_r+0xa74>
 8009f80:	4b13      	ldr	r3, [pc, #76]	; (8009fd0 <_dtoa_r+0xbd0>)
 8009f82:	f7ff baaf 	b.w	80094e4 <_dtoa_r+0xe4>
 8009f86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	f47f aa86 	bne.w	800949a <_dtoa_r+0x9a>
 8009f8e:	4b11      	ldr	r3, [pc, #68]	; (8009fd4 <_dtoa_r+0xbd4>)
 8009f90:	f7ff baa8 	b.w	80094e4 <_dtoa_r+0xe4>
 8009f94:	f1b9 0f00 	cmp.w	r9, #0
 8009f98:	dc03      	bgt.n	8009fa2 <_dtoa_r+0xba2>
 8009f9a:	9b05      	ldr	r3, [sp, #20]
 8009f9c:	2b02      	cmp	r3, #2
 8009f9e:	f73f aec9 	bgt.w	8009d34 <_dtoa_r+0x934>
 8009fa2:	9d00      	ldr	r5, [sp, #0]
 8009fa4:	4631      	mov	r1, r6
 8009fa6:	4658      	mov	r0, fp
 8009fa8:	f7ff f99c 	bl	80092e4 <quorem>
 8009fac:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009fb0:	f805 3b01 	strb.w	r3, [r5], #1
 8009fb4:	9a00      	ldr	r2, [sp, #0]
 8009fb6:	1aaa      	subs	r2, r5, r2
 8009fb8:	4591      	cmp	r9, r2
 8009fba:	ddba      	ble.n	8009f32 <_dtoa_r+0xb32>
 8009fbc:	4659      	mov	r1, fp
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	220a      	movs	r2, #10
 8009fc2:	4620      	mov	r0, r4
 8009fc4:	f000 f884 	bl	800a0d0 <__multadd>
 8009fc8:	4683      	mov	fp, r0
 8009fca:	e7eb      	b.n	8009fa4 <_dtoa_r+0xba4>
 8009fcc:	0800c7d3 	.word	0x0800c7d3
 8009fd0:	0800c72c 	.word	0x0800c72c
 8009fd4:	0800c750 	.word	0x0800c750

08009fd8 <_localeconv_r>:
 8009fd8:	4800      	ldr	r0, [pc, #0]	; (8009fdc <_localeconv_r+0x4>)
 8009fda:	4770      	bx	lr
 8009fdc:	200002d4 	.word	0x200002d4

08009fe0 <malloc>:
 8009fe0:	4b02      	ldr	r3, [pc, #8]	; (8009fec <malloc+0xc>)
 8009fe2:	4601      	mov	r1, r0
 8009fe4:	6818      	ldr	r0, [r3, #0]
 8009fe6:	f000 bbef 	b.w	800a7c8 <_malloc_r>
 8009fea:	bf00      	nop
 8009fec:	20000180 	.word	0x20000180

08009ff0 <memcpy>:
 8009ff0:	440a      	add	r2, r1
 8009ff2:	4291      	cmp	r1, r2
 8009ff4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ff8:	d100      	bne.n	8009ffc <memcpy+0xc>
 8009ffa:	4770      	bx	lr
 8009ffc:	b510      	push	{r4, lr}
 8009ffe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a002:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a006:	4291      	cmp	r1, r2
 800a008:	d1f9      	bne.n	8009ffe <memcpy+0xe>
 800a00a:	bd10      	pop	{r4, pc}

0800a00c <_Balloc>:
 800a00c:	b570      	push	{r4, r5, r6, lr}
 800a00e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a010:	4604      	mov	r4, r0
 800a012:	460d      	mov	r5, r1
 800a014:	b976      	cbnz	r6, 800a034 <_Balloc+0x28>
 800a016:	2010      	movs	r0, #16
 800a018:	f7ff ffe2 	bl	8009fe0 <malloc>
 800a01c:	4602      	mov	r2, r0
 800a01e:	6260      	str	r0, [r4, #36]	; 0x24
 800a020:	b920      	cbnz	r0, 800a02c <_Balloc+0x20>
 800a022:	4b18      	ldr	r3, [pc, #96]	; (800a084 <_Balloc+0x78>)
 800a024:	4818      	ldr	r0, [pc, #96]	; (800a088 <_Balloc+0x7c>)
 800a026:	2166      	movs	r1, #102	; 0x66
 800a028:	f000 fd94 	bl	800ab54 <__assert_func>
 800a02c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a030:	6006      	str	r6, [r0, #0]
 800a032:	60c6      	str	r6, [r0, #12]
 800a034:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a036:	68f3      	ldr	r3, [r6, #12]
 800a038:	b183      	cbz	r3, 800a05c <_Balloc+0x50>
 800a03a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a03c:	68db      	ldr	r3, [r3, #12]
 800a03e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a042:	b9b8      	cbnz	r0, 800a074 <_Balloc+0x68>
 800a044:	2101      	movs	r1, #1
 800a046:	fa01 f605 	lsl.w	r6, r1, r5
 800a04a:	1d72      	adds	r2, r6, #5
 800a04c:	0092      	lsls	r2, r2, #2
 800a04e:	4620      	mov	r0, r4
 800a050:	f000 fb5a 	bl	800a708 <_calloc_r>
 800a054:	b160      	cbz	r0, 800a070 <_Balloc+0x64>
 800a056:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a05a:	e00e      	b.n	800a07a <_Balloc+0x6e>
 800a05c:	2221      	movs	r2, #33	; 0x21
 800a05e:	2104      	movs	r1, #4
 800a060:	4620      	mov	r0, r4
 800a062:	f000 fb51 	bl	800a708 <_calloc_r>
 800a066:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a068:	60f0      	str	r0, [r6, #12]
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d1e4      	bne.n	800a03a <_Balloc+0x2e>
 800a070:	2000      	movs	r0, #0
 800a072:	bd70      	pop	{r4, r5, r6, pc}
 800a074:	6802      	ldr	r2, [r0, #0]
 800a076:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a07a:	2300      	movs	r3, #0
 800a07c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a080:	e7f7      	b.n	800a072 <_Balloc+0x66>
 800a082:	bf00      	nop
 800a084:	0800c75d 	.word	0x0800c75d
 800a088:	0800c7e4 	.word	0x0800c7e4

0800a08c <_Bfree>:
 800a08c:	b570      	push	{r4, r5, r6, lr}
 800a08e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a090:	4605      	mov	r5, r0
 800a092:	460c      	mov	r4, r1
 800a094:	b976      	cbnz	r6, 800a0b4 <_Bfree+0x28>
 800a096:	2010      	movs	r0, #16
 800a098:	f7ff ffa2 	bl	8009fe0 <malloc>
 800a09c:	4602      	mov	r2, r0
 800a09e:	6268      	str	r0, [r5, #36]	; 0x24
 800a0a0:	b920      	cbnz	r0, 800a0ac <_Bfree+0x20>
 800a0a2:	4b09      	ldr	r3, [pc, #36]	; (800a0c8 <_Bfree+0x3c>)
 800a0a4:	4809      	ldr	r0, [pc, #36]	; (800a0cc <_Bfree+0x40>)
 800a0a6:	218a      	movs	r1, #138	; 0x8a
 800a0a8:	f000 fd54 	bl	800ab54 <__assert_func>
 800a0ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a0b0:	6006      	str	r6, [r0, #0]
 800a0b2:	60c6      	str	r6, [r0, #12]
 800a0b4:	b13c      	cbz	r4, 800a0c6 <_Bfree+0x3a>
 800a0b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a0b8:	6862      	ldr	r2, [r4, #4]
 800a0ba:	68db      	ldr	r3, [r3, #12]
 800a0bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a0c0:	6021      	str	r1, [r4, #0]
 800a0c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a0c6:	bd70      	pop	{r4, r5, r6, pc}
 800a0c8:	0800c75d 	.word	0x0800c75d
 800a0cc:	0800c7e4 	.word	0x0800c7e4

0800a0d0 <__multadd>:
 800a0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0d4:	690e      	ldr	r6, [r1, #16]
 800a0d6:	4607      	mov	r7, r0
 800a0d8:	4698      	mov	r8, r3
 800a0da:	460c      	mov	r4, r1
 800a0dc:	f101 0014 	add.w	r0, r1, #20
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	6805      	ldr	r5, [r0, #0]
 800a0e4:	b2a9      	uxth	r1, r5
 800a0e6:	fb02 8101 	mla	r1, r2, r1, r8
 800a0ea:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a0ee:	0c2d      	lsrs	r5, r5, #16
 800a0f0:	fb02 c505 	mla	r5, r2, r5, ip
 800a0f4:	b289      	uxth	r1, r1
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a0fc:	429e      	cmp	r6, r3
 800a0fe:	f840 1b04 	str.w	r1, [r0], #4
 800a102:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a106:	dcec      	bgt.n	800a0e2 <__multadd+0x12>
 800a108:	f1b8 0f00 	cmp.w	r8, #0
 800a10c:	d022      	beq.n	800a154 <__multadd+0x84>
 800a10e:	68a3      	ldr	r3, [r4, #8]
 800a110:	42b3      	cmp	r3, r6
 800a112:	dc19      	bgt.n	800a148 <__multadd+0x78>
 800a114:	6861      	ldr	r1, [r4, #4]
 800a116:	4638      	mov	r0, r7
 800a118:	3101      	adds	r1, #1
 800a11a:	f7ff ff77 	bl	800a00c <_Balloc>
 800a11e:	4605      	mov	r5, r0
 800a120:	b928      	cbnz	r0, 800a12e <__multadd+0x5e>
 800a122:	4602      	mov	r2, r0
 800a124:	4b0d      	ldr	r3, [pc, #52]	; (800a15c <__multadd+0x8c>)
 800a126:	480e      	ldr	r0, [pc, #56]	; (800a160 <__multadd+0x90>)
 800a128:	21b5      	movs	r1, #181	; 0xb5
 800a12a:	f000 fd13 	bl	800ab54 <__assert_func>
 800a12e:	6922      	ldr	r2, [r4, #16]
 800a130:	3202      	adds	r2, #2
 800a132:	f104 010c 	add.w	r1, r4, #12
 800a136:	0092      	lsls	r2, r2, #2
 800a138:	300c      	adds	r0, #12
 800a13a:	f7ff ff59 	bl	8009ff0 <memcpy>
 800a13e:	4621      	mov	r1, r4
 800a140:	4638      	mov	r0, r7
 800a142:	f7ff ffa3 	bl	800a08c <_Bfree>
 800a146:	462c      	mov	r4, r5
 800a148:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a14c:	3601      	adds	r6, #1
 800a14e:	f8c3 8014 	str.w	r8, [r3, #20]
 800a152:	6126      	str	r6, [r4, #16]
 800a154:	4620      	mov	r0, r4
 800a156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a15a:	bf00      	nop
 800a15c:	0800c7d3 	.word	0x0800c7d3
 800a160:	0800c7e4 	.word	0x0800c7e4

0800a164 <__hi0bits>:
 800a164:	0c03      	lsrs	r3, r0, #16
 800a166:	041b      	lsls	r3, r3, #16
 800a168:	b9d3      	cbnz	r3, 800a1a0 <__hi0bits+0x3c>
 800a16a:	0400      	lsls	r0, r0, #16
 800a16c:	2310      	movs	r3, #16
 800a16e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a172:	bf04      	itt	eq
 800a174:	0200      	lsleq	r0, r0, #8
 800a176:	3308      	addeq	r3, #8
 800a178:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a17c:	bf04      	itt	eq
 800a17e:	0100      	lsleq	r0, r0, #4
 800a180:	3304      	addeq	r3, #4
 800a182:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a186:	bf04      	itt	eq
 800a188:	0080      	lsleq	r0, r0, #2
 800a18a:	3302      	addeq	r3, #2
 800a18c:	2800      	cmp	r0, #0
 800a18e:	db05      	blt.n	800a19c <__hi0bits+0x38>
 800a190:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a194:	f103 0301 	add.w	r3, r3, #1
 800a198:	bf08      	it	eq
 800a19a:	2320      	moveq	r3, #32
 800a19c:	4618      	mov	r0, r3
 800a19e:	4770      	bx	lr
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	e7e4      	b.n	800a16e <__hi0bits+0xa>

0800a1a4 <__lo0bits>:
 800a1a4:	6803      	ldr	r3, [r0, #0]
 800a1a6:	f013 0207 	ands.w	r2, r3, #7
 800a1aa:	4601      	mov	r1, r0
 800a1ac:	d00b      	beq.n	800a1c6 <__lo0bits+0x22>
 800a1ae:	07da      	lsls	r2, r3, #31
 800a1b0:	d424      	bmi.n	800a1fc <__lo0bits+0x58>
 800a1b2:	0798      	lsls	r0, r3, #30
 800a1b4:	bf49      	itett	mi
 800a1b6:	085b      	lsrmi	r3, r3, #1
 800a1b8:	089b      	lsrpl	r3, r3, #2
 800a1ba:	2001      	movmi	r0, #1
 800a1bc:	600b      	strmi	r3, [r1, #0]
 800a1be:	bf5c      	itt	pl
 800a1c0:	600b      	strpl	r3, [r1, #0]
 800a1c2:	2002      	movpl	r0, #2
 800a1c4:	4770      	bx	lr
 800a1c6:	b298      	uxth	r0, r3
 800a1c8:	b9b0      	cbnz	r0, 800a1f8 <__lo0bits+0x54>
 800a1ca:	0c1b      	lsrs	r3, r3, #16
 800a1cc:	2010      	movs	r0, #16
 800a1ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a1d2:	bf04      	itt	eq
 800a1d4:	0a1b      	lsreq	r3, r3, #8
 800a1d6:	3008      	addeq	r0, #8
 800a1d8:	071a      	lsls	r2, r3, #28
 800a1da:	bf04      	itt	eq
 800a1dc:	091b      	lsreq	r3, r3, #4
 800a1de:	3004      	addeq	r0, #4
 800a1e0:	079a      	lsls	r2, r3, #30
 800a1e2:	bf04      	itt	eq
 800a1e4:	089b      	lsreq	r3, r3, #2
 800a1e6:	3002      	addeq	r0, #2
 800a1e8:	07da      	lsls	r2, r3, #31
 800a1ea:	d403      	bmi.n	800a1f4 <__lo0bits+0x50>
 800a1ec:	085b      	lsrs	r3, r3, #1
 800a1ee:	f100 0001 	add.w	r0, r0, #1
 800a1f2:	d005      	beq.n	800a200 <__lo0bits+0x5c>
 800a1f4:	600b      	str	r3, [r1, #0]
 800a1f6:	4770      	bx	lr
 800a1f8:	4610      	mov	r0, r2
 800a1fa:	e7e8      	b.n	800a1ce <__lo0bits+0x2a>
 800a1fc:	2000      	movs	r0, #0
 800a1fe:	4770      	bx	lr
 800a200:	2020      	movs	r0, #32
 800a202:	4770      	bx	lr

0800a204 <__i2b>:
 800a204:	b510      	push	{r4, lr}
 800a206:	460c      	mov	r4, r1
 800a208:	2101      	movs	r1, #1
 800a20a:	f7ff feff 	bl	800a00c <_Balloc>
 800a20e:	4602      	mov	r2, r0
 800a210:	b928      	cbnz	r0, 800a21e <__i2b+0x1a>
 800a212:	4b05      	ldr	r3, [pc, #20]	; (800a228 <__i2b+0x24>)
 800a214:	4805      	ldr	r0, [pc, #20]	; (800a22c <__i2b+0x28>)
 800a216:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a21a:	f000 fc9b 	bl	800ab54 <__assert_func>
 800a21e:	2301      	movs	r3, #1
 800a220:	6144      	str	r4, [r0, #20]
 800a222:	6103      	str	r3, [r0, #16]
 800a224:	bd10      	pop	{r4, pc}
 800a226:	bf00      	nop
 800a228:	0800c7d3 	.word	0x0800c7d3
 800a22c:	0800c7e4 	.word	0x0800c7e4

0800a230 <__multiply>:
 800a230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a234:	4614      	mov	r4, r2
 800a236:	690a      	ldr	r2, [r1, #16]
 800a238:	6923      	ldr	r3, [r4, #16]
 800a23a:	429a      	cmp	r2, r3
 800a23c:	bfb8      	it	lt
 800a23e:	460b      	movlt	r3, r1
 800a240:	460d      	mov	r5, r1
 800a242:	bfbc      	itt	lt
 800a244:	4625      	movlt	r5, r4
 800a246:	461c      	movlt	r4, r3
 800a248:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a24c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a250:	68ab      	ldr	r3, [r5, #8]
 800a252:	6869      	ldr	r1, [r5, #4]
 800a254:	eb0a 0709 	add.w	r7, sl, r9
 800a258:	42bb      	cmp	r3, r7
 800a25a:	b085      	sub	sp, #20
 800a25c:	bfb8      	it	lt
 800a25e:	3101      	addlt	r1, #1
 800a260:	f7ff fed4 	bl	800a00c <_Balloc>
 800a264:	b930      	cbnz	r0, 800a274 <__multiply+0x44>
 800a266:	4602      	mov	r2, r0
 800a268:	4b42      	ldr	r3, [pc, #264]	; (800a374 <__multiply+0x144>)
 800a26a:	4843      	ldr	r0, [pc, #268]	; (800a378 <__multiply+0x148>)
 800a26c:	f240 115d 	movw	r1, #349	; 0x15d
 800a270:	f000 fc70 	bl	800ab54 <__assert_func>
 800a274:	f100 0614 	add.w	r6, r0, #20
 800a278:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a27c:	4633      	mov	r3, r6
 800a27e:	2200      	movs	r2, #0
 800a280:	4543      	cmp	r3, r8
 800a282:	d31e      	bcc.n	800a2c2 <__multiply+0x92>
 800a284:	f105 0c14 	add.w	ip, r5, #20
 800a288:	f104 0314 	add.w	r3, r4, #20
 800a28c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a290:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a294:	9202      	str	r2, [sp, #8]
 800a296:	ebac 0205 	sub.w	r2, ip, r5
 800a29a:	3a15      	subs	r2, #21
 800a29c:	f022 0203 	bic.w	r2, r2, #3
 800a2a0:	3204      	adds	r2, #4
 800a2a2:	f105 0115 	add.w	r1, r5, #21
 800a2a6:	458c      	cmp	ip, r1
 800a2a8:	bf38      	it	cc
 800a2aa:	2204      	movcc	r2, #4
 800a2ac:	9201      	str	r2, [sp, #4]
 800a2ae:	9a02      	ldr	r2, [sp, #8]
 800a2b0:	9303      	str	r3, [sp, #12]
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d808      	bhi.n	800a2c8 <__multiply+0x98>
 800a2b6:	2f00      	cmp	r7, #0
 800a2b8:	dc55      	bgt.n	800a366 <__multiply+0x136>
 800a2ba:	6107      	str	r7, [r0, #16]
 800a2bc:	b005      	add	sp, #20
 800a2be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2c2:	f843 2b04 	str.w	r2, [r3], #4
 800a2c6:	e7db      	b.n	800a280 <__multiply+0x50>
 800a2c8:	f8b3 a000 	ldrh.w	sl, [r3]
 800a2cc:	f1ba 0f00 	cmp.w	sl, #0
 800a2d0:	d020      	beq.n	800a314 <__multiply+0xe4>
 800a2d2:	f105 0e14 	add.w	lr, r5, #20
 800a2d6:	46b1      	mov	r9, r6
 800a2d8:	2200      	movs	r2, #0
 800a2da:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a2de:	f8d9 b000 	ldr.w	fp, [r9]
 800a2e2:	b2a1      	uxth	r1, r4
 800a2e4:	fa1f fb8b 	uxth.w	fp, fp
 800a2e8:	fb0a b101 	mla	r1, sl, r1, fp
 800a2ec:	4411      	add	r1, r2
 800a2ee:	f8d9 2000 	ldr.w	r2, [r9]
 800a2f2:	0c24      	lsrs	r4, r4, #16
 800a2f4:	0c12      	lsrs	r2, r2, #16
 800a2f6:	fb0a 2404 	mla	r4, sl, r4, r2
 800a2fa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a2fe:	b289      	uxth	r1, r1
 800a300:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a304:	45f4      	cmp	ip, lr
 800a306:	f849 1b04 	str.w	r1, [r9], #4
 800a30a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a30e:	d8e4      	bhi.n	800a2da <__multiply+0xaa>
 800a310:	9901      	ldr	r1, [sp, #4]
 800a312:	5072      	str	r2, [r6, r1]
 800a314:	9a03      	ldr	r2, [sp, #12]
 800a316:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a31a:	3304      	adds	r3, #4
 800a31c:	f1b9 0f00 	cmp.w	r9, #0
 800a320:	d01f      	beq.n	800a362 <__multiply+0x132>
 800a322:	6834      	ldr	r4, [r6, #0]
 800a324:	f105 0114 	add.w	r1, r5, #20
 800a328:	46b6      	mov	lr, r6
 800a32a:	f04f 0a00 	mov.w	sl, #0
 800a32e:	880a      	ldrh	r2, [r1, #0]
 800a330:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a334:	fb09 b202 	mla	r2, r9, r2, fp
 800a338:	4492      	add	sl, r2
 800a33a:	b2a4      	uxth	r4, r4
 800a33c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a340:	f84e 4b04 	str.w	r4, [lr], #4
 800a344:	f851 4b04 	ldr.w	r4, [r1], #4
 800a348:	f8be 2000 	ldrh.w	r2, [lr]
 800a34c:	0c24      	lsrs	r4, r4, #16
 800a34e:	fb09 2404 	mla	r4, r9, r4, r2
 800a352:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a356:	458c      	cmp	ip, r1
 800a358:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a35c:	d8e7      	bhi.n	800a32e <__multiply+0xfe>
 800a35e:	9a01      	ldr	r2, [sp, #4]
 800a360:	50b4      	str	r4, [r6, r2]
 800a362:	3604      	adds	r6, #4
 800a364:	e7a3      	b.n	800a2ae <__multiply+0x7e>
 800a366:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d1a5      	bne.n	800a2ba <__multiply+0x8a>
 800a36e:	3f01      	subs	r7, #1
 800a370:	e7a1      	b.n	800a2b6 <__multiply+0x86>
 800a372:	bf00      	nop
 800a374:	0800c7d3 	.word	0x0800c7d3
 800a378:	0800c7e4 	.word	0x0800c7e4

0800a37c <__pow5mult>:
 800a37c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a380:	4615      	mov	r5, r2
 800a382:	f012 0203 	ands.w	r2, r2, #3
 800a386:	4606      	mov	r6, r0
 800a388:	460f      	mov	r7, r1
 800a38a:	d007      	beq.n	800a39c <__pow5mult+0x20>
 800a38c:	4c25      	ldr	r4, [pc, #148]	; (800a424 <__pow5mult+0xa8>)
 800a38e:	3a01      	subs	r2, #1
 800a390:	2300      	movs	r3, #0
 800a392:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a396:	f7ff fe9b 	bl	800a0d0 <__multadd>
 800a39a:	4607      	mov	r7, r0
 800a39c:	10ad      	asrs	r5, r5, #2
 800a39e:	d03d      	beq.n	800a41c <__pow5mult+0xa0>
 800a3a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a3a2:	b97c      	cbnz	r4, 800a3c4 <__pow5mult+0x48>
 800a3a4:	2010      	movs	r0, #16
 800a3a6:	f7ff fe1b 	bl	8009fe0 <malloc>
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	6270      	str	r0, [r6, #36]	; 0x24
 800a3ae:	b928      	cbnz	r0, 800a3bc <__pow5mult+0x40>
 800a3b0:	4b1d      	ldr	r3, [pc, #116]	; (800a428 <__pow5mult+0xac>)
 800a3b2:	481e      	ldr	r0, [pc, #120]	; (800a42c <__pow5mult+0xb0>)
 800a3b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a3b8:	f000 fbcc 	bl	800ab54 <__assert_func>
 800a3bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a3c0:	6004      	str	r4, [r0, #0]
 800a3c2:	60c4      	str	r4, [r0, #12]
 800a3c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a3c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a3cc:	b94c      	cbnz	r4, 800a3e2 <__pow5mult+0x66>
 800a3ce:	f240 2171 	movw	r1, #625	; 0x271
 800a3d2:	4630      	mov	r0, r6
 800a3d4:	f7ff ff16 	bl	800a204 <__i2b>
 800a3d8:	2300      	movs	r3, #0
 800a3da:	f8c8 0008 	str.w	r0, [r8, #8]
 800a3de:	4604      	mov	r4, r0
 800a3e0:	6003      	str	r3, [r0, #0]
 800a3e2:	f04f 0900 	mov.w	r9, #0
 800a3e6:	07eb      	lsls	r3, r5, #31
 800a3e8:	d50a      	bpl.n	800a400 <__pow5mult+0x84>
 800a3ea:	4639      	mov	r1, r7
 800a3ec:	4622      	mov	r2, r4
 800a3ee:	4630      	mov	r0, r6
 800a3f0:	f7ff ff1e 	bl	800a230 <__multiply>
 800a3f4:	4639      	mov	r1, r7
 800a3f6:	4680      	mov	r8, r0
 800a3f8:	4630      	mov	r0, r6
 800a3fa:	f7ff fe47 	bl	800a08c <_Bfree>
 800a3fe:	4647      	mov	r7, r8
 800a400:	106d      	asrs	r5, r5, #1
 800a402:	d00b      	beq.n	800a41c <__pow5mult+0xa0>
 800a404:	6820      	ldr	r0, [r4, #0]
 800a406:	b938      	cbnz	r0, 800a418 <__pow5mult+0x9c>
 800a408:	4622      	mov	r2, r4
 800a40a:	4621      	mov	r1, r4
 800a40c:	4630      	mov	r0, r6
 800a40e:	f7ff ff0f 	bl	800a230 <__multiply>
 800a412:	6020      	str	r0, [r4, #0]
 800a414:	f8c0 9000 	str.w	r9, [r0]
 800a418:	4604      	mov	r4, r0
 800a41a:	e7e4      	b.n	800a3e6 <__pow5mult+0x6a>
 800a41c:	4638      	mov	r0, r7
 800a41e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a422:	bf00      	nop
 800a424:	0800c938 	.word	0x0800c938
 800a428:	0800c75d 	.word	0x0800c75d
 800a42c:	0800c7e4 	.word	0x0800c7e4

0800a430 <__lshift>:
 800a430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a434:	460c      	mov	r4, r1
 800a436:	6849      	ldr	r1, [r1, #4]
 800a438:	6923      	ldr	r3, [r4, #16]
 800a43a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a43e:	68a3      	ldr	r3, [r4, #8]
 800a440:	4607      	mov	r7, r0
 800a442:	4691      	mov	r9, r2
 800a444:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a448:	f108 0601 	add.w	r6, r8, #1
 800a44c:	42b3      	cmp	r3, r6
 800a44e:	db0b      	blt.n	800a468 <__lshift+0x38>
 800a450:	4638      	mov	r0, r7
 800a452:	f7ff fddb 	bl	800a00c <_Balloc>
 800a456:	4605      	mov	r5, r0
 800a458:	b948      	cbnz	r0, 800a46e <__lshift+0x3e>
 800a45a:	4602      	mov	r2, r0
 800a45c:	4b28      	ldr	r3, [pc, #160]	; (800a500 <__lshift+0xd0>)
 800a45e:	4829      	ldr	r0, [pc, #164]	; (800a504 <__lshift+0xd4>)
 800a460:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a464:	f000 fb76 	bl	800ab54 <__assert_func>
 800a468:	3101      	adds	r1, #1
 800a46a:	005b      	lsls	r3, r3, #1
 800a46c:	e7ee      	b.n	800a44c <__lshift+0x1c>
 800a46e:	2300      	movs	r3, #0
 800a470:	f100 0114 	add.w	r1, r0, #20
 800a474:	f100 0210 	add.w	r2, r0, #16
 800a478:	4618      	mov	r0, r3
 800a47a:	4553      	cmp	r3, sl
 800a47c:	db33      	blt.n	800a4e6 <__lshift+0xb6>
 800a47e:	6920      	ldr	r0, [r4, #16]
 800a480:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a484:	f104 0314 	add.w	r3, r4, #20
 800a488:	f019 091f 	ands.w	r9, r9, #31
 800a48c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a490:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a494:	d02b      	beq.n	800a4ee <__lshift+0xbe>
 800a496:	f1c9 0e20 	rsb	lr, r9, #32
 800a49a:	468a      	mov	sl, r1
 800a49c:	2200      	movs	r2, #0
 800a49e:	6818      	ldr	r0, [r3, #0]
 800a4a0:	fa00 f009 	lsl.w	r0, r0, r9
 800a4a4:	4302      	orrs	r2, r0
 800a4a6:	f84a 2b04 	str.w	r2, [sl], #4
 800a4aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4ae:	459c      	cmp	ip, r3
 800a4b0:	fa22 f20e 	lsr.w	r2, r2, lr
 800a4b4:	d8f3      	bhi.n	800a49e <__lshift+0x6e>
 800a4b6:	ebac 0304 	sub.w	r3, ip, r4
 800a4ba:	3b15      	subs	r3, #21
 800a4bc:	f023 0303 	bic.w	r3, r3, #3
 800a4c0:	3304      	adds	r3, #4
 800a4c2:	f104 0015 	add.w	r0, r4, #21
 800a4c6:	4584      	cmp	ip, r0
 800a4c8:	bf38      	it	cc
 800a4ca:	2304      	movcc	r3, #4
 800a4cc:	50ca      	str	r2, [r1, r3]
 800a4ce:	b10a      	cbz	r2, 800a4d4 <__lshift+0xa4>
 800a4d0:	f108 0602 	add.w	r6, r8, #2
 800a4d4:	3e01      	subs	r6, #1
 800a4d6:	4638      	mov	r0, r7
 800a4d8:	612e      	str	r6, [r5, #16]
 800a4da:	4621      	mov	r1, r4
 800a4dc:	f7ff fdd6 	bl	800a08c <_Bfree>
 800a4e0:	4628      	mov	r0, r5
 800a4e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4e6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	e7c5      	b.n	800a47a <__lshift+0x4a>
 800a4ee:	3904      	subs	r1, #4
 800a4f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4f4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a4f8:	459c      	cmp	ip, r3
 800a4fa:	d8f9      	bhi.n	800a4f0 <__lshift+0xc0>
 800a4fc:	e7ea      	b.n	800a4d4 <__lshift+0xa4>
 800a4fe:	bf00      	nop
 800a500:	0800c7d3 	.word	0x0800c7d3
 800a504:	0800c7e4 	.word	0x0800c7e4

0800a508 <__mcmp>:
 800a508:	b530      	push	{r4, r5, lr}
 800a50a:	6902      	ldr	r2, [r0, #16]
 800a50c:	690c      	ldr	r4, [r1, #16]
 800a50e:	1b12      	subs	r2, r2, r4
 800a510:	d10e      	bne.n	800a530 <__mcmp+0x28>
 800a512:	f100 0314 	add.w	r3, r0, #20
 800a516:	3114      	adds	r1, #20
 800a518:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a51c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a520:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a524:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a528:	42a5      	cmp	r5, r4
 800a52a:	d003      	beq.n	800a534 <__mcmp+0x2c>
 800a52c:	d305      	bcc.n	800a53a <__mcmp+0x32>
 800a52e:	2201      	movs	r2, #1
 800a530:	4610      	mov	r0, r2
 800a532:	bd30      	pop	{r4, r5, pc}
 800a534:	4283      	cmp	r3, r0
 800a536:	d3f3      	bcc.n	800a520 <__mcmp+0x18>
 800a538:	e7fa      	b.n	800a530 <__mcmp+0x28>
 800a53a:	f04f 32ff 	mov.w	r2, #4294967295
 800a53e:	e7f7      	b.n	800a530 <__mcmp+0x28>

0800a540 <__mdiff>:
 800a540:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a544:	460c      	mov	r4, r1
 800a546:	4606      	mov	r6, r0
 800a548:	4611      	mov	r1, r2
 800a54a:	4620      	mov	r0, r4
 800a54c:	4617      	mov	r7, r2
 800a54e:	f7ff ffdb 	bl	800a508 <__mcmp>
 800a552:	1e05      	subs	r5, r0, #0
 800a554:	d110      	bne.n	800a578 <__mdiff+0x38>
 800a556:	4629      	mov	r1, r5
 800a558:	4630      	mov	r0, r6
 800a55a:	f7ff fd57 	bl	800a00c <_Balloc>
 800a55e:	b930      	cbnz	r0, 800a56e <__mdiff+0x2e>
 800a560:	4b39      	ldr	r3, [pc, #228]	; (800a648 <__mdiff+0x108>)
 800a562:	4602      	mov	r2, r0
 800a564:	f240 2132 	movw	r1, #562	; 0x232
 800a568:	4838      	ldr	r0, [pc, #224]	; (800a64c <__mdiff+0x10c>)
 800a56a:	f000 faf3 	bl	800ab54 <__assert_func>
 800a56e:	2301      	movs	r3, #1
 800a570:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a574:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a578:	bfa4      	itt	ge
 800a57a:	463b      	movge	r3, r7
 800a57c:	4627      	movge	r7, r4
 800a57e:	4630      	mov	r0, r6
 800a580:	6879      	ldr	r1, [r7, #4]
 800a582:	bfa6      	itte	ge
 800a584:	461c      	movge	r4, r3
 800a586:	2500      	movge	r5, #0
 800a588:	2501      	movlt	r5, #1
 800a58a:	f7ff fd3f 	bl	800a00c <_Balloc>
 800a58e:	b920      	cbnz	r0, 800a59a <__mdiff+0x5a>
 800a590:	4b2d      	ldr	r3, [pc, #180]	; (800a648 <__mdiff+0x108>)
 800a592:	4602      	mov	r2, r0
 800a594:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a598:	e7e6      	b.n	800a568 <__mdiff+0x28>
 800a59a:	693e      	ldr	r6, [r7, #16]
 800a59c:	60c5      	str	r5, [r0, #12]
 800a59e:	6925      	ldr	r5, [r4, #16]
 800a5a0:	f107 0114 	add.w	r1, r7, #20
 800a5a4:	f104 0914 	add.w	r9, r4, #20
 800a5a8:	f100 0e14 	add.w	lr, r0, #20
 800a5ac:	f107 0210 	add.w	r2, r7, #16
 800a5b0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a5b4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a5b8:	46f2      	mov	sl, lr
 800a5ba:	2700      	movs	r7, #0
 800a5bc:	f859 3b04 	ldr.w	r3, [r9], #4
 800a5c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a5c4:	fa1f f883 	uxth.w	r8, r3
 800a5c8:	fa17 f78b 	uxtah	r7, r7, fp
 800a5cc:	0c1b      	lsrs	r3, r3, #16
 800a5ce:	eba7 0808 	sub.w	r8, r7, r8
 800a5d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a5d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a5da:	fa1f f888 	uxth.w	r8, r8
 800a5de:	141f      	asrs	r7, r3, #16
 800a5e0:	454d      	cmp	r5, r9
 800a5e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a5e6:	f84a 3b04 	str.w	r3, [sl], #4
 800a5ea:	d8e7      	bhi.n	800a5bc <__mdiff+0x7c>
 800a5ec:	1b2b      	subs	r3, r5, r4
 800a5ee:	3b15      	subs	r3, #21
 800a5f0:	f023 0303 	bic.w	r3, r3, #3
 800a5f4:	3304      	adds	r3, #4
 800a5f6:	3415      	adds	r4, #21
 800a5f8:	42a5      	cmp	r5, r4
 800a5fa:	bf38      	it	cc
 800a5fc:	2304      	movcc	r3, #4
 800a5fe:	4419      	add	r1, r3
 800a600:	4473      	add	r3, lr
 800a602:	469e      	mov	lr, r3
 800a604:	460d      	mov	r5, r1
 800a606:	4565      	cmp	r5, ip
 800a608:	d30e      	bcc.n	800a628 <__mdiff+0xe8>
 800a60a:	f10c 0203 	add.w	r2, ip, #3
 800a60e:	1a52      	subs	r2, r2, r1
 800a610:	f022 0203 	bic.w	r2, r2, #3
 800a614:	3903      	subs	r1, #3
 800a616:	458c      	cmp	ip, r1
 800a618:	bf38      	it	cc
 800a61a:	2200      	movcc	r2, #0
 800a61c:	441a      	add	r2, r3
 800a61e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a622:	b17b      	cbz	r3, 800a644 <__mdiff+0x104>
 800a624:	6106      	str	r6, [r0, #16]
 800a626:	e7a5      	b.n	800a574 <__mdiff+0x34>
 800a628:	f855 8b04 	ldr.w	r8, [r5], #4
 800a62c:	fa17 f488 	uxtah	r4, r7, r8
 800a630:	1422      	asrs	r2, r4, #16
 800a632:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a636:	b2a4      	uxth	r4, r4
 800a638:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a63c:	f84e 4b04 	str.w	r4, [lr], #4
 800a640:	1417      	asrs	r7, r2, #16
 800a642:	e7e0      	b.n	800a606 <__mdiff+0xc6>
 800a644:	3e01      	subs	r6, #1
 800a646:	e7ea      	b.n	800a61e <__mdiff+0xde>
 800a648:	0800c7d3 	.word	0x0800c7d3
 800a64c:	0800c7e4 	.word	0x0800c7e4

0800a650 <__d2b>:
 800a650:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a654:	4689      	mov	r9, r1
 800a656:	2101      	movs	r1, #1
 800a658:	ec57 6b10 	vmov	r6, r7, d0
 800a65c:	4690      	mov	r8, r2
 800a65e:	f7ff fcd5 	bl	800a00c <_Balloc>
 800a662:	4604      	mov	r4, r0
 800a664:	b930      	cbnz	r0, 800a674 <__d2b+0x24>
 800a666:	4602      	mov	r2, r0
 800a668:	4b25      	ldr	r3, [pc, #148]	; (800a700 <__d2b+0xb0>)
 800a66a:	4826      	ldr	r0, [pc, #152]	; (800a704 <__d2b+0xb4>)
 800a66c:	f240 310a 	movw	r1, #778	; 0x30a
 800a670:	f000 fa70 	bl	800ab54 <__assert_func>
 800a674:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a678:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a67c:	bb35      	cbnz	r5, 800a6cc <__d2b+0x7c>
 800a67e:	2e00      	cmp	r6, #0
 800a680:	9301      	str	r3, [sp, #4]
 800a682:	d028      	beq.n	800a6d6 <__d2b+0x86>
 800a684:	4668      	mov	r0, sp
 800a686:	9600      	str	r6, [sp, #0]
 800a688:	f7ff fd8c 	bl	800a1a4 <__lo0bits>
 800a68c:	9900      	ldr	r1, [sp, #0]
 800a68e:	b300      	cbz	r0, 800a6d2 <__d2b+0x82>
 800a690:	9a01      	ldr	r2, [sp, #4]
 800a692:	f1c0 0320 	rsb	r3, r0, #32
 800a696:	fa02 f303 	lsl.w	r3, r2, r3
 800a69a:	430b      	orrs	r3, r1
 800a69c:	40c2      	lsrs	r2, r0
 800a69e:	6163      	str	r3, [r4, #20]
 800a6a0:	9201      	str	r2, [sp, #4]
 800a6a2:	9b01      	ldr	r3, [sp, #4]
 800a6a4:	61a3      	str	r3, [r4, #24]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	bf14      	ite	ne
 800a6aa:	2202      	movne	r2, #2
 800a6ac:	2201      	moveq	r2, #1
 800a6ae:	6122      	str	r2, [r4, #16]
 800a6b0:	b1d5      	cbz	r5, 800a6e8 <__d2b+0x98>
 800a6b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a6b6:	4405      	add	r5, r0
 800a6b8:	f8c9 5000 	str.w	r5, [r9]
 800a6bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a6c0:	f8c8 0000 	str.w	r0, [r8]
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	b003      	add	sp, #12
 800a6c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a6d0:	e7d5      	b.n	800a67e <__d2b+0x2e>
 800a6d2:	6161      	str	r1, [r4, #20]
 800a6d4:	e7e5      	b.n	800a6a2 <__d2b+0x52>
 800a6d6:	a801      	add	r0, sp, #4
 800a6d8:	f7ff fd64 	bl	800a1a4 <__lo0bits>
 800a6dc:	9b01      	ldr	r3, [sp, #4]
 800a6de:	6163      	str	r3, [r4, #20]
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	6122      	str	r2, [r4, #16]
 800a6e4:	3020      	adds	r0, #32
 800a6e6:	e7e3      	b.n	800a6b0 <__d2b+0x60>
 800a6e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a6ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a6f0:	f8c9 0000 	str.w	r0, [r9]
 800a6f4:	6918      	ldr	r0, [r3, #16]
 800a6f6:	f7ff fd35 	bl	800a164 <__hi0bits>
 800a6fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a6fe:	e7df      	b.n	800a6c0 <__d2b+0x70>
 800a700:	0800c7d3 	.word	0x0800c7d3
 800a704:	0800c7e4 	.word	0x0800c7e4

0800a708 <_calloc_r>:
 800a708:	b513      	push	{r0, r1, r4, lr}
 800a70a:	434a      	muls	r2, r1
 800a70c:	4611      	mov	r1, r2
 800a70e:	9201      	str	r2, [sp, #4]
 800a710:	f000 f85a 	bl	800a7c8 <_malloc_r>
 800a714:	4604      	mov	r4, r0
 800a716:	b118      	cbz	r0, 800a720 <_calloc_r+0x18>
 800a718:	9a01      	ldr	r2, [sp, #4]
 800a71a:	2100      	movs	r1, #0
 800a71c:	f7fe f950 	bl	80089c0 <memset>
 800a720:	4620      	mov	r0, r4
 800a722:	b002      	add	sp, #8
 800a724:	bd10      	pop	{r4, pc}
	...

0800a728 <_free_r>:
 800a728:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a72a:	2900      	cmp	r1, #0
 800a72c:	d048      	beq.n	800a7c0 <_free_r+0x98>
 800a72e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a732:	9001      	str	r0, [sp, #4]
 800a734:	2b00      	cmp	r3, #0
 800a736:	f1a1 0404 	sub.w	r4, r1, #4
 800a73a:	bfb8      	it	lt
 800a73c:	18e4      	addlt	r4, r4, r3
 800a73e:	f000 fa65 	bl	800ac0c <__malloc_lock>
 800a742:	4a20      	ldr	r2, [pc, #128]	; (800a7c4 <_free_r+0x9c>)
 800a744:	9801      	ldr	r0, [sp, #4]
 800a746:	6813      	ldr	r3, [r2, #0]
 800a748:	4615      	mov	r5, r2
 800a74a:	b933      	cbnz	r3, 800a75a <_free_r+0x32>
 800a74c:	6063      	str	r3, [r4, #4]
 800a74e:	6014      	str	r4, [r2, #0]
 800a750:	b003      	add	sp, #12
 800a752:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a756:	f000 ba5f 	b.w	800ac18 <__malloc_unlock>
 800a75a:	42a3      	cmp	r3, r4
 800a75c:	d90b      	bls.n	800a776 <_free_r+0x4e>
 800a75e:	6821      	ldr	r1, [r4, #0]
 800a760:	1862      	adds	r2, r4, r1
 800a762:	4293      	cmp	r3, r2
 800a764:	bf04      	itt	eq
 800a766:	681a      	ldreq	r2, [r3, #0]
 800a768:	685b      	ldreq	r3, [r3, #4]
 800a76a:	6063      	str	r3, [r4, #4]
 800a76c:	bf04      	itt	eq
 800a76e:	1852      	addeq	r2, r2, r1
 800a770:	6022      	streq	r2, [r4, #0]
 800a772:	602c      	str	r4, [r5, #0]
 800a774:	e7ec      	b.n	800a750 <_free_r+0x28>
 800a776:	461a      	mov	r2, r3
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	b10b      	cbz	r3, 800a780 <_free_r+0x58>
 800a77c:	42a3      	cmp	r3, r4
 800a77e:	d9fa      	bls.n	800a776 <_free_r+0x4e>
 800a780:	6811      	ldr	r1, [r2, #0]
 800a782:	1855      	adds	r5, r2, r1
 800a784:	42a5      	cmp	r5, r4
 800a786:	d10b      	bne.n	800a7a0 <_free_r+0x78>
 800a788:	6824      	ldr	r4, [r4, #0]
 800a78a:	4421      	add	r1, r4
 800a78c:	1854      	adds	r4, r2, r1
 800a78e:	42a3      	cmp	r3, r4
 800a790:	6011      	str	r1, [r2, #0]
 800a792:	d1dd      	bne.n	800a750 <_free_r+0x28>
 800a794:	681c      	ldr	r4, [r3, #0]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	6053      	str	r3, [r2, #4]
 800a79a:	4421      	add	r1, r4
 800a79c:	6011      	str	r1, [r2, #0]
 800a79e:	e7d7      	b.n	800a750 <_free_r+0x28>
 800a7a0:	d902      	bls.n	800a7a8 <_free_r+0x80>
 800a7a2:	230c      	movs	r3, #12
 800a7a4:	6003      	str	r3, [r0, #0]
 800a7a6:	e7d3      	b.n	800a750 <_free_r+0x28>
 800a7a8:	6825      	ldr	r5, [r4, #0]
 800a7aa:	1961      	adds	r1, r4, r5
 800a7ac:	428b      	cmp	r3, r1
 800a7ae:	bf04      	itt	eq
 800a7b0:	6819      	ldreq	r1, [r3, #0]
 800a7b2:	685b      	ldreq	r3, [r3, #4]
 800a7b4:	6063      	str	r3, [r4, #4]
 800a7b6:	bf04      	itt	eq
 800a7b8:	1949      	addeq	r1, r1, r5
 800a7ba:	6021      	streq	r1, [r4, #0]
 800a7bc:	6054      	str	r4, [r2, #4]
 800a7be:	e7c7      	b.n	800a750 <_free_r+0x28>
 800a7c0:	b003      	add	sp, #12
 800a7c2:	bd30      	pop	{r4, r5, pc}
 800a7c4:	200005e0 	.word	0x200005e0

0800a7c8 <_malloc_r>:
 800a7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ca:	1ccd      	adds	r5, r1, #3
 800a7cc:	f025 0503 	bic.w	r5, r5, #3
 800a7d0:	3508      	adds	r5, #8
 800a7d2:	2d0c      	cmp	r5, #12
 800a7d4:	bf38      	it	cc
 800a7d6:	250c      	movcc	r5, #12
 800a7d8:	2d00      	cmp	r5, #0
 800a7da:	4606      	mov	r6, r0
 800a7dc:	db01      	blt.n	800a7e2 <_malloc_r+0x1a>
 800a7de:	42a9      	cmp	r1, r5
 800a7e0:	d903      	bls.n	800a7ea <_malloc_r+0x22>
 800a7e2:	230c      	movs	r3, #12
 800a7e4:	6033      	str	r3, [r6, #0]
 800a7e6:	2000      	movs	r0, #0
 800a7e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7ea:	f000 fa0f 	bl	800ac0c <__malloc_lock>
 800a7ee:	4921      	ldr	r1, [pc, #132]	; (800a874 <_malloc_r+0xac>)
 800a7f0:	680a      	ldr	r2, [r1, #0]
 800a7f2:	4614      	mov	r4, r2
 800a7f4:	b99c      	cbnz	r4, 800a81e <_malloc_r+0x56>
 800a7f6:	4f20      	ldr	r7, [pc, #128]	; (800a878 <_malloc_r+0xb0>)
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	b923      	cbnz	r3, 800a806 <_malloc_r+0x3e>
 800a7fc:	4621      	mov	r1, r4
 800a7fe:	4630      	mov	r0, r6
 800a800:	f000 f998 	bl	800ab34 <_sbrk_r>
 800a804:	6038      	str	r0, [r7, #0]
 800a806:	4629      	mov	r1, r5
 800a808:	4630      	mov	r0, r6
 800a80a:	f000 f993 	bl	800ab34 <_sbrk_r>
 800a80e:	1c43      	adds	r3, r0, #1
 800a810:	d123      	bne.n	800a85a <_malloc_r+0x92>
 800a812:	230c      	movs	r3, #12
 800a814:	6033      	str	r3, [r6, #0]
 800a816:	4630      	mov	r0, r6
 800a818:	f000 f9fe 	bl	800ac18 <__malloc_unlock>
 800a81c:	e7e3      	b.n	800a7e6 <_malloc_r+0x1e>
 800a81e:	6823      	ldr	r3, [r4, #0]
 800a820:	1b5b      	subs	r3, r3, r5
 800a822:	d417      	bmi.n	800a854 <_malloc_r+0x8c>
 800a824:	2b0b      	cmp	r3, #11
 800a826:	d903      	bls.n	800a830 <_malloc_r+0x68>
 800a828:	6023      	str	r3, [r4, #0]
 800a82a:	441c      	add	r4, r3
 800a82c:	6025      	str	r5, [r4, #0]
 800a82e:	e004      	b.n	800a83a <_malloc_r+0x72>
 800a830:	6863      	ldr	r3, [r4, #4]
 800a832:	42a2      	cmp	r2, r4
 800a834:	bf0c      	ite	eq
 800a836:	600b      	streq	r3, [r1, #0]
 800a838:	6053      	strne	r3, [r2, #4]
 800a83a:	4630      	mov	r0, r6
 800a83c:	f000 f9ec 	bl	800ac18 <__malloc_unlock>
 800a840:	f104 000b 	add.w	r0, r4, #11
 800a844:	1d23      	adds	r3, r4, #4
 800a846:	f020 0007 	bic.w	r0, r0, #7
 800a84a:	1ac2      	subs	r2, r0, r3
 800a84c:	d0cc      	beq.n	800a7e8 <_malloc_r+0x20>
 800a84e:	1a1b      	subs	r3, r3, r0
 800a850:	50a3      	str	r3, [r4, r2]
 800a852:	e7c9      	b.n	800a7e8 <_malloc_r+0x20>
 800a854:	4622      	mov	r2, r4
 800a856:	6864      	ldr	r4, [r4, #4]
 800a858:	e7cc      	b.n	800a7f4 <_malloc_r+0x2c>
 800a85a:	1cc4      	adds	r4, r0, #3
 800a85c:	f024 0403 	bic.w	r4, r4, #3
 800a860:	42a0      	cmp	r0, r4
 800a862:	d0e3      	beq.n	800a82c <_malloc_r+0x64>
 800a864:	1a21      	subs	r1, r4, r0
 800a866:	4630      	mov	r0, r6
 800a868:	f000 f964 	bl	800ab34 <_sbrk_r>
 800a86c:	3001      	adds	r0, #1
 800a86e:	d1dd      	bne.n	800a82c <_malloc_r+0x64>
 800a870:	e7cf      	b.n	800a812 <_malloc_r+0x4a>
 800a872:	bf00      	nop
 800a874:	200005e0 	.word	0x200005e0
 800a878:	200005e4 	.word	0x200005e4

0800a87c <__ssputs_r>:
 800a87c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a880:	688e      	ldr	r6, [r1, #8]
 800a882:	429e      	cmp	r6, r3
 800a884:	4682      	mov	sl, r0
 800a886:	460c      	mov	r4, r1
 800a888:	4690      	mov	r8, r2
 800a88a:	461f      	mov	r7, r3
 800a88c:	d838      	bhi.n	800a900 <__ssputs_r+0x84>
 800a88e:	898a      	ldrh	r2, [r1, #12]
 800a890:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a894:	d032      	beq.n	800a8fc <__ssputs_r+0x80>
 800a896:	6825      	ldr	r5, [r4, #0]
 800a898:	6909      	ldr	r1, [r1, #16]
 800a89a:	eba5 0901 	sub.w	r9, r5, r1
 800a89e:	6965      	ldr	r5, [r4, #20]
 800a8a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a8a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a8a8:	3301      	adds	r3, #1
 800a8aa:	444b      	add	r3, r9
 800a8ac:	106d      	asrs	r5, r5, #1
 800a8ae:	429d      	cmp	r5, r3
 800a8b0:	bf38      	it	cc
 800a8b2:	461d      	movcc	r5, r3
 800a8b4:	0553      	lsls	r3, r2, #21
 800a8b6:	d531      	bpl.n	800a91c <__ssputs_r+0xa0>
 800a8b8:	4629      	mov	r1, r5
 800a8ba:	f7ff ff85 	bl	800a7c8 <_malloc_r>
 800a8be:	4606      	mov	r6, r0
 800a8c0:	b950      	cbnz	r0, 800a8d8 <__ssputs_r+0x5c>
 800a8c2:	230c      	movs	r3, #12
 800a8c4:	f8ca 3000 	str.w	r3, [sl]
 800a8c8:	89a3      	ldrh	r3, [r4, #12]
 800a8ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8ce:	81a3      	strh	r3, [r4, #12]
 800a8d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8d8:	6921      	ldr	r1, [r4, #16]
 800a8da:	464a      	mov	r2, r9
 800a8dc:	f7ff fb88 	bl	8009ff0 <memcpy>
 800a8e0:	89a3      	ldrh	r3, [r4, #12]
 800a8e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a8e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8ea:	81a3      	strh	r3, [r4, #12]
 800a8ec:	6126      	str	r6, [r4, #16]
 800a8ee:	6165      	str	r5, [r4, #20]
 800a8f0:	444e      	add	r6, r9
 800a8f2:	eba5 0509 	sub.w	r5, r5, r9
 800a8f6:	6026      	str	r6, [r4, #0]
 800a8f8:	60a5      	str	r5, [r4, #8]
 800a8fa:	463e      	mov	r6, r7
 800a8fc:	42be      	cmp	r6, r7
 800a8fe:	d900      	bls.n	800a902 <__ssputs_r+0x86>
 800a900:	463e      	mov	r6, r7
 800a902:	4632      	mov	r2, r6
 800a904:	6820      	ldr	r0, [r4, #0]
 800a906:	4641      	mov	r1, r8
 800a908:	f000 f966 	bl	800abd8 <memmove>
 800a90c:	68a3      	ldr	r3, [r4, #8]
 800a90e:	6822      	ldr	r2, [r4, #0]
 800a910:	1b9b      	subs	r3, r3, r6
 800a912:	4432      	add	r2, r6
 800a914:	60a3      	str	r3, [r4, #8]
 800a916:	6022      	str	r2, [r4, #0]
 800a918:	2000      	movs	r0, #0
 800a91a:	e7db      	b.n	800a8d4 <__ssputs_r+0x58>
 800a91c:	462a      	mov	r2, r5
 800a91e:	f000 f981 	bl	800ac24 <_realloc_r>
 800a922:	4606      	mov	r6, r0
 800a924:	2800      	cmp	r0, #0
 800a926:	d1e1      	bne.n	800a8ec <__ssputs_r+0x70>
 800a928:	6921      	ldr	r1, [r4, #16]
 800a92a:	4650      	mov	r0, sl
 800a92c:	f7ff fefc 	bl	800a728 <_free_r>
 800a930:	e7c7      	b.n	800a8c2 <__ssputs_r+0x46>
	...

0800a934 <_svfiprintf_r>:
 800a934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a938:	4698      	mov	r8, r3
 800a93a:	898b      	ldrh	r3, [r1, #12]
 800a93c:	061b      	lsls	r3, r3, #24
 800a93e:	b09d      	sub	sp, #116	; 0x74
 800a940:	4607      	mov	r7, r0
 800a942:	460d      	mov	r5, r1
 800a944:	4614      	mov	r4, r2
 800a946:	d50e      	bpl.n	800a966 <_svfiprintf_r+0x32>
 800a948:	690b      	ldr	r3, [r1, #16]
 800a94a:	b963      	cbnz	r3, 800a966 <_svfiprintf_r+0x32>
 800a94c:	2140      	movs	r1, #64	; 0x40
 800a94e:	f7ff ff3b 	bl	800a7c8 <_malloc_r>
 800a952:	6028      	str	r0, [r5, #0]
 800a954:	6128      	str	r0, [r5, #16]
 800a956:	b920      	cbnz	r0, 800a962 <_svfiprintf_r+0x2e>
 800a958:	230c      	movs	r3, #12
 800a95a:	603b      	str	r3, [r7, #0]
 800a95c:	f04f 30ff 	mov.w	r0, #4294967295
 800a960:	e0d1      	b.n	800ab06 <_svfiprintf_r+0x1d2>
 800a962:	2340      	movs	r3, #64	; 0x40
 800a964:	616b      	str	r3, [r5, #20]
 800a966:	2300      	movs	r3, #0
 800a968:	9309      	str	r3, [sp, #36]	; 0x24
 800a96a:	2320      	movs	r3, #32
 800a96c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a970:	f8cd 800c 	str.w	r8, [sp, #12]
 800a974:	2330      	movs	r3, #48	; 0x30
 800a976:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ab20 <_svfiprintf_r+0x1ec>
 800a97a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a97e:	f04f 0901 	mov.w	r9, #1
 800a982:	4623      	mov	r3, r4
 800a984:	469a      	mov	sl, r3
 800a986:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a98a:	b10a      	cbz	r2, 800a990 <_svfiprintf_r+0x5c>
 800a98c:	2a25      	cmp	r2, #37	; 0x25
 800a98e:	d1f9      	bne.n	800a984 <_svfiprintf_r+0x50>
 800a990:	ebba 0b04 	subs.w	fp, sl, r4
 800a994:	d00b      	beq.n	800a9ae <_svfiprintf_r+0x7a>
 800a996:	465b      	mov	r3, fp
 800a998:	4622      	mov	r2, r4
 800a99a:	4629      	mov	r1, r5
 800a99c:	4638      	mov	r0, r7
 800a99e:	f7ff ff6d 	bl	800a87c <__ssputs_r>
 800a9a2:	3001      	adds	r0, #1
 800a9a4:	f000 80aa 	beq.w	800aafc <_svfiprintf_r+0x1c8>
 800a9a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9aa:	445a      	add	r2, fp
 800a9ac:	9209      	str	r2, [sp, #36]	; 0x24
 800a9ae:	f89a 3000 	ldrb.w	r3, [sl]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	f000 80a2 	beq.w	800aafc <_svfiprintf_r+0x1c8>
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a9be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9c2:	f10a 0a01 	add.w	sl, sl, #1
 800a9c6:	9304      	str	r3, [sp, #16]
 800a9c8:	9307      	str	r3, [sp, #28]
 800a9ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a9ce:	931a      	str	r3, [sp, #104]	; 0x68
 800a9d0:	4654      	mov	r4, sl
 800a9d2:	2205      	movs	r2, #5
 800a9d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9d8:	4851      	ldr	r0, [pc, #324]	; (800ab20 <_svfiprintf_r+0x1ec>)
 800a9da:	f7f5 fc09 	bl	80001f0 <memchr>
 800a9de:	9a04      	ldr	r2, [sp, #16]
 800a9e0:	b9d8      	cbnz	r0, 800aa1a <_svfiprintf_r+0xe6>
 800a9e2:	06d0      	lsls	r0, r2, #27
 800a9e4:	bf44      	itt	mi
 800a9e6:	2320      	movmi	r3, #32
 800a9e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9ec:	0711      	lsls	r1, r2, #28
 800a9ee:	bf44      	itt	mi
 800a9f0:	232b      	movmi	r3, #43	; 0x2b
 800a9f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9f6:	f89a 3000 	ldrb.w	r3, [sl]
 800a9fa:	2b2a      	cmp	r3, #42	; 0x2a
 800a9fc:	d015      	beq.n	800aa2a <_svfiprintf_r+0xf6>
 800a9fe:	9a07      	ldr	r2, [sp, #28]
 800aa00:	4654      	mov	r4, sl
 800aa02:	2000      	movs	r0, #0
 800aa04:	f04f 0c0a 	mov.w	ip, #10
 800aa08:	4621      	mov	r1, r4
 800aa0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa0e:	3b30      	subs	r3, #48	; 0x30
 800aa10:	2b09      	cmp	r3, #9
 800aa12:	d94e      	bls.n	800aab2 <_svfiprintf_r+0x17e>
 800aa14:	b1b0      	cbz	r0, 800aa44 <_svfiprintf_r+0x110>
 800aa16:	9207      	str	r2, [sp, #28]
 800aa18:	e014      	b.n	800aa44 <_svfiprintf_r+0x110>
 800aa1a:	eba0 0308 	sub.w	r3, r0, r8
 800aa1e:	fa09 f303 	lsl.w	r3, r9, r3
 800aa22:	4313      	orrs	r3, r2
 800aa24:	9304      	str	r3, [sp, #16]
 800aa26:	46a2      	mov	sl, r4
 800aa28:	e7d2      	b.n	800a9d0 <_svfiprintf_r+0x9c>
 800aa2a:	9b03      	ldr	r3, [sp, #12]
 800aa2c:	1d19      	adds	r1, r3, #4
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	9103      	str	r1, [sp, #12]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	bfbb      	ittet	lt
 800aa36:	425b      	neglt	r3, r3
 800aa38:	f042 0202 	orrlt.w	r2, r2, #2
 800aa3c:	9307      	strge	r3, [sp, #28]
 800aa3e:	9307      	strlt	r3, [sp, #28]
 800aa40:	bfb8      	it	lt
 800aa42:	9204      	strlt	r2, [sp, #16]
 800aa44:	7823      	ldrb	r3, [r4, #0]
 800aa46:	2b2e      	cmp	r3, #46	; 0x2e
 800aa48:	d10c      	bne.n	800aa64 <_svfiprintf_r+0x130>
 800aa4a:	7863      	ldrb	r3, [r4, #1]
 800aa4c:	2b2a      	cmp	r3, #42	; 0x2a
 800aa4e:	d135      	bne.n	800aabc <_svfiprintf_r+0x188>
 800aa50:	9b03      	ldr	r3, [sp, #12]
 800aa52:	1d1a      	adds	r2, r3, #4
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	9203      	str	r2, [sp, #12]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	bfb8      	it	lt
 800aa5c:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa60:	3402      	adds	r4, #2
 800aa62:	9305      	str	r3, [sp, #20]
 800aa64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ab30 <_svfiprintf_r+0x1fc>
 800aa68:	7821      	ldrb	r1, [r4, #0]
 800aa6a:	2203      	movs	r2, #3
 800aa6c:	4650      	mov	r0, sl
 800aa6e:	f7f5 fbbf 	bl	80001f0 <memchr>
 800aa72:	b140      	cbz	r0, 800aa86 <_svfiprintf_r+0x152>
 800aa74:	2340      	movs	r3, #64	; 0x40
 800aa76:	eba0 000a 	sub.w	r0, r0, sl
 800aa7a:	fa03 f000 	lsl.w	r0, r3, r0
 800aa7e:	9b04      	ldr	r3, [sp, #16]
 800aa80:	4303      	orrs	r3, r0
 800aa82:	3401      	adds	r4, #1
 800aa84:	9304      	str	r3, [sp, #16]
 800aa86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa8a:	4826      	ldr	r0, [pc, #152]	; (800ab24 <_svfiprintf_r+0x1f0>)
 800aa8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa90:	2206      	movs	r2, #6
 800aa92:	f7f5 fbad 	bl	80001f0 <memchr>
 800aa96:	2800      	cmp	r0, #0
 800aa98:	d038      	beq.n	800ab0c <_svfiprintf_r+0x1d8>
 800aa9a:	4b23      	ldr	r3, [pc, #140]	; (800ab28 <_svfiprintf_r+0x1f4>)
 800aa9c:	bb1b      	cbnz	r3, 800aae6 <_svfiprintf_r+0x1b2>
 800aa9e:	9b03      	ldr	r3, [sp, #12]
 800aaa0:	3307      	adds	r3, #7
 800aaa2:	f023 0307 	bic.w	r3, r3, #7
 800aaa6:	3308      	adds	r3, #8
 800aaa8:	9303      	str	r3, [sp, #12]
 800aaaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaac:	4433      	add	r3, r6
 800aaae:	9309      	str	r3, [sp, #36]	; 0x24
 800aab0:	e767      	b.n	800a982 <_svfiprintf_r+0x4e>
 800aab2:	fb0c 3202 	mla	r2, ip, r2, r3
 800aab6:	460c      	mov	r4, r1
 800aab8:	2001      	movs	r0, #1
 800aaba:	e7a5      	b.n	800aa08 <_svfiprintf_r+0xd4>
 800aabc:	2300      	movs	r3, #0
 800aabe:	3401      	adds	r4, #1
 800aac0:	9305      	str	r3, [sp, #20]
 800aac2:	4619      	mov	r1, r3
 800aac4:	f04f 0c0a 	mov.w	ip, #10
 800aac8:	4620      	mov	r0, r4
 800aaca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aace:	3a30      	subs	r2, #48	; 0x30
 800aad0:	2a09      	cmp	r2, #9
 800aad2:	d903      	bls.n	800aadc <_svfiprintf_r+0x1a8>
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d0c5      	beq.n	800aa64 <_svfiprintf_r+0x130>
 800aad8:	9105      	str	r1, [sp, #20]
 800aada:	e7c3      	b.n	800aa64 <_svfiprintf_r+0x130>
 800aadc:	fb0c 2101 	mla	r1, ip, r1, r2
 800aae0:	4604      	mov	r4, r0
 800aae2:	2301      	movs	r3, #1
 800aae4:	e7f0      	b.n	800aac8 <_svfiprintf_r+0x194>
 800aae6:	ab03      	add	r3, sp, #12
 800aae8:	9300      	str	r3, [sp, #0]
 800aaea:	462a      	mov	r2, r5
 800aaec:	4b0f      	ldr	r3, [pc, #60]	; (800ab2c <_svfiprintf_r+0x1f8>)
 800aaee:	a904      	add	r1, sp, #16
 800aaf0:	4638      	mov	r0, r7
 800aaf2:	f7fe f80d 	bl	8008b10 <_printf_float>
 800aaf6:	1c42      	adds	r2, r0, #1
 800aaf8:	4606      	mov	r6, r0
 800aafa:	d1d6      	bne.n	800aaaa <_svfiprintf_r+0x176>
 800aafc:	89ab      	ldrh	r3, [r5, #12]
 800aafe:	065b      	lsls	r3, r3, #25
 800ab00:	f53f af2c 	bmi.w	800a95c <_svfiprintf_r+0x28>
 800ab04:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab06:	b01d      	add	sp, #116	; 0x74
 800ab08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab0c:	ab03      	add	r3, sp, #12
 800ab0e:	9300      	str	r3, [sp, #0]
 800ab10:	462a      	mov	r2, r5
 800ab12:	4b06      	ldr	r3, [pc, #24]	; (800ab2c <_svfiprintf_r+0x1f8>)
 800ab14:	a904      	add	r1, sp, #16
 800ab16:	4638      	mov	r0, r7
 800ab18:	f7fe fa9e 	bl	8009058 <_printf_i>
 800ab1c:	e7eb      	b.n	800aaf6 <_svfiprintf_r+0x1c2>
 800ab1e:	bf00      	nop
 800ab20:	0800c944 	.word	0x0800c944
 800ab24:	0800c94e 	.word	0x0800c94e
 800ab28:	08008b11 	.word	0x08008b11
 800ab2c:	0800a87d 	.word	0x0800a87d
 800ab30:	0800c94a 	.word	0x0800c94a

0800ab34 <_sbrk_r>:
 800ab34:	b538      	push	{r3, r4, r5, lr}
 800ab36:	4d06      	ldr	r5, [pc, #24]	; (800ab50 <_sbrk_r+0x1c>)
 800ab38:	2300      	movs	r3, #0
 800ab3a:	4604      	mov	r4, r0
 800ab3c:	4608      	mov	r0, r1
 800ab3e:	602b      	str	r3, [r5, #0]
 800ab40:	f7f7 f8e6 	bl	8001d10 <_sbrk>
 800ab44:	1c43      	adds	r3, r0, #1
 800ab46:	d102      	bne.n	800ab4e <_sbrk_r+0x1a>
 800ab48:	682b      	ldr	r3, [r5, #0]
 800ab4a:	b103      	cbz	r3, 800ab4e <_sbrk_r+0x1a>
 800ab4c:	6023      	str	r3, [r4, #0]
 800ab4e:	bd38      	pop	{r3, r4, r5, pc}
 800ab50:	20001f34 	.word	0x20001f34

0800ab54 <__assert_func>:
 800ab54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab56:	4614      	mov	r4, r2
 800ab58:	461a      	mov	r2, r3
 800ab5a:	4b09      	ldr	r3, [pc, #36]	; (800ab80 <__assert_func+0x2c>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	4605      	mov	r5, r0
 800ab60:	68d8      	ldr	r0, [r3, #12]
 800ab62:	b14c      	cbz	r4, 800ab78 <__assert_func+0x24>
 800ab64:	4b07      	ldr	r3, [pc, #28]	; (800ab84 <__assert_func+0x30>)
 800ab66:	9100      	str	r1, [sp, #0]
 800ab68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab6c:	4906      	ldr	r1, [pc, #24]	; (800ab88 <__assert_func+0x34>)
 800ab6e:	462b      	mov	r3, r5
 800ab70:	f000 f80e 	bl	800ab90 <fiprintf>
 800ab74:	f000 faa4 	bl	800b0c0 <abort>
 800ab78:	4b04      	ldr	r3, [pc, #16]	; (800ab8c <__assert_func+0x38>)
 800ab7a:	461c      	mov	r4, r3
 800ab7c:	e7f3      	b.n	800ab66 <__assert_func+0x12>
 800ab7e:	bf00      	nop
 800ab80:	20000180 	.word	0x20000180
 800ab84:	0800c955 	.word	0x0800c955
 800ab88:	0800c962 	.word	0x0800c962
 800ab8c:	0800c990 	.word	0x0800c990

0800ab90 <fiprintf>:
 800ab90:	b40e      	push	{r1, r2, r3}
 800ab92:	b503      	push	{r0, r1, lr}
 800ab94:	4601      	mov	r1, r0
 800ab96:	ab03      	add	r3, sp, #12
 800ab98:	4805      	ldr	r0, [pc, #20]	; (800abb0 <fiprintf+0x20>)
 800ab9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab9e:	6800      	ldr	r0, [r0, #0]
 800aba0:	9301      	str	r3, [sp, #4]
 800aba2:	f000 f88f 	bl	800acc4 <_vfiprintf_r>
 800aba6:	b002      	add	sp, #8
 800aba8:	f85d eb04 	ldr.w	lr, [sp], #4
 800abac:	b003      	add	sp, #12
 800abae:	4770      	bx	lr
 800abb0:	20000180 	.word	0x20000180

0800abb4 <__ascii_mbtowc>:
 800abb4:	b082      	sub	sp, #8
 800abb6:	b901      	cbnz	r1, 800abba <__ascii_mbtowc+0x6>
 800abb8:	a901      	add	r1, sp, #4
 800abba:	b142      	cbz	r2, 800abce <__ascii_mbtowc+0x1a>
 800abbc:	b14b      	cbz	r3, 800abd2 <__ascii_mbtowc+0x1e>
 800abbe:	7813      	ldrb	r3, [r2, #0]
 800abc0:	600b      	str	r3, [r1, #0]
 800abc2:	7812      	ldrb	r2, [r2, #0]
 800abc4:	1e10      	subs	r0, r2, #0
 800abc6:	bf18      	it	ne
 800abc8:	2001      	movne	r0, #1
 800abca:	b002      	add	sp, #8
 800abcc:	4770      	bx	lr
 800abce:	4610      	mov	r0, r2
 800abd0:	e7fb      	b.n	800abca <__ascii_mbtowc+0x16>
 800abd2:	f06f 0001 	mvn.w	r0, #1
 800abd6:	e7f8      	b.n	800abca <__ascii_mbtowc+0x16>

0800abd8 <memmove>:
 800abd8:	4288      	cmp	r0, r1
 800abda:	b510      	push	{r4, lr}
 800abdc:	eb01 0402 	add.w	r4, r1, r2
 800abe0:	d902      	bls.n	800abe8 <memmove+0x10>
 800abe2:	4284      	cmp	r4, r0
 800abe4:	4623      	mov	r3, r4
 800abe6:	d807      	bhi.n	800abf8 <memmove+0x20>
 800abe8:	1e43      	subs	r3, r0, #1
 800abea:	42a1      	cmp	r1, r4
 800abec:	d008      	beq.n	800ac00 <memmove+0x28>
 800abee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800abf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800abf6:	e7f8      	b.n	800abea <memmove+0x12>
 800abf8:	4402      	add	r2, r0
 800abfa:	4601      	mov	r1, r0
 800abfc:	428a      	cmp	r2, r1
 800abfe:	d100      	bne.n	800ac02 <memmove+0x2a>
 800ac00:	bd10      	pop	{r4, pc}
 800ac02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac0a:	e7f7      	b.n	800abfc <memmove+0x24>

0800ac0c <__malloc_lock>:
 800ac0c:	4801      	ldr	r0, [pc, #4]	; (800ac14 <__malloc_lock+0x8>)
 800ac0e:	f000 bc17 	b.w	800b440 <__retarget_lock_acquire_recursive>
 800ac12:	bf00      	nop
 800ac14:	20001f3c 	.word	0x20001f3c

0800ac18 <__malloc_unlock>:
 800ac18:	4801      	ldr	r0, [pc, #4]	; (800ac20 <__malloc_unlock+0x8>)
 800ac1a:	f000 bc12 	b.w	800b442 <__retarget_lock_release_recursive>
 800ac1e:	bf00      	nop
 800ac20:	20001f3c 	.word	0x20001f3c

0800ac24 <_realloc_r>:
 800ac24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac26:	4607      	mov	r7, r0
 800ac28:	4614      	mov	r4, r2
 800ac2a:	460e      	mov	r6, r1
 800ac2c:	b921      	cbnz	r1, 800ac38 <_realloc_r+0x14>
 800ac2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ac32:	4611      	mov	r1, r2
 800ac34:	f7ff bdc8 	b.w	800a7c8 <_malloc_r>
 800ac38:	b922      	cbnz	r2, 800ac44 <_realloc_r+0x20>
 800ac3a:	f7ff fd75 	bl	800a728 <_free_r>
 800ac3e:	4625      	mov	r5, r4
 800ac40:	4628      	mov	r0, r5
 800ac42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac44:	f000 fc62 	bl	800b50c <_malloc_usable_size_r>
 800ac48:	42a0      	cmp	r0, r4
 800ac4a:	d20f      	bcs.n	800ac6c <_realloc_r+0x48>
 800ac4c:	4621      	mov	r1, r4
 800ac4e:	4638      	mov	r0, r7
 800ac50:	f7ff fdba 	bl	800a7c8 <_malloc_r>
 800ac54:	4605      	mov	r5, r0
 800ac56:	2800      	cmp	r0, #0
 800ac58:	d0f2      	beq.n	800ac40 <_realloc_r+0x1c>
 800ac5a:	4631      	mov	r1, r6
 800ac5c:	4622      	mov	r2, r4
 800ac5e:	f7ff f9c7 	bl	8009ff0 <memcpy>
 800ac62:	4631      	mov	r1, r6
 800ac64:	4638      	mov	r0, r7
 800ac66:	f7ff fd5f 	bl	800a728 <_free_r>
 800ac6a:	e7e9      	b.n	800ac40 <_realloc_r+0x1c>
 800ac6c:	4635      	mov	r5, r6
 800ac6e:	e7e7      	b.n	800ac40 <_realloc_r+0x1c>

0800ac70 <__sfputc_r>:
 800ac70:	6893      	ldr	r3, [r2, #8]
 800ac72:	3b01      	subs	r3, #1
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	b410      	push	{r4}
 800ac78:	6093      	str	r3, [r2, #8]
 800ac7a:	da08      	bge.n	800ac8e <__sfputc_r+0x1e>
 800ac7c:	6994      	ldr	r4, [r2, #24]
 800ac7e:	42a3      	cmp	r3, r4
 800ac80:	db01      	blt.n	800ac86 <__sfputc_r+0x16>
 800ac82:	290a      	cmp	r1, #10
 800ac84:	d103      	bne.n	800ac8e <__sfputc_r+0x1e>
 800ac86:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac8a:	f000 b94b 	b.w	800af24 <__swbuf_r>
 800ac8e:	6813      	ldr	r3, [r2, #0]
 800ac90:	1c58      	adds	r0, r3, #1
 800ac92:	6010      	str	r0, [r2, #0]
 800ac94:	7019      	strb	r1, [r3, #0]
 800ac96:	4608      	mov	r0, r1
 800ac98:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac9c:	4770      	bx	lr

0800ac9e <__sfputs_r>:
 800ac9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aca0:	4606      	mov	r6, r0
 800aca2:	460f      	mov	r7, r1
 800aca4:	4614      	mov	r4, r2
 800aca6:	18d5      	adds	r5, r2, r3
 800aca8:	42ac      	cmp	r4, r5
 800acaa:	d101      	bne.n	800acb0 <__sfputs_r+0x12>
 800acac:	2000      	movs	r0, #0
 800acae:	e007      	b.n	800acc0 <__sfputs_r+0x22>
 800acb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acb4:	463a      	mov	r2, r7
 800acb6:	4630      	mov	r0, r6
 800acb8:	f7ff ffda 	bl	800ac70 <__sfputc_r>
 800acbc:	1c43      	adds	r3, r0, #1
 800acbe:	d1f3      	bne.n	800aca8 <__sfputs_r+0xa>
 800acc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800acc4 <_vfiprintf_r>:
 800acc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acc8:	460d      	mov	r5, r1
 800acca:	b09d      	sub	sp, #116	; 0x74
 800accc:	4614      	mov	r4, r2
 800acce:	4698      	mov	r8, r3
 800acd0:	4606      	mov	r6, r0
 800acd2:	b118      	cbz	r0, 800acdc <_vfiprintf_r+0x18>
 800acd4:	6983      	ldr	r3, [r0, #24]
 800acd6:	b90b      	cbnz	r3, 800acdc <_vfiprintf_r+0x18>
 800acd8:	f000 fb14 	bl	800b304 <__sinit>
 800acdc:	4b89      	ldr	r3, [pc, #548]	; (800af04 <_vfiprintf_r+0x240>)
 800acde:	429d      	cmp	r5, r3
 800ace0:	d11b      	bne.n	800ad1a <_vfiprintf_r+0x56>
 800ace2:	6875      	ldr	r5, [r6, #4]
 800ace4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ace6:	07d9      	lsls	r1, r3, #31
 800ace8:	d405      	bmi.n	800acf6 <_vfiprintf_r+0x32>
 800acea:	89ab      	ldrh	r3, [r5, #12]
 800acec:	059a      	lsls	r2, r3, #22
 800acee:	d402      	bmi.n	800acf6 <_vfiprintf_r+0x32>
 800acf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acf2:	f000 fba5 	bl	800b440 <__retarget_lock_acquire_recursive>
 800acf6:	89ab      	ldrh	r3, [r5, #12]
 800acf8:	071b      	lsls	r3, r3, #28
 800acfa:	d501      	bpl.n	800ad00 <_vfiprintf_r+0x3c>
 800acfc:	692b      	ldr	r3, [r5, #16]
 800acfe:	b9eb      	cbnz	r3, 800ad3c <_vfiprintf_r+0x78>
 800ad00:	4629      	mov	r1, r5
 800ad02:	4630      	mov	r0, r6
 800ad04:	f000 f96e 	bl	800afe4 <__swsetup_r>
 800ad08:	b1c0      	cbz	r0, 800ad3c <_vfiprintf_r+0x78>
 800ad0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad0c:	07dc      	lsls	r4, r3, #31
 800ad0e:	d50e      	bpl.n	800ad2e <_vfiprintf_r+0x6a>
 800ad10:	f04f 30ff 	mov.w	r0, #4294967295
 800ad14:	b01d      	add	sp, #116	; 0x74
 800ad16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad1a:	4b7b      	ldr	r3, [pc, #492]	; (800af08 <_vfiprintf_r+0x244>)
 800ad1c:	429d      	cmp	r5, r3
 800ad1e:	d101      	bne.n	800ad24 <_vfiprintf_r+0x60>
 800ad20:	68b5      	ldr	r5, [r6, #8]
 800ad22:	e7df      	b.n	800ace4 <_vfiprintf_r+0x20>
 800ad24:	4b79      	ldr	r3, [pc, #484]	; (800af0c <_vfiprintf_r+0x248>)
 800ad26:	429d      	cmp	r5, r3
 800ad28:	bf08      	it	eq
 800ad2a:	68f5      	ldreq	r5, [r6, #12]
 800ad2c:	e7da      	b.n	800ace4 <_vfiprintf_r+0x20>
 800ad2e:	89ab      	ldrh	r3, [r5, #12]
 800ad30:	0598      	lsls	r0, r3, #22
 800ad32:	d4ed      	bmi.n	800ad10 <_vfiprintf_r+0x4c>
 800ad34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad36:	f000 fb84 	bl	800b442 <__retarget_lock_release_recursive>
 800ad3a:	e7e9      	b.n	800ad10 <_vfiprintf_r+0x4c>
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	9309      	str	r3, [sp, #36]	; 0x24
 800ad40:	2320      	movs	r3, #32
 800ad42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad46:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad4a:	2330      	movs	r3, #48	; 0x30
 800ad4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800af10 <_vfiprintf_r+0x24c>
 800ad50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad54:	f04f 0901 	mov.w	r9, #1
 800ad58:	4623      	mov	r3, r4
 800ad5a:	469a      	mov	sl, r3
 800ad5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad60:	b10a      	cbz	r2, 800ad66 <_vfiprintf_r+0xa2>
 800ad62:	2a25      	cmp	r2, #37	; 0x25
 800ad64:	d1f9      	bne.n	800ad5a <_vfiprintf_r+0x96>
 800ad66:	ebba 0b04 	subs.w	fp, sl, r4
 800ad6a:	d00b      	beq.n	800ad84 <_vfiprintf_r+0xc0>
 800ad6c:	465b      	mov	r3, fp
 800ad6e:	4622      	mov	r2, r4
 800ad70:	4629      	mov	r1, r5
 800ad72:	4630      	mov	r0, r6
 800ad74:	f7ff ff93 	bl	800ac9e <__sfputs_r>
 800ad78:	3001      	adds	r0, #1
 800ad7a:	f000 80aa 	beq.w	800aed2 <_vfiprintf_r+0x20e>
 800ad7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad80:	445a      	add	r2, fp
 800ad82:	9209      	str	r2, [sp, #36]	; 0x24
 800ad84:	f89a 3000 	ldrb.w	r3, [sl]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	f000 80a2 	beq.w	800aed2 <_vfiprintf_r+0x20e>
 800ad8e:	2300      	movs	r3, #0
 800ad90:	f04f 32ff 	mov.w	r2, #4294967295
 800ad94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad98:	f10a 0a01 	add.w	sl, sl, #1
 800ad9c:	9304      	str	r3, [sp, #16]
 800ad9e:	9307      	str	r3, [sp, #28]
 800ada0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ada4:	931a      	str	r3, [sp, #104]	; 0x68
 800ada6:	4654      	mov	r4, sl
 800ada8:	2205      	movs	r2, #5
 800adaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adae:	4858      	ldr	r0, [pc, #352]	; (800af10 <_vfiprintf_r+0x24c>)
 800adb0:	f7f5 fa1e 	bl	80001f0 <memchr>
 800adb4:	9a04      	ldr	r2, [sp, #16]
 800adb6:	b9d8      	cbnz	r0, 800adf0 <_vfiprintf_r+0x12c>
 800adb8:	06d1      	lsls	r1, r2, #27
 800adba:	bf44      	itt	mi
 800adbc:	2320      	movmi	r3, #32
 800adbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adc2:	0713      	lsls	r3, r2, #28
 800adc4:	bf44      	itt	mi
 800adc6:	232b      	movmi	r3, #43	; 0x2b
 800adc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adcc:	f89a 3000 	ldrb.w	r3, [sl]
 800add0:	2b2a      	cmp	r3, #42	; 0x2a
 800add2:	d015      	beq.n	800ae00 <_vfiprintf_r+0x13c>
 800add4:	9a07      	ldr	r2, [sp, #28]
 800add6:	4654      	mov	r4, sl
 800add8:	2000      	movs	r0, #0
 800adda:	f04f 0c0a 	mov.w	ip, #10
 800adde:	4621      	mov	r1, r4
 800ade0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ade4:	3b30      	subs	r3, #48	; 0x30
 800ade6:	2b09      	cmp	r3, #9
 800ade8:	d94e      	bls.n	800ae88 <_vfiprintf_r+0x1c4>
 800adea:	b1b0      	cbz	r0, 800ae1a <_vfiprintf_r+0x156>
 800adec:	9207      	str	r2, [sp, #28]
 800adee:	e014      	b.n	800ae1a <_vfiprintf_r+0x156>
 800adf0:	eba0 0308 	sub.w	r3, r0, r8
 800adf4:	fa09 f303 	lsl.w	r3, r9, r3
 800adf8:	4313      	orrs	r3, r2
 800adfa:	9304      	str	r3, [sp, #16]
 800adfc:	46a2      	mov	sl, r4
 800adfe:	e7d2      	b.n	800ada6 <_vfiprintf_r+0xe2>
 800ae00:	9b03      	ldr	r3, [sp, #12]
 800ae02:	1d19      	adds	r1, r3, #4
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	9103      	str	r1, [sp, #12]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	bfbb      	ittet	lt
 800ae0c:	425b      	neglt	r3, r3
 800ae0e:	f042 0202 	orrlt.w	r2, r2, #2
 800ae12:	9307      	strge	r3, [sp, #28]
 800ae14:	9307      	strlt	r3, [sp, #28]
 800ae16:	bfb8      	it	lt
 800ae18:	9204      	strlt	r2, [sp, #16]
 800ae1a:	7823      	ldrb	r3, [r4, #0]
 800ae1c:	2b2e      	cmp	r3, #46	; 0x2e
 800ae1e:	d10c      	bne.n	800ae3a <_vfiprintf_r+0x176>
 800ae20:	7863      	ldrb	r3, [r4, #1]
 800ae22:	2b2a      	cmp	r3, #42	; 0x2a
 800ae24:	d135      	bne.n	800ae92 <_vfiprintf_r+0x1ce>
 800ae26:	9b03      	ldr	r3, [sp, #12]
 800ae28:	1d1a      	adds	r2, r3, #4
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	9203      	str	r2, [sp, #12]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	bfb8      	it	lt
 800ae32:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae36:	3402      	adds	r4, #2
 800ae38:	9305      	str	r3, [sp, #20]
 800ae3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800af20 <_vfiprintf_r+0x25c>
 800ae3e:	7821      	ldrb	r1, [r4, #0]
 800ae40:	2203      	movs	r2, #3
 800ae42:	4650      	mov	r0, sl
 800ae44:	f7f5 f9d4 	bl	80001f0 <memchr>
 800ae48:	b140      	cbz	r0, 800ae5c <_vfiprintf_r+0x198>
 800ae4a:	2340      	movs	r3, #64	; 0x40
 800ae4c:	eba0 000a 	sub.w	r0, r0, sl
 800ae50:	fa03 f000 	lsl.w	r0, r3, r0
 800ae54:	9b04      	ldr	r3, [sp, #16]
 800ae56:	4303      	orrs	r3, r0
 800ae58:	3401      	adds	r4, #1
 800ae5a:	9304      	str	r3, [sp, #16]
 800ae5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae60:	482c      	ldr	r0, [pc, #176]	; (800af14 <_vfiprintf_r+0x250>)
 800ae62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae66:	2206      	movs	r2, #6
 800ae68:	f7f5 f9c2 	bl	80001f0 <memchr>
 800ae6c:	2800      	cmp	r0, #0
 800ae6e:	d03f      	beq.n	800aef0 <_vfiprintf_r+0x22c>
 800ae70:	4b29      	ldr	r3, [pc, #164]	; (800af18 <_vfiprintf_r+0x254>)
 800ae72:	bb1b      	cbnz	r3, 800aebc <_vfiprintf_r+0x1f8>
 800ae74:	9b03      	ldr	r3, [sp, #12]
 800ae76:	3307      	adds	r3, #7
 800ae78:	f023 0307 	bic.w	r3, r3, #7
 800ae7c:	3308      	adds	r3, #8
 800ae7e:	9303      	str	r3, [sp, #12]
 800ae80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae82:	443b      	add	r3, r7
 800ae84:	9309      	str	r3, [sp, #36]	; 0x24
 800ae86:	e767      	b.n	800ad58 <_vfiprintf_r+0x94>
 800ae88:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae8c:	460c      	mov	r4, r1
 800ae8e:	2001      	movs	r0, #1
 800ae90:	e7a5      	b.n	800adde <_vfiprintf_r+0x11a>
 800ae92:	2300      	movs	r3, #0
 800ae94:	3401      	adds	r4, #1
 800ae96:	9305      	str	r3, [sp, #20]
 800ae98:	4619      	mov	r1, r3
 800ae9a:	f04f 0c0a 	mov.w	ip, #10
 800ae9e:	4620      	mov	r0, r4
 800aea0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aea4:	3a30      	subs	r2, #48	; 0x30
 800aea6:	2a09      	cmp	r2, #9
 800aea8:	d903      	bls.n	800aeb2 <_vfiprintf_r+0x1ee>
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d0c5      	beq.n	800ae3a <_vfiprintf_r+0x176>
 800aeae:	9105      	str	r1, [sp, #20]
 800aeb0:	e7c3      	b.n	800ae3a <_vfiprintf_r+0x176>
 800aeb2:	fb0c 2101 	mla	r1, ip, r1, r2
 800aeb6:	4604      	mov	r4, r0
 800aeb8:	2301      	movs	r3, #1
 800aeba:	e7f0      	b.n	800ae9e <_vfiprintf_r+0x1da>
 800aebc:	ab03      	add	r3, sp, #12
 800aebe:	9300      	str	r3, [sp, #0]
 800aec0:	462a      	mov	r2, r5
 800aec2:	4b16      	ldr	r3, [pc, #88]	; (800af1c <_vfiprintf_r+0x258>)
 800aec4:	a904      	add	r1, sp, #16
 800aec6:	4630      	mov	r0, r6
 800aec8:	f7fd fe22 	bl	8008b10 <_printf_float>
 800aecc:	4607      	mov	r7, r0
 800aece:	1c78      	adds	r0, r7, #1
 800aed0:	d1d6      	bne.n	800ae80 <_vfiprintf_r+0x1bc>
 800aed2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aed4:	07d9      	lsls	r1, r3, #31
 800aed6:	d405      	bmi.n	800aee4 <_vfiprintf_r+0x220>
 800aed8:	89ab      	ldrh	r3, [r5, #12]
 800aeda:	059a      	lsls	r2, r3, #22
 800aedc:	d402      	bmi.n	800aee4 <_vfiprintf_r+0x220>
 800aede:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aee0:	f000 faaf 	bl	800b442 <__retarget_lock_release_recursive>
 800aee4:	89ab      	ldrh	r3, [r5, #12]
 800aee6:	065b      	lsls	r3, r3, #25
 800aee8:	f53f af12 	bmi.w	800ad10 <_vfiprintf_r+0x4c>
 800aeec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aeee:	e711      	b.n	800ad14 <_vfiprintf_r+0x50>
 800aef0:	ab03      	add	r3, sp, #12
 800aef2:	9300      	str	r3, [sp, #0]
 800aef4:	462a      	mov	r2, r5
 800aef6:	4b09      	ldr	r3, [pc, #36]	; (800af1c <_vfiprintf_r+0x258>)
 800aef8:	a904      	add	r1, sp, #16
 800aefa:	4630      	mov	r0, r6
 800aefc:	f7fe f8ac 	bl	8009058 <_printf_i>
 800af00:	e7e4      	b.n	800aecc <_vfiprintf_r+0x208>
 800af02:	bf00      	nop
 800af04:	0800cabc 	.word	0x0800cabc
 800af08:	0800cadc 	.word	0x0800cadc
 800af0c:	0800ca9c 	.word	0x0800ca9c
 800af10:	0800c944 	.word	0x0800c944
 800af14:	0800c94e 	.word	0x0800c94e
 800af18:	08008b11 	.word	0x08008b11
 800af1c:	0800ac9f 	.word	0x0800ac9f
 800af20:	0800c94a 	.word	0x0800c94a

0800af24 <__swbuf_r>:
 800af24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af26:	460e      	mov	r6, r1
 800af28:	4614      	mov	r4, r2
 800af2a:	4605      	mov	r5, r0
 800af2c:	b118      	cbz	r0, 800af36 <__swbuf_r+0x12>
 800af2e:	6983      	ldr	r3, [r0, #24]
 800af30:	b90b      	cbnz	r3, 800af36 <__swbuf_r+0x12>
 800af32:	f000 f9e7 	bl	800b304 <__sinit>
 800af36:	4b21      	ldr	r3, [pc, #132]	; (800afbc <__swbuf_r+0x98>)
 800af38:	429c      	cmp	r4, r3
 800af3a:	d12b      	bne.n	800af94 <__swbuf_r+0x70>
 800af3c:	686c      	ldr	r4, [r5, #4]
 800af3e:	69a3      	ldr	r3, [r4, #24]
 800af40:	60a3      	str	r3, [r4, #8]
 800af42:	89a3      	ldrh	r3, [r4, #12]
 800af44:	071a      	lsls	r2, r3, #28
 800af46:	d52f      	bpl.n	800afa8 <__swbuf_r+0x84>
 800af48:	6923      	ldr	r3, [r4, #16]
 800af4a:	b36b      	cbz	r3, 800afa8 <__swbuf_r+0x84>
 800af4c:	6923      	ldr	r3, [r4, #16]
 800af4e:	6820      	ldr	r0, [r4, #0]
 800af50:	1ac0      	subs	r0, r0, r3
 800af52:	6963      	ldr	r3, [r4, #20]
 800af54:	b2f6      	uxtb	r6, r6
 800af56:	4283      	cmp	r3, r0
 800af58:	4637      	mov	r7, r6
 800af5a:	dc04      	bgt.n	800af66 <__swbuf_r+0x42>
 800af5c:	4621      	mov	r1, r4
 800af5e:	4628      	mov	r0, r5
 800af60:	f000 f93c 	bl	800b1dc <_fflush_r>
 800af64:	bb30      	cbnz	r0, 800afb4 <__swbuf_r+0x90>
 800af66:	68a3      	ldr	r3, [r4, #8]
 800af68:	3b01      	subs	r3, #1
 800af6a:	60a3      	str	r3, [r4, #8]
 800af6c:	6823      	ldr	r3, [r4, #0]
 800af6e:	1c5a      	adds	r2, r3, #1
 800af70:	6022      	str	r2, [r4, #0]
 800af72:	701e      	strb	r6, [r3, #0]
 800af74:	6963      	ldr	r3, [r4, #20]
 800af76:	3001      	adds	r0, #1
 800af78:	4283      	cmp	r3, r0
 800af7a:	d004      	beq.n	800af86 <__swbuf_r+0x62>
 800af7c:	89a3      	ldrh	r3, [r4, #12]
 800af7e:	07db      	lsls	r3, r3, #31
 800af80:	d506      	bpl.n	800af90 <__swbuf_r+0x6c>
 800af82:	2e0a      	cmp	r6, #10
 800af84:	d104      	bne.n	800af90 <__swbuf_r+0x6c>
 800af86:	4621      	mov	r1, r4
 800af88:	4628      	mov	r0, r5
 800af8a:	f000 f927 	bl	800b1dc <_fflush_r>
 800af8e:	b988      	cbnz	r0, 800afb4 <__swbuf_r+0x90>
 800af90:	4638      	mov	r0, r7
 800af92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af94:	4b0a      	ldr	r3, [pc, #40]	; (800afc0 <__swbuf_r+0x9c>)
 800af96:	429c      	cmp	r4, r3
 800af98:	d101      	bne.n	800af9e <__swbuf_r+0x7a>
 800af9a:	68ac      	ldr	r4, [r5, #8]
 800af9c:	e7cf      	b.n	800af3e <__swbuf_r+0x1a>
 800af9e:	4b09      	ldr	r3, [pc, #36]	; (800afc4 <__swbuf_r+0xa0>)
 800afa0:	429c      	cmp	r4, r3
 800afa2:	bf08      	it	eq
 800afa4:	68ec      	ldreq	r4, [r5, #12]
 800afa6:	e7ca      	b.n	800af3e <__swbuf_r+0x1a>
 800afa8:	4621      	mov	r1, r4
 800afaa:	4628      	mov	r0, r5
 800afac:	f000 f81a 	bl	800afe4 <__swsetup_r>
 800afb0:	2800      	cmp	r0, #0
 800afb2:	d0cb      	beq.n	800af4c <__swbuf_r+0x28>
 800afb4:	f04f 37ff 	mov.w	r7, #4294967295
 800afb8:	e7ea      	b.n	800af90 <__swbuf_r+0x6c>
 800afba:	bf00      	nop
 800afbc:	0800cabc 	.word	0x0800cabc
 800afc0:	0800cadc 	.word	0x0800cadc
 800afc4:	0800ca9c 	.word	0x0800ca9c

0800afc8 <__ascii_wctomb>:
 800afc8:	b149      	cbz	r1, 800afde <__ascii_wctomb+0x16>
 800afca:	2aff      	cmp	r2, #255	; 0xff
 800afcc:	bf85      	ittet	hi
 800afce:	238a      	movhi	r3, #138	; 0x8a
 800afd0:	6003      	strhi	r3, [r0, #0]
 800afd2:	700a      	strbls	r2, [r1, #0]
 800afd4:	f04f 30ff 	movhi.w	r0, #4294967295
 800afd8:	bf98      	it	ls
 800afda:	2001      	movls	r0, #1
 800afdc:	4770      	bx	lr
 800afde:	4608      	mov	r0, r1
 800afe0:	4770      	bx	lr
	...

0800afe4 <__swsetup_r>:
 800afe4:	4b32      	ldr	r3, [pc, #200]	; (800b0b0 <__swsetup_r+0xcc>)
 800afe6:	b570      	push	{r4, r5, r6, lr}
 800afe8:	681d      	ldr	r5, [r3, #0]
 800afea:	4606      	mov	r6, r0
 800afec:	460c      	mov	r4, r1
 800afee:	b125      	cbz	r5, 800affa <__swsetup_r+0x16>
 800aff0:	69ab      	ldr	r3, [r5, #24]
 800aff2:	b913      	cbnz	r3, 800affa <__swsetup_r+0x16>
 800aff4:	4628      	mov	r0, r5
 800aff6:	f000 f985 	bl	800b304 <__sinit>
 800affa:	4b2e      	ldr	r3, [pc, #184]	; (800b0b4 <__swsetup_r+0xd0>)
 800affc:	429c      	cmp	r4, r3
 800affe:	d10f      	bne.n	800b020 <__swsetup_r+0x3c>
 800b000:	686c      	ldr	r4, [r5, #4]
 800b002:	89a3      	ldrh	r3, [r4, #12]
 800b004:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b008:	0719      	lsls	r1, r3, #28
 800b00a:	d42c      	bmi.n	800b066 <__swsetup_r+0x82>
 800b00c:	06dd      	lsls	r5, r3, #27
 800b00e:	d411      	bmi.n	800b034 <__swsetup_r+0x50>
 800b010:	2309      	movs	r3, #9
 800b012:	6033      	str	r3, [r6, #0]
 800b014:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b018:	81a3      	strh	r3, [r4, #12]
 800b01a:	f04f 30ff 	mov.w	r0, #4294967295
 800b01e:	e03e      	b.n	800b09e <__swsetup_r+0xba>
 800b020:	4b25      	ldr	r3, [pc, #148]	; (800b0b8 <__swsetup_r+0xd4>)
 800b022:	429c      	cmp	r4, r3
 800b024:	d101      	bne.n	800b02a <__swsetup_r+0x46>
 800b026:	68ac      	ldr	r4, [r5, #8]
 800b028:	e7eb      	b.n	800b002 <__swsetup_r+0x1e>
 800b02a:	4b24      	ldr	r3, [pc, #144]	; (800b0bc <__swsetup_r+0xd8>)
 800b02c:	429c      	cmp	r4, r3
 800b02e:	bf08      	it	eq
 800b030:	68ec      	ldreq	r4, [r5, #12]
 800b032:	e7e6      	b.n	800b002 <__swsetup_r+0x1e>
 800b034:	0758      	lsls	r0, r3, #29
 800b036:	d512      	bpl.n	800b05e <__swsetup_r+0x7a>
 800b038:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b03a:	b141      	cbz	r1, 800b04e <__swsetup_r+0x6a>
 800b03c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b040:	4299      	cmp	r1, r3
 800b042:	d002      	beq.n	800b04a <__swsetup_r+0x66>
 800b044:	4630      	mov	r0, r6
 800b046:	f7ff fb6f 	bl	800a728 <_free_r>
 800b04a:	2300      	movs	r3, #0
 800b04c:	6363      	str	r3, [r4, #52]	; 0x34
 800b04e:	89a3      	ldrh	r3, [r4, #12]
 800b050:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b054:	81a3      	strh	r3, [r4, #12]
 800b056:	2300      	movs	r3, #0
 800b058:	6063      	str	r3, [r4, #4]
 800b05a:	6923      	ldr	r3, [r4, #16]
 800b05c:	6023      	str	r3, [r4, #0]
 800b05e:	89a3      	ldrh	r3, [r4, #12]
 800b060:	f043 0308 	orr.w	r3, r3, #8
 800b064:	81a3      	strh	r3, [r4, #12]
 800b066:	6923      	ldr	r3, [r4, #16]
 800b068:	b94b      	cbnz	r3, 800b07e <__swsetup_r+0x9a>
 800b06a:	89a3      	ldrh	r3, [r4, #12]
 800b06c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b074:	d003      	beq.n	800b07e <__swsetup_r+0x9a>
 800b076:	4621      	mov	r1, r4
 800b078:	4630      	mov	r0, r6
 800b07a:	f000 fa07 	bl	800b48c <__smakebuf_r>
 800b07e:	89a0      	ldrh	r0, [r4, #12]
 800b080:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b084:	f010 0301 	ands.w	r3, r0, #1
 800b088:	d00a      	beq.n	800b0a0 <__swsetup_r+0xbc>
 800b08a:	2300      	movs	r3, #0
 800b08c:	60a3      	str	r3, [r4, #8]
 800b08e:	6963      	ldr	r3, [r4, #20]
 800b090:	425b      	negs	r3, r3
 800b092:	61a3      	str	r3, [r4, #24]
 800b094:	6923      	ldr	r3, [r4, #16]
 800b096:	b943      	cbnz	r3, 800b0aa <__swsetup_r+0xc6>
 800b098:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b09c:	d1ba      	bne.n	800b014 <__swsetup_r+0x30>
 800b09e:	bd70      	pop	{r4, r5, r6, pc}
 800b0a0:	0781      	lsls	r1, r0, #30
 800b0a2:	bf58      	it	pl
 800b0a4:	6963      	ldrpl	r3, [r4, #20]
 800b0a6:	60a3      	str	r3, [r4, #8]
 800b0a8:	e7f4      	b.n	800b094 <__swsetup_r+0xb0>
 800b0aa:	2000      	movs	r0, #0
 800b0ac:	e7f7      	b.n	800b09e <__swsetup_r+0xba>
 800b0ae:	bf00      	nop
 800b0b0:	20000180 	.word	0x20000180
 800b0b4:	0800cabc 	.word	0x0800cabc
 800b0b8:	0800cadc 	.word	0x0800cadc
 800b0bc:	0800ca9c 	.word	0x0800ca9c

0800b0c0 <abort>:
 800b0c0:	b508      	push	{r3, lr}
 800b0c2:	2006      	movs	r0, #6
 800b0c4:	f000 fa52 	bl	800b56c <raise>
 800b0c8:	2001      	movs	r0, #1
 800b0ca:	f7f6 fda9 	bl	8001c20 <_exit>
	...

0800b0d0 <__sflush_r>:
 800b0d0:	898a      	ldrh	r2, [r1, #12]
 800b0d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0d6:	4605      	mov	r5, r0
 800b0d8:	0710      	lsls	r0, r2, #28
 800b0da:	460c      	mov	r4, r1
 800b0dc:	d458      	bmi.n	800b190 <__sflush_r+0xc0>
 800b0de:	684b      	ldr	r3, [r1, #4]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	dc05      	bgt.n	800b0f0 <__sflush_r+0x20>
 800b0e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	dc02      	bgt.n	800b0f0 <__sflush_r+0x20>
 800b0ea:	2000      	movs	r0, #0
 800b0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b0f2:	2e00      	cmp	r6, #0
 800b0f4:	d0f9      	beq.n	800b0ea <__sflush_r+0x1a>
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b0fc:	682f      	ldr	r7, [r5, #0]
 800b0fe:	602b      	str	r3, [r5, #0]
 800b100:	d032      	beq.n	800b168 <__sflush_r+0x98>
 800b102:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b104:	89a3      	ldrh	r3, [r4, #12]
 800b106:	075a      	lsls	r2, r3, #29
 800b108:	d505      	bpl.n	800b116 <__sflush_r+0x46>
 800b10a:	6863      	ldr	r3, [r4, #4]
 800b10c:	1ac0      	subs	r0, r0, r3
 800b10e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b110:	b10b      	cbz	r3, 800b116 <__sflush_r+0x46>
 800b112:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b114:	1ac0      	subs	r0, r0, r3
 800b116:	2300      	movs	r3, #0
 800b118:	4602      	mov	r2, r0
 800b11a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b11c:	6a21      	ldr	r1, [r4, #32]
 800b11e:	4628      	mov	r0, r5
 800b120:	47b0      	blx	r6
 800b122:	1c43      	adds	r3, r0, #1
 800b124:	89a3      	ldrh	r3, [r4, #12]
 800b126:	d106      	bne.n	800b136 <__sflush_r+0x66>
 800b128:	6829      	ldr	r1, [r5, #0]
 800b12a:	291d      	cmp	r1, #29
 800b12c:	d82c      	bhi.n	800b188 <__sflush_r+0xb8>
 800b12e:	4a2a      	ldr	r2, [pc, #168]	; (800b1d8 <__sflush_r+0x108>)
 800b130:	40ca      	lsrs	r2, r1
 800b132:	07d6      	lsls	r6, r2, #31
 800b134:	d528      	bpl.n	800b188 <__sflush_r+0xb8>
 800b136:	2200      	movs	r2, #0
 800b138:	6062      	str	r2, [r4, #4]
 800b13a:	04d9      	lsls	r1, r3, #19
 800b13c:	6922      	ldr	r2, [r4, #16]
 800b13e:	6022      	str	r2, [r4, #0]
 800b140:	d504      	bpl.n	800b14c <__sflush_r+0x7c>
 800b142:	1c42      	adds	r2, r0, #1
 800b144:	d101      	bne.n	800b14a <__sflush_r+0x7a>
 800b146:	682b      	ldr	r3, [r5, #0]
 800b148:	b903      	cbnz	r3, 800b14c <__sflush_r+0x7c>
 800b14a:	6560      	str	r0, [r4, #84]	; 0x54
 800b14c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b14e:	602f      	str	r7, [r5, #0]
 800b150:	2900      	cmp	r1, #0
 800b152:	d0ca      	beq.n	800b0ea <__sflush_r+0x1a>
 800b154:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b158:	4299      	cmp	r1, r3
 800b15a:	d002      	beq.n	800b162 <__sflush_r+0x92>
 800b15c:	4628      	mov	r0, r5
 800b15e:	f7ff fae3 	bl	800a728 <_free_r>
 800b162:	2000      	movs	r0, #0
 800b164:	6360      	str	r0, [r4, #52]	; 0x34
 800b166:	e7c1      	b.n	800b0ec <__sflush_r+0x1c>
 800b168:	6a21      	ldr	r1, [r4, #32]
 800b16a:	2301      	movs	r3, #1
 800b16c:	4628      	mov	r0, r5
 800b16e:	47b0      	blx	r6
 800b170:	1c41      	adds	r1, r0, #1
 800b172:	d1c7      	bne.n	800b104 <__sflush_r+0x34>
 800b174:	682b      	ldr	r3, [r5, #0]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d0c4      	beq.n	800b104 <__sflush_r+0x34>
 800b17a:	2b1d      	cmp	r3, #29
 800b17c:	d001      	beq.n	800b182 <__sflush_r+0xb2>
 800b17e:	2b16      	cmp	r3, #22
 800b180:	d101      	bne.n	800b186 <__sflush_r+0xb6>
 800b182:	602f      	str	r7, [r5, #0]
 800b184:	e7b1      	b.n	800b0ea <__sflush_r+0x1a>
 800b186:	89a3      	ldrh	r3, [r4, #12]
 800b188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b18c:	81a3      	strh	r3, [r4, #12]
 800b18e:	e7ad      	b.n	800b0ec <__sflush_r+0x1c>
 800b190:	690f      	ldr	r7, [r1, #16]
 800b192:	2f00      	cmp	r7, #0
 800b194:	d0a9      	beq.n	800b0ea <__sflush_r+0x1a>
 800b196:	0793      	lsls	r3, r2, #30
 800b198:	680e      	ldr	r6, [r1, #0]
 800b19a:	bf08      	it	eq
 800b19c:	694b      	ldreq	r3, [r1, #20]
 800b19e:	600f      	str	r7, [r1, #0]
 800b1a0:	bf18      	it	ne
 800b1a2:	2300      	movne	r3, #0
 800b1a4:	eba6 0807 	sub.w	r8, r6, r7
 800b1a8:	608b      	str	r3, [r1, #8]
 800b1aa:	f1b8 0f00 	cmp.w	r8, #0
 800b1ae:	dd9c      	ble.n	800b0ea <__sflush_r+0x1a>
 800b1b0:	6a21      	ldr	r1, [r4, #32]
 800b1b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b1b4:	4643      	mov	r3, r8
 800b1b6:	463a      	mov	r2, r7
 800b1b8:	4628      	mov	r0, r5
 800b1ba:	47b0      	blx	r6
 800b1bc:	2800      	cmp	r0, #0
 800b1be:	dc06      	bgt.n	800b1ce <__sflush_r+0xfe>
 800b1c0:	89a3      	ldrh	r3, [r4, #12]
 800b1c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1c6:	81a3      	strh	r3, [r4, #12]
 800b1c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1cc:	e78e      	b.n	800b0ec <__sflush_r+0x1c>
 800b1ce:	4407      	add	r7, r0
 800b1d0:	eba8 0800 	sub.w	r8, r8, r0
 800b1d4:	e7e9      	b.n	800b1aa <__sflush_r+0xda>
 800b1d6:	bf00      	nop
 800b1d8:	20400001 	.word	0x20400001

0800b1dc <_fflush_r>:
 800b1dc:	b538      	push	{r3, r4, r5, lr}
 800b1de:	690b      	ldr	r3, [r1, #16]
 800b1e0:	4605      	mov	r5, r0
 800b1e2:	460c      	mov	r4, r1
 800b1e4:	b913      	cbnz	r3, 800b1ec <_fflush_r+0x10>
 800b1e6:	2500      	movs	r5, #0
 800b1e8:	4628      	mov	r0, r5
 800b1ea:	bd38      	pop	{r3, r4, r5, pc}
 800b1ec:	b118      	cbz	r0, 800b1f6 <_fflush_r+0x1a>
 800b1ee:	6983      	ldr	r3, [r0, #24]
 800b1f0:	b90b      	cbnz	r3, 800b1f6 <_fflush_r+0x1a>
 800b1f2:	f000 f887 	bl	800b304 <__sinit>
 800b1f6:	4b14      	ldr	r3, [pc, #80]	; (800b248 <_fflush_r+0x6c>)
 800b1f8:	429c      	cmp	r4, r3
 800b1fa:	d11b      	bne.n	800b234 <_fflush_r+0x58>
 800b1fc:	686c      	ldr	r4, [r5, #4]
 800b1fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d0ef      	beq.n	800b1e6 <_fflush_r+0xa>
 800b206:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b208:	07d0      	lsls	r0, r2, #31
 800b20a:	d404      	bmi.n	800b216 <_fflush_r+0x3a>
 800b20c:	0599      	lsls	r1, r3, #22
 800b20e:	d402      	bmi.n	800b216 <_fflush_r+0x3a>
 800b210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b212:	f000 f915 	bl	800b440 <__retarget_lock_acquire_recursive>
 800b216:	4628      	mov	r0, r5
 800b218:	4621      	mov	r1, r4
 800b21a:	f7ff ff59 	bl	800b0d0 <__sflush_r>
 800b21e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b220:	07da      	lsls	r2, r3, #31
 800b222:	4605      	mov	r5, r0
 800b224:	d4e0      	bmi.n	800b1e8 <_fflush_r+0xc>
 800b226:	89a3      	ldrh	r3, [r4, #12]
 800b228:	059b      	lsls	r3, r3, #22
 800b22a:	d4dd      	bmi.n	800b1e8 <_fflush_r+0xc>
 800b22c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b22e:	f000 f908 	bl	800b442 <__retarget_lock_release_recursive>
 800b232:	e7d9      	b.n	800b1e8 <_fflush_r+0xc>
 800b234:	4b05      	ldr	r3, [pc, #20]	; (800b24c <_fflush_r+0x70>)
 800b236:	429c      	cmp	r4, r3
 800b238:	d101      	bne.n	800b23e <_fflush_r+0x62>
 800b23a:	68ac      	ldr	r4, [r5, #8]
 800b23c:	e7df      	b.n	800b1fe <_fflush_r+0x22>
 800b23e:	4b04      	ldr	r3, [pc, #16]	; (800b250 <_fflush_r+0x74>)
 800b240:	429c      	cmp	r4, r3
 800b242:	bf08      	it	eq
 800b244:	68ec      	ldreq	r4, [r5, #12]
 800b246:	e7da      	b.n	800b1fe <_fflush_r+0x22>
 800b248:	0800cabc 	.word	0x0800cabc
 800b24c:	0800cadc 	.word	0x0800cadc
 800b250:	0800ca9c 	.word	0x0800ca9c

0800b254 <std>:
 800b254:	2300      	movs	r3, #0
 800b256:	b510      	push	{r4, lr}
 800b258:	4604      	mov	r4, r0
 800b25a:	e9c0 3300 	strd	r3, r3, [r0]
 800b25e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b262:	6083      	str	r3, [r0, #8]
 800b264:	8181      	strh	r1, [r0, #12]
 800b266:	6643      	str	r3, [r0, #100]	; 0x64
 800b268:	81c2      	strh	r2, [r0, #14]
 800b26a:	6183      	str	r3, [r0, #24]
 800b26c:	4619      	mov	r1, r3
 800b26e:	2208      	movs	r2, #8
 800b270:	305c      	adds	r0, #92	; 0x5c
 800b272:	f7fd fba5 	bl	80089c0 <memset>
 800b276:	4b05      	ldr	r3, [pc, #20]	; (800b28c <std+0x38>)
 800b278:	6263      	str	r3, [r4, #36]	; 0x24
 800b27a:	4b05      	ldr	r3, [pc, #20]	; (800b290 <std+0x3c>)
 800b27c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b27e:	4b05      	ldr	r3, [pc, #20]	; (800b294 <std+0x40>)
 800b280:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b282:	4b05      	ldr	r3, [pc, #20]	; (800b298 <std+0x44>)
 800b284:	6224      	str	r4, [r4, #32]
 800b286:	6323      	str	r3, [r4, #48]	; 0x30
 800b288:	bd10      	pop	{r4, pc}
 800b28a:	bf00      	nop
 800b28c:	0800b5a5 	.word	0x0800b5a5
 800b290:	0800b5c7 	.word	0x0800b5c7
 800b294:	0800b5ff 	.word	0x0800b5ff
 800b298:	0800b623 	.word	0x0800b623

0800b29c <_cleanup_r>:
 800b29c:	4901      	ldr	r1, [pc, #4]	; (800b2a4 <_cleanup_r+0x8>)
 800b29e:	f000 b8af 	b.w	800b400 <_fwalk_reent>
 800b2a2:	bf00      	nop
 800b2a4:	0800b1dd 	.word	0x0800b1dd

0800b2a8 <__sfmoreglue>:
 800b2a8:	b570      	push	{r4, r5, r6, lr}
 800b2aa:	1e4a      	subs	r2, r1, #1
 800b2ac:	2568      	movs	r5, #104	; 0x68
 800b2ae:	4355      	muls	r5, r2
 800b2b0:	460e      	mov	r6, r1
 800b2b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b2b6:	f7ff fa87 	bl	800a7c8 <_malloc_r>
 800b2ba:	4604      	mov	r4, r0
 800b2bc:	b140      	cbz	r0, 800b2d0 <__sfmoreglue+0x28>
 800b2be:	2100      	movs	r1, #0
 800b2c0:	e9c0 1600 	strd	r1, r6, [r0]
 800b2c4:	300c      	adds	r0, #12
 800b2c6:	60a0      	str	r0, [r4, #8]
 800b2c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b2cc:	f7fd fb78 	bl	80089c0 <memset>
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	bd70      	pop	{r4, r5, r6, pc}

0800b2d4 <__sfp_lock_acquire>:
 800b2d4:	4801      	ldr	r0, [pc, #4]	; (800b2dc <__sfp_lock_acquire+0x8>)
 800b2d6:	f000 b8b3 	b.w	800b440 <__retarget_lock_acquire_recursive>
 800b2da:	bf00      	nop
 800b2dc:	20001f40 	.word	0x20001f40

0800b2e0 <__sfp_lock_release>:
 800b2e0:	4801      	ldr	r0, [pc, #4]	; (800b2e8 <__sfp_lock_release+0x8>)
 800b2e2:	f000 b8ae 	b.w	800b442 <__retarget_lock_release_recursive>
 800b2e6:	bf00      	nop
 800b2e8:	20001f40 	.word	0x20001f40

0800b2ec <__sinit_lock_acquire>:
 800b2ec:	4801      	ldr	r0, [pc, #4]	; (800b2f4 <__sinit_lock_acquire+0x8>)
 800b2ee:	f000 b8a7 	b.w	800b440 <__retarget_lock_acquire_recursive>
 800b2f2:	bf00      	nop
 800b2f4:	20001f3b 	.word	0x20001f3b

0800b2f8 <__sinit_lock_release>:
 800b2f8:	4801      	ldr	r0, [pc, #4]	; (800b300 <__sinit_lock_release+0x8>)
 800b2fa:	f000 b8a2 	b.w	800b442 <__retarget_lock_release_recursive>
 800b2fe:	bf00      	nop
 800b300:	20001f3b 	.word	0x20001f3b

0800b304 <__sinit>:
 800b304:	b510      	push	{r4, lr}
 800b306:	4604      	mov	r4, r0
 800b308:	f7ff fff0 	bl	800b2ec <__sinit_lock_acquire>
 800b30c:	69a3      	ldr	r3, [r4, #24]
 800b30e:	b11b      	cbz	r3, 800b318 <__sinit+0x14>
 800b310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b314:	f7ff bff0 	b.w	800b2f8 <__sinit_lock_release>
 800b318:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b31c:	6523      	str	r3, [r4, #80]	; 0x50
 800b31e:	4b13      	ldr	r3, [pc, #76]	; (800b36c <__sinit+0x68>)
 800b320:	4a13      	ldr	r2, [pc, #76]	; (800b370 <__sinit+0x6c>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	62a2      	str	r2, [r4, #40]	; 0x28
 800b326:	42a3      	cmp	r3, r4
 800b328:	bf04      	itt	eq
 800b32a:	2301      	moveq	r3, #1
 800b32c:	61a3      	streq	r3, [r4, #24]
 800b32e:	4620      	mov	r0, r4
 800b330:	f000 f820 	bl	800b374 <__sfp>
 800b334:	6060      	str	r0, [r4, #4]
 800b336:	4620      	mov	r0, r4
 800b338:	f000 f81c 	bl	800b374 <__sfp>
 800b33c:	60a0      	str	r0, [r4, #8]
 800b33e:	4620      	mov	r0, r4
 800b340:	f000 f818 	bl	800b374 <__sfp>
 800b344:	2200      	movs	r2, #0
 800b346:	60e0      	str	r0, [r4, #12]
 800b348:	2104      	movs	r1, #4
 800b34a:	6860      	ldr	r0, [r4, #4]
 800b34c:	f7ff ff82 	bl	800b254 <std>
 800b350:	68a0      	ldr	r0, [r4, #8]
 800b352:	2201      	movs	r2, #1
 800b354:	2109      	movs	r1, #9
 800b356:	f7ff ff7d 	bl	800b254 <std>
 800b35a:	68e0      	ldr	r0, [r4, #12]
 800b35c:	2202      	movs	r2, #2
 800b35e:	2112      	movs	r1, #18
 800b360:	f7ff ff78 	bl	800b254 <std>
 800b364:	2301      	movs	r3, #1
 800b366:	61a3      	str	r3, [r4, #24]
 800b368:	e7d2      	b.n	800b310 <__sinit+0xc>
 800b36a:	bf00      	nop
 800b36c:	0800c718 	.word	0x0800c718
 800b370:	0800b29d 	.word	0x0800b29d

0800b374 <__sfp>:
 800b374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b376:	4607      	mov	r7, r0
 800b378:	f7ff ffac 	bl	800b2d4 <__sfp_lock_acquire>
 800b37c:	4b1e      	ldr	r3, [pc, #120]	; (800b3f8 <__sfp+0x84>)
 800b37e:	681e      	ldr	r6, [r3, #0]
 800b380:	69b3      	ldr	r3, [r6, #24]
 800b382:	b913      	cbnz	r3, 800b38a <__sfp+0x16>
 800b384:	4630      	mov	r0, r6
 800b386:	f7ff ffbd 	bl	800b304 <__sinit>
 800b38a:	3648      	adds	r6, #72	; 0x48
 800b38c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b390:	3b01      	subs	r3, #1
 800b392:	d503      	bpl.n	800b39c <__sfp+0x28>
 800b394:	6833      	ldr	r3, [r6, #0]
 800b396:	b30b      	cbz	r3, 800b3dc <__sfp+0x68>
 800b398:	6836      	ldr	r6, [r6, #0]
 800b39a:	e7f7      	b.n	800b38c <__sfp+0x18>
 800b39c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b3a0:	b9d5      	cbnz	r5, 800b3d8 <__sfp+0x64>
 800b3a2:	4b16      	ldr	r3, [pc, #88]	; (800b3fc <__sfp+0x88>)
 800b3a4:	60e3      	str	r3, [r4, #12]
 800b3a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b3aa:	6665      	str	r5, [r4, #100]	; 0x64
 800b3ac:	f000 f847 	bl	800b43e <__retarget_lock_init_recursive>
 800b3b0:	f7ff ff96 	bl	800b2e0 <__sfp_lock_release>
 800b3b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b3b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b3bc:	6025      	str	r5, [r4, #0]
 800b3be:	61a5      	str	r5, [r4, #24]
 800b3c0:	2208      	movs	r2, #8
 800b3c2:	4629      	mov	r1, r5
 800b3c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b3c8:	f7fd fafa 	bl	80089c0 <memset>
 800b3cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b3d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b3d4:	4620      	mov	r0, r4
 800b3d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3d8:	3468      	adds	r4, #104	; 0x68
 800b3da:	e7d9      	b.n	800b390 <__sfp+0x1c>
 800b3dc:	2104      	movs	r1, #4
 800b3de:	4638      	mov	r0, r7
 800b3e0:	f7ff ff62 	bl	800b2a8 <__sfmoreglue>
 800b3e4:	4604      	mov	r4, r0
 800b3e6:	6030      	str	r0, [r6, #0]
 800b3e8:	2800      	cmp	r0, #0
 800b3ea:	d1d5      	bne.n	800b398 <__sfp+0x24>
 800b3ec:	f7ff ff78 	bl	800b2e0 <__sfp_lock_release>
 800b3f0:	230c      	movs	r3, #12
 800b3f2:	603b      	str	r3, [r7, #0]
 800b3f4:	e7ee      	b.n	800b3d4 <__sfp+0x60>
 800b3f6:	bf00      	nop
 800b3f8:	0800c718 	.word	0x0800c718
 800b3fc:	ffff0001 	.word	0xffff0001

0800b400 <_fwalk_reent>:
 800b400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b404:	4606      	mov	r6, r0
 800b406:	4688      	mov	r8, r1
 800b408:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b40c:	2700      	movs	r7, #0
 800b40e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b412:	f1b9 0901 	subs.w	r9, r9, #1
 800b416:	d505      	bpl.n	800b424 <_fwalk_reent+0x24>
 800b418:	6824      	ldr	r4, [r4, #0]
 800b41a:	2c00      	cmp	r4, #0
 800b41c:	d1f7      	bne.n	800b40e <_fwalk_reent+0xe>
 800b41e:	4638      	mov	r0, r7
 800b420:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b424:	89ab      	ldrh	r3, [r5, #12]
 800b426:	2b01      	cmp	r3, #1
 800b428:	d907      	bls.n	800b43a <_fwalk_reent+0x3a>
 800b42a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b42e:	3301      	adds	r3, #1
 800b430:	d003      	beq.n	800b43a <_fwalk_reent+0x3a>
 800b432:	4629      	mov	r1, r5
 800b434:	4630      	mov	r0, r6
 800b436:	47c0      	blx	r8
 800b438:	4307      	orrs	r7, r0
 800b43a:	3568      	adds	r5, #104	; 0x68
 800b43c:	e7e9      	b.n	800b412 <_fwalk_reent+0x12>

0800b43e <__retarget_lock_init_recursive>:
 800b43e:	4770      	bx	lr

0800b440 <__retarget_lock_acquire_recursive>:
 800b440:	4770      	bx	lr

0800b442 <__retarget_lock_release_recursive>:
 800b442:	4770      	bx	lr

0800b444 <__swhatbuf_r>:
 800b444:	b570      	push	{r4, r5, r6, lr}
 800b446:	460e      	mov	r6, r1
 800b448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b44c:	2900      	cmp	r1, #0
 800b44e:	b096      	sub	sp, #88	; 0x58
 800b450:	4614      	mov	r4, r2
 800b452:	461d      	mov	r5, r3
 800b454:	da07      	bge.n	800b466 <__swhatbuf_r+0x22>
 800b456:	2300      	movs	r3, #0
 800b458:	602b      	str	r3, [r5, #0]
 800b45a:	89b3      	ldrh	r3, [r6, #12]
 800b45c:	061a      	lsls	r2, r3, #24
 800b45e:	d410      	bmi.n	800b482 <__swhatbuf_r+0x3e>
 800b460:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b464:	e00e      	b.n	800b484 <__swhatbuf_r+0x40>
 800b466:	466a      	mov	r2, sp
 800b468:	f000 f902 	bl	800b670 <_fstat_r>
 800b46c:	2800      	cmp	r0, #0
 800b46e:	dbf2      	blt.n	800b456 <__swhatbuf_r+0x12>
 800b470:	9a01      	ldr	r2, [sp, #4]
 800b472:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b476:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b47a:	425a      	negs	r2, r3
 800b47c:	415a      	adcs	r2, r3
 800b47e:	602a      	str	r2, [r5, #0]
 800b480:	e7ee      	b.n	800b460 <__swhatbuf_r+0x1c>
 800b482:	2340      	movs	r3, #64	; 0x40
 800b484:	2000      	movs	r0, #0
 800b486:	6023      	str	r3, [r4, #0]
 800b488:	b016      	add	sp, #88	; 0x58
 800b48a:	bd70      	pop	{r4, r5, r6, pc}

0800b48c <__smakebuf_r>:
 800b48c:	898b      	ldrh	r3, [r1, #12]
 800b48e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b490:	079d      	lsls	r5, r3, #30
 800b492:	4606      	mov	r6, r0
 800b494:	460c      	mov	r4, r1
 800b496:	d507      	bpl.n	800b4a8 <__smakebuf_r+0x1c>
 800b498:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b49c:	6023      	str	r3, [r4, #0]
 800b49e:	6123      	str	r3, [r4, #16]
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	6163      	str	r3, [r4, #20]
 800b4a4:	b002      	add	sp, #8
 800b4a6:	bd70      	pop	{r4, r5, r6, pc}
 800b4a8:	ab01      	add	r3, sp, #4
 800b4aa:	466a      	mov	r2, sp
 800b4ac:	f7ff ffca 	bl	800b444 <__swhatbuf_r>
 800b4b0:	9900      	ldr	r1, [sp, #0]
 800b4b2:	4605      	mov	r5, r0
 800b4b4:	4630      	mov	r0, r6
 800b4b6:	f7ff f987 	bl	800a7c8 <_malloc_r>
 800b4ba:	b948      	cbnz	r0, 800b4d0 <__smakebuf_r+0x44>
 800b4bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4c0:	059a      	lsls	r2, r3, #22
 800b4c2:	d4ef      	bmi.n	800b4a4 <__smakebuf_r+0x18>
 800b4c4:	f023 0303 	bic.w	r3, r3, #3
 800b4c8:	f043 0302 	orr.w	r3, r3, #2
 800b4cc:	81a3      	strh	r3, [r4, #12]
 800b4ce:	e7e3      	b.n	800b498 <__smakebuf_r+0xc>
 800b4d0:	4b0d      	ldr	r3, [pc, #52]	; (800b508 <__smakebuf_r+0x7c>)
 800b4d2:	62b3      	str	r3, [r6, #40]	; 0x28
 800b4d4:	89a3      	ldrh	r3, [r4, #12]
 800b4d6:	6020      	str	r0, [r4, #0]
 800b4d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4dc:	81a3      	strh	r3, [r4, #12]
 800b4de:	9b00      	ldr	r3, [sp, #0]
 800b4e0:	6163      	str	r3, [r4, #20]
 800b4e2:	9b01      	ldr	r3, [sp, #4]
 800b4e4:	6120      	str	r0, [r4, #16]
 800b4e6:	b15b      	cbz	r3, 800b500 <__smakebuf_r+0x74>
 800b4e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4ec:	4630      	mov	r0, r6
 800b4ee:	f000 f8d1 	bl	800b694 <_isatty_r>
 800b4f2:	b128      	cbz	r0, 800b500 <__smakebuf_r+0x74>
 800b4f4:	89a3      	ldrh	r3, [r4, #12]
 800b4f6:	f023 0303 	bic.w	r3, r3, #3
 800b4fa:	f043 0301 	orr.w	r3, r3, #1
 800b4fe:	81a3      	strh	r3, [r4, #12]
 800b500:	89a0      	ldrh	r0, [r4, #12]
 800b502:	4305      	orrs	r5, r0
 800b504:	81a5      	strh	r5, [r4, #12]
 800b506:	e7cd      	b.n	800b4a4 <__smakebuf_r+0x18>
 800b508:	0800b29d 	.word	0x0800b29d

0800b50c <_malloc_usable_size_r>:
 800b50c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b510:	1f18      	subs	r0, r3, #4
 800b512:	2b00      	cmp	r3, #0
 800b514:	bfbc      	itt	lt
 800b516:	580b      	ldrlt	r3, [r1, r0]
 800b518:	18c0      	addlt	r0, r0, r3
 800b51a:	4770      	bx	lr

0800b51c <_raise_r>:
 800b51c:	291f      	cmp	r1, #31
 800b51e:	b538      	push	{r3, r4, r5, lr}
 800b520:	4604      	mov	r4, r0
 800b522:	460d      	mov	r5, r1
 800b524:	d904      	bls.n	800b530 <_raise_r+0x14>
 800b526:	2316      	movs	r3, #22
 800b528:	6003      	str	r3, [r0, #0]
 800b52a:	f04f 30ff 	mov.w	r0, #4294967295
 800b52e:	bd38      	pop	{r3, r4, r5, pc}
 800b530:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b532:	b112      	cbz	r2, 800b53a <_raise_r+0x1e>
 800b534:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b538:	b94b      	cbnz	r3, 800b54e <_raise_r+0x32>
 800b53a:	4620      	mov	r0, r4
 800b53c:	f000 f830 	bl	800b5a0 <_getpid_r>
 800b540:	462a      	mov	r2, r5
 800b542:	4601      	mov	r1, r0
 800b544:	4620      	mov	r0, r4
 800b546:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b54a:	f000 b817 	b.w	800b57c <_kill_r>
 800b54e:	2b01      	cmp	r3, #1
 800b550:	d00a      	beq.n	800b568 <_raise_r+0x4c>
 800b552:	1c59      	adds	r1, r3, #1
 800b554:	d103      	bne.n	800b55e <_raise_r+0x42>
 800b556:	2316      	movs	r3, #22
 800b558:	6003      	str	r3, [r0, #0]
 800b55a:	2001      	movs	r0, #1
 800b55c:	e7e7      	b.n	800b52e <_raise_r+0x12>
 800b55e:	2400      	movs	r4, #0
 800b560:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b564:	4628      	mov	r0, r5
 800b566:	4798      	blx	r3
 800b568:	2000      	movs	r0, #0
 800b56a:	e7e0      	b.n	800b52e <_raise_r+0x12>

0800b56c <raise>:
 800b56c:	4b02      	ldr	r3, [pc, #8]	; (800b578 <raise+0xc>)
 800b56e:	4601      	mov	r1, r0
 800b570:	6818      	ldr	r0, [r3, #0]
 800b572:	f7ff bfd3 	b.w	800b51c <_raise_r>
 800b576:	bf00      	nop
 800b578:	20000180 	.word	0x20000180

0800b57c <_kill_r>:
 800b57c:	b538      	push	{r3, r4, r5, lr}
 800b57e:	4d07      	ldr	r5, [pc, #28]	; (800b59c <_kill_r+0x20>)
 800b580:	2300      	movs	r3, #0
 800b582:	4604      	mov	r4, r0
 800b584:	4608      	mov	r0, r1
 800b586:	4611      	mov	r1, r2
 800b588:	602b      	str	r3, [r5, #0]
 800b58a:	f7f6 fb39 	bl	8001c00 <_kill>
 800b58e:	1c43      	adds	r3, r0, #1
 800b590:	d102      	bne.n	800b598 <_kill_r+0x1c>
 800b592:	682b      	ldr	r3, [r5, #0]
 800b594:	b103      	cbz	r3, 800b598 <_kill_r+0x1c>
 800b596:	6023      	str	r3, [r4, #0]
 800b598:	bd38      	pop	{r3, r4, r5, pc}
 800b59a:	bf00      	nop
 800b59c:	20001f34 	.word	0x20001f34

0800b5a0 <_getpid_r>:
 800b5a0:	f7f6 bb26 	b.w	8001bf0 <_getpid>

0800b5a4 <__sread>:
 800b5a4:	b510      	push	{r4, lr}
 800b5a6:	460c      	mov	r4, r1
 800b5a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5ac:	f000 f894 	bl	800b6d8 <_read_r>
 800b5b0:	2800      	cmp	r0, #0
 800b5b2:	bfab      	itete	ge
 800b5b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b5b6:	89a3      	ldrhlt	r3, [r4, #12]
 800b5b8:	181b      	addge	r3, r3, r0
 800b5ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b5be:	bfac      	ite	ge
 800b5c0:	6563      	strge	r3, [r4, #84]	; 0x54
 800b5c2:	81a3      	strhlt	r3, [r4, #12]
 800b5c4:	bd10      	pop	{r4, pc}

0800b5c6 <__swrite>:
 800b5c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5ca:	461f      	mov	r7, r3
 800b5cc:	898b      	ldrh	r3, [r1, #12]
 800b5ce:	05db      	lsls	r3, r3, #23
 800b5d0:	4605      	mov	r5, r0
 800b5d2:	460c      	mov	r4, r1
 800b5d4:	4616      	mov	r6, r2
 800b5d6:	d505      	bpl.n	800b5e4 <__swrite+0x1e>
 800b5d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5dc:	2302      	movs	r3, #2
 800b5de:	2200      	movs	r2, #0
 800b5e0:	f000 f868 	bl	800b6b4 <_lseek_r>
 800b5e4:	89a3      	ldrh	r3, [r4, #12]
 800b5e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b5ee:	81a3      	strh	r3, [r4, #12]
 800b5f0:	4632      	mov	r2, r6
 800b5f2:	463b      	mov	r3, r7
 800b5f4:	4628      	mov	r0, r5
 800b5f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5fa:	f000 b817 	b.w	800b62c <_write_r>

0800b5fe <__sseek>:
 800b5fe:	b510      	push	{r4, lr}
 800b600:	460c      	mov	r4, r1
 800b602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b606:	f000 f855 	bl	800b6b4 <_lseek_r>
 800b60a:	1c43      	adds	r3, r0, #1
 800b60c:	89a3      	ldrh	r3, [r4, #12]
 800b60e:	bf15      	itete	ne
 800b610:	6560      	strne	r0, [r4, #84]	; 0x54
 800b612:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b616:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b61a:	81a3      	strheq	r3, [r4, #12]
 800b61c:	bf18      	it	ne
 800b61e:	81a3      	strhne	r3, [r4, #12]
 800b620:	bd10      	pop	{r4, pc}

0800b622 <__sclose>:
 800b622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b626:	f000 b813 	b.w	800b650 <_close_r>
	...

0800b62c <_write_r>:
 800b62c:	b538      	push	{r3, r4, r5, lr}
 800b62e:	4d07      	ldr	r5, [pc, #28]	; (800b64c <_write_r+0x20>)
 800b630:	4604      	mov	r4, r0
 800b632:	4608      	mov	r0, r1
 800b634:	4611      	mov	r1, r2
 800b636:	2200      	movs	r2, #0
 800b638:	602a      	str	r2, [r5, #0]
 800b63a:	461a      	mov	r2, r3
 800b63c:	f7f6 fb17 	bl	8001c6e <_write>
 800b640:	1c43      	adds	r3, r0, #1
 800b642:	d102      	bne.n	800b64a <_write_r+0x1e>
 800b644:	682b      	ldr	r3, [r5, #0]
 800b646:	b103      	cbz	r3, 800b64a <_write_r+0x1e>
 800b648:	6023      	str	r3, [r4, #0]
 800b64a:	bd38      	pop	{r3, r4, r5, pc}
 800b64c:	20001f34 	.word	0x20001f34

0800b650 <_close_r>:
 800b650:	b538      	push	{r3, r4, r5, lr}
 800b652:	4d06      	ldr	r5, [pc, #24]	; (800b66c <_close_r+0x1c>)
 800b654:	2300      	movs	r3, #0
 800b656:	4604      	mov	r4, r0
 800b658:	4608      	mov	r0, r1
 800b65a:	602b      	str	r3, [r5, #0]
 800b65c:	f7f6 fb23 	bl	8001ca6 <_close>
 800b660:	1c43      	adds	r3, r0, #1
 800b662:	d102      	bne.n	800b66a <_close_r+0x1a>
 800b664:	682b      	ldr	r3, [r5, #0]
 800b666:	b103      	cbz	r3, 800b66a <_close_r+0x1a>
 800b668:	6023      	str	r3, [r4, #0]
 800b66a:	bd38      	pop	{r3, r4, r5, pc}
 800b66c:	20001f34 	.word	0x20001f34

0800b670 <_fstat_r>:
 800b670:	b538      	push	{r3, r4, r5, lr}
 800b672:	4d07      	ldr	r5, [pc, #28]	; (800b690 <_fstat_r+0x20>)
 800b674:	2300      	movs	r3, #0
 800b676:	4604      	mov	r4, r0
 800b678:	4608      	mov	r0, r1
 800b67a:	4611      	mov	r1, r2
 800b67c:	602b      	str	r3, [r5, #0]
 800b67e:	f7f6 fb1e 	bl	8001cbe <_fstat>
 800b682:	1c43      	adds	r3, r0, #1
 800b684:	d102      	bne.n	800b68c <_fstat_r+0x1c>
 800b686:	682b      	ldr	r3, [r5, #0]
 800b688:	b103      	cbz	r3, 800b68c <_fstat_r+0x1c>
 800b68a:	6023      	str	r3, [r4, #0]
 800b68c:	bd38      	pop	{r3, r4, r5, pc}
 800b68e:	bf00      	nop
 800b690:	20001f34 	.word	0x20001f34

0800b694 <_isatty_r>:
 800b694:	b538      	push	{r3, r4, r5, lr}
 800b696:	4d06      	ldr	r5, [pc, #24]	; (800b6b0 <_isatty_r+0x1c>)
 800b698:	2300      	movs	r3, #0
 800b69a:	4604      	mov	r4, r0
 800b69c:	4608      	mov	r0, r1
 800b69e:	602b      	str	r3, [r5, #0]
 800b6a0:	f7f6 fb1d 	bl	8001cde <_isatty>
 800b6a4:	1c43      	adds	r3, r0, #1
 800b6a6:	d102      	bne.n	800b6ae <_isatty_r+0x1a>
 800b6a8:	682b      	ldr	r3, [r5, #0]
 800b6aa:	b103      	cbz	r3, 800b6ae <_isatty_r+0x1a>
 800b6ac:	6023      	str	r3, [r4, #0]
 800b6ae:	bd38      	pop	{r3, r4, r5, pc}
 800b6b0:	20001f34 	.word	0x20001f34

0800b6b4 <_lseek_r>:
 800b6b4:	b538      	push	{r3, r4, r5, lr}
 800b6b6:	4d07      	ldr	r5, [pc, #28]	; (800b6d4 <_lseek_r+0x20>)
 800b6b8:	4604      	mov	r4, r0
 800b6ba:	4608      	mov	r0, r1
 800b6bc:	4611      	mov	r1, r2
 800b6be:	2200      	movs	r2, #0
 800b6c0:	602a      	str	r2, [r5, #0]
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	f7f6 fb16 	bl	8001cf4 <_lseek>
 800b6c8:	1c43      	adds	r3, r0, #1
 800b6ca:	d102      	bne.n	800b6d2 <_lseek_r+0x1e>
 800b6cc:	682b      	ldr	r3, [r5, #0]
 800b6ce:	b103      	cbz	r3, 800b6d2 <_lseek_r+0x1e>
 800b6d0:	6023      	str	r3, [r4, #0]
 800b6d2:	bd38      	pop	{r3, r4, r5, pc}
 800b6d4:	20001f34 	.word	0x20001f34

0800b6d8 <_read_r>:
 800b6d8:	b538      	push	{r3, r4, r5, lr}
 800b6da:	4d07      	ldr	r5, [pc, #28]	; (800b6f8 <_read_r+0x20>)
 800b6dc:	4604      	mov	r4, r0
 800b6de:	4608      	mov	r0, r1
 800b6e0:	4611      	mov	r1, r2
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	602a      	str	r2, [r5, #0]
 800b6e6:	461a      	mov	r2, r3
 800b6e8:	f7f6 faa4 	bl	8001c34 <_read>
 800b6ec:	1c43      	adds	r3, r0, #1
 800b6ee:	d102      	bne.n	800b6f6 <_read_r+0x1e>
 800b6f0:	682b      	ldr	r3, [r5, #0]
 800b6f2:	b103      	cbz	r3, 800b6f6 <_read_r+0x1e>
 800b6f4:	6023      	str	r3, [r4, #0]
 800b6f6:	bd38      	pop	{r3, r4, r5, pc}
 800b6f8:	20001f34 	.word	0x20001f34

0800b6fc <pow>:
 800b6fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b700:	ec59 8b10 	vmov	r8, r9, d0
 800b704:	ec57 6b11 	vmov	r6, r7, d1
 800b708:	f000 f8a6 	bl	800b858 <__ieee754_pow>
 800b70c:	4b4e      	ldr	r3, [pc, #312]	; (800b848 <pow+0x14c>)
 800b70e:	f993 3000 	ldrsb.w	r3, [r3]
 800b712:	3301      	adds	r3, #1
 800b714:	ec55 4b10 	vmov	r4, r5, d0
 800b718:	d015      	beq.n	800b746 <pow+0x4a>
 800b71a:	4632      	mov	r2, r6
 800b71c:	463b      	mov	r3, r7
 800b71e:	4630      	mov	r0, r6
 800b720:	4639      	mov	r1, r7
 800b722:	f7f5 fa0b 	bl	8000b3c <__aeabi_dcmpun>
 800b726:	b970      	cbnz	r0, 800b746 <pow+0x4a>
 800b728:	4642      	mov	r2, r8
 800b72a:	464b      	mov	r3, r9
 800b72c:	4640      	mov	r0, r8
 800b72e:	4649      	mov	r1, r9
 800b730:	f7f5 fa04 	bl	8000b3c <__aeabi_dcmpun>
 800b734:	2200      	movs	r2, #0
 800b736:	2300      	movs	r3, #0
 800b738:	b148      	cbz	r0, 800b74e <pow+0x52>
 800b73a:	4630      	mov	r0, r6
 800b73c:	4639      	mov	r1, r7
 800b73e:	f7f5 f9cb 	bl	8000ad8 <__aeabi_dcmpeq>
 800b742:	2800      	cmp	r0, #0
 800b744:	d17d      	bne.n	800b842 <pow+0x146>
 800b746:	ec45 4b10 	vmov	d0, r4, r5
 800b74a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b74e:	4640      	mov	r0, r8
 800b750:	4649      	mov	r1, r9
 800b752:	f7f5 f9c1 	bl	8000ad8 <__aeabi_dcmpeq>
 800b756:	b1e0      	cbz	r0, 800b792 <pow+0x96>
 800b758:	2200      	movs	r2, #0
 800b75a:	2300      	movs	r3, #0
 800b75c:	4630      	mov	r0, r6
 800b75e:	4639      	mov	r1, r7
 800b760:	f7f5 f9ba 	bl	8000ad8 <__aeabi_dcmpeq>
 800b764:	2800      	cmp	r0, #0
 800b766:	d16c      	bne.n	800b842 <pow+0x146>
 800b768:	ec47 6b10 	vmov	d0, r6, r7
 800b76c:	f000 fe53 	bl	800c416 <finite>
 800b770:	2800      	cmp	r0, #0
 800b772:	d0e8      	beq.n	800b746 <pow+0x4a>
 800b774:	2200      	movs	r2, #0
 800b776:	2300      	movs	r3, #0
 800b778:	4630      	mov	r0, r6
 800b77a:	4639      	mov	r1, r7
 800b77c:	f7f5 f9b6 	bl	8000aec <__aeabi_dcmplt>
 800b780:	2800      	cmp	r0, #0
 800b782:	d0e0      	beq.n	800b746 <pow+0x4a>
 800b784:	f7fd f8f2 	bl	800896c <__errno>
 800b788:	2321      	movs	r3, #33	; 0x21
 800b78a:	6003      	str	r3, [r0, #0]
 800b78c:	2400      	movs	r4, #0
 800b78e:	4d2f      	ldr	r5, [pc, #188]	; (800b84c <pow+0x150>)
 800b790:	e7d9      	b.n	800b746 <pow+0x4a>
 800b792:	ec45 4b10 	vmov	d0, r4, r5
 800b796:	f000 fe3e 	bl	800c416 <finite>
 800b79a:	bbb8      	cbnz	r0, 800b80c <pow+0x110>
 800b79c:	ec49 8b10 	vmov	d0, r8, r9
 800b7a0:	f000 fe39 	bl	800c416 <finite>
 800b7a4:	b390      	cbz	r0, 800b80c <pow+0x110>
 800b7a6:	ec47 6b10 	vmov	d0, r6, r7
 800b7aa:	f000 fe34 	bl	800c416 <finite>
 800b7ae:	b368      	cbz	r0, 800b80c <pow+0x110>
 800b7b0:	4622      	mov	r2, r4
 800b7b2:	462b      	mov	r3, r5
 800b7b4:	4620      	mov	r0, r4
 800b7b6:	4629      	mov	r1, r5
 800b7b8:	f7f5 f9c0 	bl	8000b3c <__aeabi_dcmpun>
 800b7bc:	b160      	cbz	r0, 800b7d8 <pow+0xdc>
 800b7be:	f7fd f8d5 	bl	800896c <__errno>
 800b7c2:	2321      	movs	r3, #33	; 0x21
 800b7c4:	6003      	str	r3, [r0, #0]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	4610      	mov	r0, r2
 800b7cc:	4619      	mov	r1, r3
 800b7ce:	f7f5 f845 	bl	800085c <__aeabi_ddiv>
 800b7d2:	4604      	mov	r4, r0
 800b7d4:	460d      	mov	r5, r1
 800b7d6:	e7b6      	b.n	800b746 <pow+0x4a>
 800b7d8:	f7fd f8c8 	bl	800896c <__errno>
 800b7dc:	2322      	movs	r3, #34	; 0x22
 800b7de:	6003      	str	r3, [r0, #0]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	4640      	mov	r0, r8
 800b7e6:	4649      	mov	r1, r9
 800b7e8:	f7f5 f980 	bl	8000aec <__aeabi_dcmplt>
 800b7ec:	2400      	movs	r4, #0
 800b7ee:	b158      	cbz	r0, 800b808 <pow+0x10c>
 800b7f0:	ec47 6b10 	vmov	d0, r6, r7
 800b7f4:	f000 fe24 	bl	800c440 <rint>
 800b7f8:	4632      	mov	r2, r6
 800b7fa:	ec51 0b10 	vmov	r0, r1, d0
 800b7fe:	463b      	mov	r3, r7
 800b800:	f7f5 f96a 	bl	8000ad8 <__aeabi_dcmpeq>
 800b804:	2800      	cmp	r0, #0
 800b806:	d0c2      	beq.n	800b78e <pow+0x92>
 800b808:	4d11      	ldr	r5, [pc, #68]	; (800b850 <pow+0x154>)
 800b80a:	e79c      	b.n	800b746 <pow+0x4a>
 800b80c:	2200      	movs	r2, #0
 800b80e:	2300      	movs	r3, #0
 800b810:	4620      	mov	r0, r4
 800b812:	4629      	mov	r1, r5
 800b814:	f7f5 f960 	bl	8000ad8 <__aeabi_dcmpeq>
 800b818:	2800      	cmp	r0, #0
 800b81a:	d094      	beq.n	800b746 <pow+0x4a>
 800b81c:	ec49 8b10 	vmov	d0, r8, r9
 800b820:	f000 fdf9 	bl	800c416 <finite>
 800b824:	2800      	cmp	r0, #0
 800b826:	d08e      	beq.n	800b746 <pow+0x4a>
 800b828:	ec47 6b10 	vmov	d0, r6, r7
 800b82c:	f000 fdf3 	bl	800c416 <finite>
 800b830:	2800      	cmp	r0, #0
 800b832:	d088      	beq.n	800b746 <pow+0x4a>
 800b834:	f7fd f89a 	bl	800896c <__errno>
 800b838:	2322      	movs	r3, #34	; 0x22
 800b83a:	6003      	str	r3, [r0, #0]
 800b83c:	2400      	movs	r4, #0
 800b83e:	2500      	movs	r5, #0
 800b840:	e781      	b.n	800b746 <pow+0x4a>
 800b842:	4d04      	ldr	r5, [pc, #16]	; (800b854 <pow+0x158>)
 800b844:	2400      	movs	r4, #0
 800b846:	e77e      	b.n	800b746 <pow+0x4a>
 800b848:	20000350 	.word	0x20000350
 800b84c:	fff00000 	.word	0xfff00000
 800b850:	7ff00000 	.word	0x7ff00000
 800b854:	3ff00000 	.word	0x3ff00000

0800b858 <__ieee754_pow>:
 800b858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b85c:	ed2d 8b06 	vpush	{d8-d10}
 800b860:	b08d      	sub	sp, #52	; 0x34
 800b862:	ed8d 1b02 	vstr	d1, [sp, #8]
 800b866:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800b86a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800b86e:	ea56 0100 	orrs.w	r1, r6, r0
 800b872:	ec53 2b10 	vmov	r2, r3, d0
 800b876:	f000 84d1 	beq.w	800c21c <__ieee754_pow+0x9c4>
 800b87a:	497f      	ldr	r1, [pc, #508]	; (800ba78 <__ieee754_pow+0x220>)
 800b87c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800b880:	428c      	cmp	r4, r1
 800b882:	ee10 8a10 	vmov	r8, s0
 800b886:	4699      	mov	r9, r3
 800b888:	dc09      	bgt.n	800b89e <__ieee754_pow+0x46>
 800b88a:	d103      	bne.n	800b894 <__ieee754_pow+0x3c>
 800b88c:	b97a      	cbnz	r2, 800b8ae <__ieee754_pow+0x56>
 800b88e:	42a6      	cmp	r6, r4
 800b890:	dd02      	ble.n	800b898 <__ieee754_pow+0x40>
 800b892:	e00c      	b.n	800b8ae <__ieee754_pow+0x56>
 800b894:	428e      	cmp	r6, r1
 800b896:	dc02      	bgt.n	800b89e <__ieee754_pow+0x46>
 800b898:	428e      	cmp	r6, r1
 800b89a:	d110      	bne.n	800b8be <__ieee754_pow+0x66>
 800b89c:	b178      	cbz	r0, 800b8be <__ieee754_pow+0x66>
 800b89e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b8a2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b8a6:	ea54 0308 	orrs.w	r3, r4, r8
 800b8aa:	f000 84b7 	beq.w	800c21c <__ieee754_pow+0x9c4>
 800b8ae:	4873      	ldr	r0, [pc, #460]	; (800ba7c <__ieee754_pow+0x224>)
 800b8b0:	b00d      	add	sp, #52	; 0x34
 800b8b2:	ecbd 8b06 	vpop	{d8-d10}
 800b8b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8ba:	f000 bdb9 	b.w	800c430 <nan>
 800b8be:	f1b9 0f00 	cmp.w	r9, #0
 800b8c2:	da36      	bge.n	800b932 <__ieee754_pow+0xda>
 800b8c4:	496e      	ldr	r1, [pc, #440]	; (800ba80 <__ieee754_pow+0x228>)
 800b8c6:	428e      	cmp	r6, r1
 800b8c8:	dc51      	bgt.n	800b96e <__ieee754_pow+0x116>
 800b8ca:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800b8ce:	428e      	cmp	r6, r1
 800b8d0:	f340 84af 	ble.w	800c232 <__ieee754_pow+0x9da>
 800b8d4:	1531      	asrs	r1, r6, #20
 800b8d6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b8da:	2914      	cmp	r1, #20
 800b8dc:	dd0f      	ble.n	800b8fe <__ieee754_pow+0xa6>
 800b8de:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800b8e2:	fa20 fc01 	lsr.w	ip, r0, r1
 800b8e6:	fa0c f101 	lsl.w	r1, ip, r1
 800b8ea:	4281      	cmp	r1, r0
 800b8ec:	f040 84a1 	bne.w	800c232 <__ieee754_pow+0x9da>
 800b8f0:	f00c 0c01 	and.w	ip, ip, #1
 800b8f4:	f1cc 0102 	rsb	r1, ip, #2
 800b8f8:	9100      	str	r1, [sp, #0]
 800b8fa:	b180      	cbz	r0, 800b91e <__ieee754_pow+0xc6>
 800b8fc:	e059      	b.n	800b9b2 <__ieee754_pow+0x15a>
 800b8fe:	2800      	cmp	r0, #0
 800b900:	d155      	bne.n	800b9ae <__ieee754_pow+0x156>
 800b902:	f1c1 0114 	rsb	r1, r1, #20
 800b906:	fa46 fc01 	asr.w	ip, r6, r1
 800b90a:	fa0c f101 	lsl.w	r1, ip, r1
 800b90e:	42b1      	cmp	r1, r6
 800b910:	f040 848c 	bne.w	800c22c <__ieee754_pow+0x9d4>
 800b914:	f00c 0c01 	and.w	ip, ip, #1
 800b918:	f1cc 0102 	rsb	r1, ip, #2
 800b91c:	9100      	str	r1, [sp, #0]
 800b91e:	4959      	ldr	r1, [pc, #356]	; (800ba84 <__ieee754_pow+0x22c>)
 800b920:	428e      	cmp	r6, r1
 800b922:	d12d      	bne.n	800b980 <__ieee754_pow+0x128>
 800b924:	2f00      	cmp	r7, #0
 800b926:	da79      	bge.n	800ba1c <__ieee754_pow+0x1c4>
 800b928:	4956      	ldr	r1, [pc, #344]	; (800ba84 <__ieee754_pow+0x22c>)
 800b92a:	2000      	movs	r0, #0
 800b92c:	f7f4 ff96 	bl	800085c <__aeabi_ddiv>
 800b930:	e016      	b.n	800b960 <__ieee754_pow+0x108>
 800b932:	2100      	movs	r1, #0
 800b934:	9100      	str	r1, [sp, #0]
 800b936:	2800      	cmp	r0, #0
 800b938:	d13b      	bne.n	800b9b2 <__ieee754_pow+0x15a>
 800b93a:	494f      	ldr	r1, [pc, #316]	; (800ba78 <__ieee754_pow+0x220>)
 800b93c:	428e      	cmp	r6, r1
 800b93e:	d1ee      	bne.n	800b91e <__ieee754_pow+0xc6>
 800b940:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b944:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b948:	ea53 0308 	orrs.w	r3, r3, r8
 800b94c:	f000 8466 	beq.w	800c21c <__ieee754_pow+0x9c4>
 800b950:	4b4d      	ldr	r3, [pc, #308]	; (800ba88 <__ieee754_pow+0x230>)
 800b952:	429c      	cmp	r4, r3
 800b954:	dd0d      	ble.n	800b972 <__ieee754_pow+0x11a>
 800b956:	2f00      	cmp	r7, #0
 800b958:	f280 8464 	bge.w	800c224 <__ieee754_pow+0x9cc>
 800b95c:	2000      	movs	r0, #0
 800b95e:	2100      	movs	r1, #0
 800b960:	ec41 0b10 	vmov	d0, r0, r1
 800b964:	b00d      	add	sp, #52	; 0x34
 800b966:	ecbd 8b06 	vpop	{d8-d10}
 800b96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b96e:	2102      	movs	r1, #2
 800b970:	e7e0      	b.n	800b934 <__ieee754_pow+0xdc>
 800b972:	2f00      	cmp	r7, #0
 800b974:	daf2      	bge.n	800b95c <__ieee754_pow+0x104>
 800b976:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800b97a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b97e:	e7ef      	b.n	800b960 <__ieee754_pow+0x108>
 800b980:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800b984:	d104      	bne.n	800b990 <__ieee754_pow+0x138>
 800b986:	4610      	mov	r0, r2
 800b988:	4619      	mov	r1, r3
 800b98a:	f7f4 fe3d 	bl	8000608 <__aeabi_dmul>
 800b98e:	e7e7      	b.n	800b960 <__ieee754_pow+0x108>
 800b990:	493e      	ldr	r1, [pc, #248]	; (800ba8c <__ieee754_pow+0x234>)
 800b992:	428f      	cmp	r7, r1
 800b994:	d10d      	bne.n	800b9b2 <__ieee754_pow+0x15a>
 800b996:	f1b9 0f00 	cmp.w	r9, #0
 800b99a:	db0a      	blt.n	800b9b2 <__ieee754_pow+0x15a>
 800b99c:	ec43 2b10 	vmov	d0, r2, r3
 800b9a0:	b00d      	add	sp, #52	; 0x34
 800b9a2:	ecbd 8b06 	vpop	{d8-d10}
 800b9a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9aa:	f000 bc77 	b.w	800c29c <__ieee754_sqrt>
 800b9ae:	2100      	movs	r1, #0
 800b9b0:	9100      	str	r1, [sp, #0]
 800b9b2:	ec43 2b10 	vmov	d0, r2, r3
 800b9b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b9ba:	f000 fd23 	bl	800c404 <fabs>
 800b9be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b9c2:	ec51 0b10 	vmov	r0, r1, d0
 800b9c6:	f1b8 0f00 	cmp.w	r8, #0
 800b9ca:	d12a      	bne.n	800ba22 <__ieee754_pow+0x1ca>
 800b9cc:	b12c      	cbz	r4, 800b9da <__ieee754_pow+0x182>
 800b9ce:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800ba84 <__ieee754_pow+0x22c>
 800b9d2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800b9d6:	45e6      	cmp	lr, ip
 800b9d8:	d123      	bne.n	800ba22 <__ieee754_pow+0x1ca>
 800b9da:	2f00      	cmp	r7, #0
 800b9dc:	da05      	bge.n	800b9ea <__ieee754_pow+0x192>
 800b9de:	4602      	mov	r2, r0
 800b9e0:	460b      	mov	r3, r1
 800b9e2:	2000      	movs	r0, #0
 800b9e4:	4927      	ldr	r1, [pc, #156]	; (800ba84 <__ieee754_pow+0x22c>)
 800b9e6:	f7f4 ff39 	bl	800085c <__aeabi_ddiv>
 800b9ea:	f1b9 0f00 	cmp.w	r9, #0
 800b9ee:	dab7      	bge.n	800b960 <__ieee754_pow+0x108>
 800b9f0:	9b00      	ldr	r3, [sp, #0]
 800b9f2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b9f6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b9fa:	4323      	orrs	r3, r4
 800b9fc:	d108      	bne.n	800ba10 <__ieee754_pow+0x1b8>
 800b9fe:	4602      	mov	r2, r0
 800ba00:	460b      	mov	r3, r1
 800ba02:	4610      	mov	r0, r2
 800ba04:	4619      	mov	r1, r3
 800ba06:	f7f4 fc47 	bl	8000298 <__aeabi_dsub>
 800ba0a:	4602      	mov	r2, r0
 800ba0c:	460b      	mov	r3, r1
 800ba0e:	e78d      	b.n	800b92c <__ieee754_pow+0xd4>
 800ba10:	9b00      	ldr	r3, [sp, #0]
 800ba12:	2b01      	cmp	r3, #1
 800ba14:	d1a4      	bne.n	800b960 <__ieee754_pow+0x108>
 800ba16:	4602      	mov	r2, r0
 800ba18:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba1c:	4610      	mov	r0, r2
 800ba1e:	4619      	mov	r1, r3
 800ba20:	e79e      	b.n	800b960 <__ieee754_pow+0x108>
 800ba22:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800ba26:	f10c 35ff 	add.w	r5, ip, #4294967295
 800ba2a:	950a      	str	r5, [sp, #40]	; 0x28
 800ba2c:	9d00      	ldr	r5, [sp, #0]
 800ba2e:	46ac      	mov	ip, r5
 800ba30:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800ba32:	ea5c 0505 	orrs.w	r5, ip, r5
 800ba36:	d0e4      	beq.n	800ba02 <__ieee754_pow+0x1aa>
 800ba38:	4b15      	ldr	r3, [pc, #84]	; (800ba90 <__ieee754_pow+0x238>)
 800ba3a:	429e      	cmp	r6, r3
 800ba3c:	f340 80fc 	ble.w	800bc38 <__ieee754_pow+0x3e0>
 800ba40:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ba44:	429e      	cmp	r6, r3
 800ba46:	4b10      	ldr	r3, [pc, #64]	; (800ba88 <__ieee754_pow+0x230>)
 800ba48:	dd07      	ble.n	800ba5a <__ieee754_pow+0x202>
 800ba4a:	429c      	cmp	r4, r3
 800ba4c:	dc0a      	bgt.n	800ba64 <__ieee754_pow+0x20c>
 800ba4e:	2f00      	cmp	r7, #0
 800ba50:	da84      	bge.n	800b95c <__ieee754_pow+0x104>
 800ba52:	a307      	add	r3, pc, #28	; (adr r3, 800ba70 <__ieee754_pow+0x218>)
 800ba54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba58:	e795      	b.n	800b986 <__ieee754_pow+0x12e>
 800ba5a:	429c      	cmp	r4, r3
 800ba5c:	dbf7      	blt.n	800ba4e <__ieee754_pow+0x1f6>
 800ba5e:	4b09      	ldr	r3, [pc, #36]	; (800ba84 <__ieee754_pow+0x22c>)
 800ba60:	429c      	cmp	r4, r3
 800ba62:	dd17      	ble.n	800ba94 <__ieee754_pow+0x23c>
 800ba64:	2f00      	cmp	r7, #0
 800ba66:	dcf4      	bgt.n	800ba52 <__ieee754_pow+0x1fa>
 800ba68:	e778      	b.n	800b95c <__ieee754_pow+0x104>
 800ba6a:	bf00      	nop
 800ba6c:	f3af 8000 	nop.w
 800ba70:	8800759c 	.word	0x8800759c
 800ba74:	7e37e43c 	.word	0x7e37e43c
 800ba78:	7ff00000 	.word	0x7ff00000
 800ba7c:	0800c990 	.word	0x0800c990
 800ba80:	433fffff 	.word	0x433fffff
 800ba84:	3ff00000 	.word	0x3ff00000
 800ba88:	3fefffff 	.word	0x3fefffff
 800ba8c:	3fe00000 	.word	0x3fe00000
 800ba90:	41e00000 	.word	0x41e00000
 800ba94:	4b64      	ldr	r3, [pc, #400]	; (800bc28 <__ieee754_pow+0x3d0>)
 800ba96:	2200      	movs	r2, #0
 800ba98:	f7f4 fbfe 	bl	8000298 <__aeabi_dsub>
 800ba9c:	a356      	add	r3, pc, #344	; (adr r3, 800bbf8 <__ieee754_pow+0x3a0>)
 800ba9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa2:	4604      	mov	r4, r0
 800baa4:	460d      	mov	r5, r1
 800baa6:	f7f4 fdaf 	bl	8000608 <__aeabi_dmul>
 800baaa:	a355      	add	r3, pc, #340	; (adr r3, 800bc00 <__ieee754_pow+0x3a8>)
 800baac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab0:	4606      	mov	r6, r0
 800bab2:	460f      	mov	r7, r1
 800bab4:	4620      	mov	r0, r4
 800bab6:	4629      	mov	r1, r5
 800bab8:	f7f4 fda6 	bl	8000608 <__aeabi_dmul>
 800babc:	4b5b      	ldr	r3, [pc, #364]	; (800bc2c <__ieee754_pow+0x3d4>)
 800babe:	4682      	mov	sl, r0
 800bac0:	468b      	mov	fp, r1
 800bac2:	2200      	movs	r2, #0
 800bac4:	4620      	mov	r0, r4
 800bac6:	4629      	mov	r1, r5
 800bac8:	f7f4 fd9e 	bl	8000608 <__aeabi_dmul>
 800bacc:	4602      	mov	r2, r0
 800bace:	460b      	mov	r3, r1
 800bad0:	a14d      	add	r1, pc, #308	; (adr r1, 800bc08 <__ieee754_pow+0x3b0>)
 800bad2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bad6:	f7f4 fbdf 	bl	8000298 <__aeabi_dsub>
 800bada:	4622      	mov	r2, r4
 800badc:	462b      	mov	r3, r5
 800bade:	f7f4 fd93 	bl	8000608 <__aeabi_dmul>
 800bae2:	4602      	mov	r2, r0
 800bae4:	460b      	mov	r3, r1
 800bae6:	2000      	movs	r0, #0
 800bae8:	4951      	ldr	r1, [pc, #324]	; (800bc30 <__ieee754_pow+0x3d8>)
 800baea:	f7f4 fbd5 	bl	8000298 <__aeabi_dsub>
 800baee:	4622      	mov	r2, r4
 800baf0:	4680      	mov	r8, r0
 800baf2:	4689      	mov	r9, r1
 800baf4:	462b      	mov	r3, r5
 800baf6:	4620      	mov	r0, r4
 800baf8:	4629      	mov	r1, r5
 800bafa:	f7f4 fd85 	bl	8000608 <__aeabi_dmul>
 800bafe:	4602      	mov	r2, r0
 800bb00:	460b      	mov	r3, r1
 800bb02:	4640      	mov	r0, r8
 800bb04:	4649      	mov	r1, r9
 800bb06:	f7f4 fd7f 	bl	8000608 <__aeabi_dmul>
 800bb0a:	a341      	add	r3, pc, #260	; (adr r3, 800bc10 <__ieee754_pow+0x3b8>)
 800bb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb10:	f7f4 fd7a 	bl	8000608 <__aeabi_dmul>
 800bb14:	4602      	mov	r2, r0
 800bb16:	460b      	mov	r3, r1
 800bb18:	4650      	mov	r0, sl
 800bb1a:	4659      	mov	r1, fp
 800bb1c:	f7f4 fbbc 	bl	8000298 <__aeabi_dsub>
 800bb20:	4602      	mov	r2, r0
 800bb22:	460b      	mov	r3, r1
 800bb24:	4680      	mov	r8, r0
 800bb26:	4689      	mov	r9, r1
 800bb28:	4630      	mov	r0, r6
 800bb2a:	4639      	mov	r1, r7
 800bb2c:	f7f4 fbb6 	bl	800029c <__adddf3>
 800bb30:	2400      	movs	r4, #0
 800bb32:	4632      	mov	r2, r6
 800bb34:	463b      	mov	r3, r7
 800bb36:	4620      	mov	r0, r4
 800bb38:	460d      	mov	r5, r1
 800bb3a:	f7f4 fbad 	bl	8000298 <__aeabi_dsub>
 800bb3e:	4602      	mov	r2, r0
 800bb40:	460b      	mov	r3, r1
 800bb42:	4640      	mov	r0, r8
 800bb44:	4649      	mov	r1, r9
 800bb46:	f7f4 fba7 	bl	8000298 <__aeabi_dsub>
 800bb4a:	9b00      	ldr	r3, [sp, #0]
 800bb4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb4e:	3b01      	subs	r3, #1
 800bb50:	4313      	orrs	r3, r2
 800bb52:	4682      	mov	sl, r0
 800bb54:	468b      	mov	fp, r1
 800bb56:	f040 81f1 	bne.w	800bf3c <__ieee754_pow+0x6e4>
 800bb5a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800bc18 <__ieee754_pow+0x3c0>
 800bb5e:	eeb0 8a47 	vmov.f32	s16, s14
 800bb62:	eef0 8a67 	vmov.f32	s17, s15
 800bb66:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bb6a:	2600      	movs	r6, #0
 800bb6c:	4632      	mov	r2, r6
 800bb6e:	463b      	mov	r3, r7
 800bb70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb74:	f7f4 fb90 	bl	8000298 <__aeabi_dsub>
 800bb78:	4622      	mov	r2, r4
 800bb7a:	462b      	mov	r3, r5
 800bb7c:	f7f4 fd44 	bl	8000608 <__aeabi_dmul>
 800bb80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb84:	4680      	mov	r8, r0
 800bb86:	4689      	mov	r9, r1
 800bb88:	4650      	mov	r0, sl
 800bb8a:	4659      	mov	r1, fp
 800bb8c:	f7f4 fd3c 	bl	8000608 <__aeabi_dmul>
 800bb90:	4602      	mov	r2, r0
 800bb92:	460b      	mov	r3, r1
 800bb94:	4640      	mov	r0, r8
 800bb96:	4649      	mov	r1, r9
 800bb98:	f7f4 fb80 	bl	800029c <__adddf3>
 800bb9c:	4632      	mov	r2, r6
 800bb9e:	463b      	mov	r3, r7
 800bba0:	4680      	mov	r8, r0
 800bba2:	4689      	mov	r9, r1
 800bba4:	4620      	mov	r0, r4
 800bba6:	4629      	mov	r1, r5
 800bba8:	f7f4 fd2e 	bl	8000608 <__aeabi_dmul>
 800bbac:	460b      	mov	r3, r1
 800bbae:	4604      	mov	r4, r0
 800bbb0:	460d      	mov	r5, r1
 800bbb2:	4602      	mov	r2, r0
 800bbb4:	4649      	mov	r1, r9
 800bbb6:	4640      	mov	r0, r8
 800bbb8:	f7f4 fb70 	bl	800029c <__adddf3>
 800bbbc:	4b1d      	ldr	r3, [pc, #116]	; (800bc34 <__ieee754_pow+0x3dc>)
 800bbbe:	4299      	cmp	r1, r3
 800bbc0:	ec45 4b19 	vmov	d9, r4, r5
 800bbc4:	4606      	mov	r6, r0
 800bbc6:	460f      	mov	r7, r1
 800bbc8:	468b      	mov	fp, r1
 800bbca:	f340 82fe 	ble.w	800c1ca <__ieee754_pow+0x972>
 800bbce:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800bbd2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800bbd6:	4303      	orrs	r3, r0
 800bbd8:	f000 81f0 	beq.w	800bfbc <__ieee754_pow+0x764>
 800bbdc:	a310      	add	r3, pc, #64	; (adr r3, 800bc20 <__ieee754_pow+0x3c8>)
 800bbde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe2:	ec51 0b18 	vmov	r0, r1, d8
 800bbe6:	f7f4 fd0f 	bl	8000608 <__aeabi_dmul>
 800bbea:	a30d      	add	r3, pc, #52	; (adr r3, 800bc20 <__ieee754_pow+0x3c8>)
 800bbec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf0:	e6cb      	b.n	800b98a <__ieee754_pow+0x132>
 800bbf2:	bf00      	nop
 800bbf4:	f3af 8000 	nop.w
 800bbf8:	60000000 	.word	0x60000000
 800bbfc:	3ff71547 	.word	0x3ff71547
 800bc00:	f85ddf44 	.word	0xf85ddf44
 800bc04:	3e54ae0b 	.word	0x3e54ae0b
 800bc08:	55555555 	.word	0x55555555
 800bc0c:	3fd55555 	.word	0x3fd55555
 800bc10:	652b82fe 	.word	0x652b82fe
 800bc14:	3ff71547 	.word	0x3ff71547
 800bc18:	00000000 	.word	0x00000000
 800bc1c:	bff00000 	.word	0xbff00000
 800bc20:	8800759c 	.word	0x8800759c
 800bc24:	7e37e43c 	.word	0x7e37e43c
 800bc28:	3ff00000 	.word	0x3ff00000
 800bc2c:	3fd00000 	.word	0x3fd00000
 800bc30:	3fe00000 	.word	0x3fe00000
 800bc34:	408fffff 	.word	0x408fffff
 800bc38:	4bd7      	ldr	r3, [pc, #860]	; (800bf98 <__ieee754_pow+0x740>)
 800bc3a:	ea03 0309 	and.w	r3, r3, r9
 800bc3e:	2200      	movs	r2, #0
 800bc40:	b92b      	cbnz	r3, 800bc4e <__ieee754_pow+0x3f6>
 800bc42:	4bd6      	ldr	r3, [pc, #856]	; (800bf9c <__ieee754_pow+0x744>)
 800bc44:	f7f4 fce0 	bl	8000608 <__aeabi_dmul>
 800bc48:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800bc4c:	460c      	mov	r4, r1
 800bc4e:	1523      	asrs	r3, r4, #20
 800bc50:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bc54:	4413      	add	r3, r2
 800bc56:	9309      	str	r3, [sp, #36]	; 0x24
 800bc58:	4bd1      	ldr	r3, [pc, #836]	; (800bfa0 <__ieee754_pow+0x748>)
 800bc5a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bc5e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800bc62:	429c      	cmp	r4, r3
 800bc64:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bc68:	dd08      	ble.n	800bc7c <__ieee754_pow+0x424>
 800bc6a:	4bce      	ldr	r3, [pc, #824]	; (800bfa4 <__ieee754_pow+0x74c>)
 800bc6c:	429c      	cmp	r4, r3
 800bc6e:	f340 8163 	ble.w	800bf38 <__ieee754_pow+0x6e0>
 800bc72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc74:	3301      	adds	r3, #1
 800bc76:	9309      	str	r3, [sp, #36]	; 0x24
 800bc78:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800bc7c:	2400      	movs	r4, #0
 800bc7e:	00e3      	lsls	r3, r4, #3
 800bc80:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc82:	4bc9      	ldr	r3, [pc, #804]	; (800bfa8 <__ieee754_pow+0x750>)
 800bc84:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bc88:	ed93 7b00 	vldr	d7, [r3]
 800bc8c:	4629      	mov	r1, r5
 800bc8e:	ec53 2b17 	vmov	r2, r3, d7
 800bc92:	eeb0 8a47 	vmov.f32	s16, s14
 800bc96:	eef0 8a67 	vmov.f32	s17, s15
 800bc9a:	4682      	mov	sl, r0
 800bc9c:	f7f4 fafc 	bl	8000298 <__aeabi_dsub>
 800bca0:	4652      	mov	r2, sl
 800bca2:	4606      	mov	r6, r0
 800bca4:	460f      	mov	r7, r1
 800bca6:	462b      	mov	r3, r5
 800bca8:	ec51 0b18 	vmov	r0, r1, d8
 800bcac:	f7f4 faf6 	bl	800029c <__adddf3>
 800bcb0:	4602      	mov	r2, r0
 800bcb2:	460b      	mov	r3, r1
 800bcb4:	2000      	movs	r0, #0
 800bcb6:	49bd      	ldr	r1, [pc, #756]	; (800bfac <__ieee754_pow+0x754>)
 800bcb8:	f7f4 fdd0 	bl	800085c <__aeabi_ddiv>
 800bcbc:	ec41 0b19 	vmov	d9, r0, r1
 800bcc0:	4602      	mov	r2, r0
 800bcc2:	460b      	mov	r3, r1
 800bcc4:	4630      	mov	r0, r6
 800bcc6:	4639      	mov	r1, r7
 800bcc8:	f7f4 fc9e 	bl	8000608 <__aeabi_dmul>
 800bccc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bcd0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bcd4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bcd8:	2300      	movs	r3, #0
 800bcda:	9304      	str	r3, [sp, #16]
 800bcdc:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800bce0:	46ab      	mov	fp, r5
 800bce2:	106d      	asrs	r5, r5, #1
 800bce4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800bce8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800bcec:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	4640      	mov	r0, r8
 800bcf4:	4649      	mov	r1, r9
 800bcf6:	4614      	mov	r4, r2
 800bcf8:	461d      	mov	r5, r3
 800bcfa:	f7f4 fc85 	bl	8000608 <__aeabi_dmul>
 800bcfe:	4602      	mov	r2, r0
 800bd00:	460b      	mov	r3, r1
 800bd02:	4630      	mov	r0, r6
 800bd04:	4639      	mov	r1, r7
 800bd06:	f7f4 fac7 	bl	8000298 <__aeabi_dsub>
 800bd0a:	ec53 2b18 	vmov	r2, r3, d8
 800bd0e:	4606      	mov	r6, r0
 800bd10:	460f      	mov	r7, r1
 800bd12:	4620      	mov	r0, r4
 800bd14:	4629      	mov	r1, r5
 800bd16:	f7f4 fabf 	bl	8000298 <__aeabi_dsub>
 800bd1a:	4602      	mov	r2, r0
 800bd1c:	460b      	mov	r3, r1
 800bd1e:	4650      	mov	r0, sl
 800bd20:	4659      	mov	r1, fp
 800bd22:	f7f4 fab9 	bl	8000298 <__aeabi_dsub>
 800bd26:	4642      	mov	r2, r8
 800bd28:	464b      	mov	r3, r9
 800bd2a:	f7f4 fc6d 	bl	8000608 <__aeabi_dmul>
 800bd2e:	4602      	mov	r2, r0
 800bd30:	460b      	mov	r3, r1
 800bd32:	4630      	mov	r0, r6
 800bd34:	4639      	mov	r1, r7
 800bd36:	f7f4 faaf 	bl	8000298 <__aeabi_dsub>
 800bd3a:	ec53 2b19 	vmov	r2, r3, d9
 800bd3e:	f7f4 fc63 	bl	8000608 <__aeabi_dmul>
 800bd42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd46:	ec41 0b18 	vmov	d8, r0, r1
 800bd4a:	4610      	mov	r0, r2
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	f7f4 fc5b 	bl	8000608 <__aeabi_dmul>
 800bd52:	a37d      	add	r3, pc, #500	; (adr r3, 800bf48 <__ieee754_pow+0x6f0>)
 800bd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd58:	4604      	mov	r4, r0
 800bd5a:	460d      	mov	r5, r1
 800bd5c:	f7f4 fc54 	bl	8000608 <__aeabi_dmul>
 800bd60:	a37b      	add	r3, pc, #492	; (adr r3, 800bf50 <__ieee754_pow+0x6f8>)
 800bd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd66:	f7f4 fa99 	bl	800029c <__adddf3>
 800bd6a:	4622      	mov	r2, r4
 800bd6c:	462b      	mov	r3, r5
 800bd6e:	f7f4 fc4b 	bl	8000608 <__aeabi_dmul>
 800bd72:	a379      	add	r3, pc, #484	; (adr r3, 800bf58 <__ieee754_pow+0x700>)
 800bd74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd78:	f7f4 fa90 	bl	800029c <__adddf3>
 800bd7c:	4622      	mov	r2, r4
 800bd7e:	462b      	mov	r3, r5
 800bd80:	f7f4 fc42 	bl	8000608 <__aeabi_dmul>
 800bd84:	a376      	add	r3, pc, #472	; (adr r3, 800bf60 <__ieee754_pow+0x708>)
 800bd86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8a:	f7f4 fa87 	bl	800029c <__adddf3>
 800bd8e:	4622      	mov	r2, r4
 800bd90:	462b      	mov	r3, r5
 800bd92:	f7f4 fc39 	bl	8000608 <__aeabi_dmul>
 800bd96:	a374      	add	r3, pc, #464	; (adr r3, 800bf68 <__ieee754_pow+0x710>)
 800bd98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd9c:	f7f4 fa7e 	bl	800029c <__adddf3>
 800bda0:	4622      	mov	r2, r4
 800bda2:	462b      	mov	r3, r5
 800bda4:	f7f4 fc30 	bl	8000608 <__aeabi_dmul>
 800bda8:	a371      	add	r3, pc, #452	; (adr r3, 800bf70 <__ieee754_pow+0x718>)
 800bdaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdae:	f7f4 fa75 	bl	800029c <__adddf3>
 800bdb2:	4622      	mov	r2, r4
 800bdb4:	4606      	mov	r6, r0
 800bdb6:	460f      	mov	r7, r1
 800bdb8:	462b      	mov	r3, r5
 800bdba:	4620      	mov	r0, r4
 800bdbc:	4629      	mov	r1, r5
 800bdbe:	f7f4 fc23 	bl	8000608 <__aeabi_dmul>
 800bdc2:	4602      	mov	r2, r0
 800bdc4:	460b      	mov	r3, r1
 800bdc6:	4630      	mov	r0, r6
 800bdc8:	4639      	mov	r1, r7
 800bdca:	f7f4 fc1d 	bl	8000608 <__aeabi_dmul>
 800bdce:	4642      	mov	r2, r8
 800bdd0:	4604      	mov	r4, r0
 800bdd2:	460d      	mov	r5, r1
 800bdd4:	464b      	mov	r3, r9
 800bdd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bdda:	f7f4 fa5f 	bl	800029c <__adddf3>
 800bdde:	ec53 2b18 	vmov	r2, r3, d8
 800bde2:	f7f4 fc11 	bl	8000608 <__aeabi_dmul>
 800bde6:	4622      	mov	r2, r4
 800bde8:	462b      	mov	r3, r5
 800bdea:	f7f4 fa57 	bl	800029c <__adddf3>
 800bdee:	4642      	mov	r2, r8
 800bdf0:	4682      	mov	sl, r0
 800bdf2:	468b      	mov	fp, r1
 800bdf4:	464b      	mov	r3, r9
 800bdf6:	4640      	mov	r0, r8
 800bdf8:	4649      	mov	r1, r9
 800bdfa:	f7f4 fc05 	bl	8000608 <__aeabi_dmul>
 800bdfe:	4b6c      	ldr	r3, [pc, #432]	; (800bfb0 <__ieee754_pow+0x758>)
 800be00:	2200      	movs	r2, #0
 800be02:	4606      	mov	r6, r0
 800be04:	460f      	mov	r7, r1
 800be06:	f7f4 fa49 	bl	800029c <__adddf3>
 800be0a:	4652      	mov	r2, sl
 800be0c:	465b      	mov	r3, fp
 800be0e:	f7f4 fa45 	bl	800029c <__adddf3>
 800be12:	9c04      	ldr	r4, [sp, #16]
 800be14:	460d      	mov	r5, r1
 800be16:	4622      	mov	r2, r4
 800be18:	460b      	mov	r3, r1
 800be1a:	4640      	mov	r0, r8
 800be1c:	4649      	mov	r1, r9
 800be1e:	f7f4 fbf3 	bl	8000608 <__aeabi_dmul>
 800be22:	4b63      	ldr	r3, [pc, #396]	; (800bfb0 <__ieee754_pow+0x758>)
 800be24:	4680      	mov	r8, r0
 800be26:	4689      	mov	r9, r1
 800be28:	2200      	movs	r2, #0
 800be2a:	4620      	mov	r0, r4
 800be2c:	4629      	mov	r1, r5
 800be2e:	f7f4 fa33 	bl	8000298 <__aeabi_dsub>
 800be32:	4632      	mov	r2, r6
 800be34:	463b      	mov	r3, r7
 800be36:	f7f4 fa2f 	bl	8000298 <__aeabi_dsub>
 800be3a:	4602      	mov	r2, r0
 800be3c:	460b      	mov	r3, r1
 800be3e:	4650      	mov	r0, sl
 800be40:	4659      	mov	r1, fp
 800be42:	f7f4 fa29 	bl	8000298 <__aeabi_dsub>
 800be46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800be4a:	f7f4 fbdd 	bl	8000608 <__aeabi_dmul>
 800be4e:	4622      	mov	r2, r4
 800be50:	4606      	mov	r6, r0
 800be52:	460f      	mov	r7, r1
 800be54:	462b      	mov	r3, r5
 800be56:	ec51 0b18 	vmov	r0, r1, d8
 800be5a:	f7f4 fbd5 	bl	8000608 <__aeabi_dmul>
 800be5e:	4602      	mov	r2, r0
 800be60:	460b      	mov	r3, r1
 800be62:	4630      	mov	r0, r6
 800be64:	4639      	mov	r1, r7
 800be66:	f7f4 fa19 	bl	800029c <__adddf3>
 800be6a:	4606      	mov	r6, r0
 800be6c:	460f      	mov	r7, r1
 800be6e:	4602      	mov	r2, r0
 800be70:	460b      	mov	r3, r1
 800be72:	4640      	mov	r0, r8
 800be74:	4649      	mov	r1, r9
 800be76:	f7f4 fa11 	bl	800029c <__adddf3>
 800be7a:	9c04      	ldr	r4, [sp, #16]
 800be7c:	a33e      	add	r3, pc, #248	; (adr r3, 800bf78 <__ieee754_pow+0x720>)
 800be7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be82:	4620      	mov	r0, r4
 800be84:	460d      	mov	r5, r1
 800be86:	f7f4 fbbf 	bl	8000608 <__aeabi_dmul>
 800be8a:	4642      	mov	r2, r8
 800be8c:	ec41 0b18 	vmov	d8, r0, r1
 800be90:	464b      	mov	r3, r9
 800be92:	4620      	mov	r0, r4
 800be94:	4629      	mov	r1, r5
 800be96:	f7f4 f9ff 	bl	8000298 <__aeabi_dsub>
 800be9a:	4602      	mov	r2, r0
 800be9c:	460b      	mov	r3, r1
 800be9e:	4630      	mov	r0, r6
 800bea0:	4639      	mov	r1, r7
 800bea2:	f7f4 f9f9 	bl	8000298 <__aeabi_dsub>
 800bea6:	a336      	add	r3, pc, #216	; (adr r3, 800bf80 <__ieee754_pow+0x728>)
 800bea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beac:	f7f4 fbac 	bl	8000608 <__aeabi_dmul>
 800beb0:	a335      	add	r3, pc, #212	; (adr r3, 800bf88 <__ieee754_pow+0x730>)
 800beb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb6:	4606      	mov	r6, r0
 800beb8:	460f      	mov	r7, r1
 800beba:	4620      	mov	r0, r4
 800bebc:	4629      	mov	r1, r5
 800bebe:	f7f4 fba3 	bl	8000608 <__aeabi_dmul>
 800bec2:	4602      	mov	r2, r0
 800bec4:	460b      	mov	r3, r1
 800bec6:	4630      	mov	r0, r6
 800bec8:	4639      	mov	r1, r7
 800beca:	f7f4 f9e7 	bl	800029c <__adddf3>
 800bece:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bed0:	4b38      	ldr	r3, [pc, #224]	; (800bfb4 <__ieee754_pow+0x75c>)
 800bed2:	4413      	add	r3, r2
 800bed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed8:	f7f4 f9e0 	bl	800029c <__adddf3>
 800bedc:	4682      	mov	sl, r0
 800bede:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bee0:	468b      	mov	fp, r1
 800bee2:	f7f4 fb27 	bl	8000534 <__aeabi_i2d>
 800bee6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bee8:	4b33      	ldr	r3, [pc, #204]	; (800bfb8 <__ieee754_pow+0x760>)
 800beea:	4413      	add	r3, r2
 800beec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bef0:	4606      	mov	r6, r0
 800bef2:	460f      	mov	r7, r1
 800bef4:	4652      	mov	r2, sl
 800bef6:	465b      	mov	r3, fp
 800bef8:	ec51 0b18 	vmov	r0, r1, d8
 800befc:	f7f4 f9ce 	bl	800029c <__adddf3>
 800bf00:	4642      	mov	r2, r8
 800bf02:	464b      	mov	r3, r9
 800bf04:	f7f4 f9ca 	bl	800029c <__adddf3>
 800bf08:	4632      	mov	r2, r6
 800bf0a:	463b      	mov	r3, r7
 800bf0c:	f7f4 f9c6 	bl	800029c <__adddf3>
 800bf10:	9c04      	ldr	r4, [sp, #16]
 800bf12:	4632      	mov	r2, r6
 800bf14:	463b      	mov	r3, r7
 800bf16:	4620      	mov	r0, r4
 800bf18:	460d      	mov	r5, r1
 800bf1a:	f7f4 f9bd 	bl	8000298 <__aeabi_dsub>
 800bf1e:	4642      	mov	r2, r8
 800bf20:	464b      	mov	r3, r9
 800bf22:	f7f4 f9b9 	bl	8000298 <__aeabi_dsub>
 800bf26:	ec53 2b18 	vmov	r2, r3, d8
 800bf2a:	f7f4 f9b5 	bl	8000298 <__aeabi_dsub>
 800bf2e:	4602      	mov	r2, r0
 800bf30:	460b      	mov	r3, r1
 800bf32:	4650      	mov	r0, sl
 800bf34:	4659      	mov	r1, fp
 800bf36:	e606      	b.n	800bb46 <__ieee754_pow+0x2ee>
 800bf38:	2401      	movs	r4, #1
 800bf3a:	e6a0      	b.n	800bc7e <__ieee754_pow+0x426>
 800bf3c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800bf90 <__ieee754_pow+0x738>
 800bf40:	e60d      	b.n	800bb5e <__ieee754_pow+0x306>
 800bf42:	bf00      	nop
 800bf44:	f3af 8000 	nop.w
 800bf48:	4a454eef 	.word	0x4a454eef
 800bf4c:	3fca7e28 	.word	0x3fca7e28
 800bf50:	93c9db65 	.word	0x93c9db65
 800bf54:	3fcd864a 	.word	0x3fcd864a
 800bf58:	a91d4101 	.word	0xa91d4101
 800bf5c:	3fd17460 	.word	0x3fd17460
 800bf60:	518f264d 	.word	0x518f264d
 800bf64:	3fd55555 	.word	0x3fd55555
 800bf68:	db6fabff 	.word	0xdb6fabff
 800bf6c:	3fdb6db6 	.word	0x3fdb6db6
 800bf70:	33333303 	.word	0x33333303
 800bf74:	3fe33333 	.word	0x3fe33333
 800bf78:	e0000000 	.word	0xe0000000
 800bf7c:	3feec709 	.word	0x3feec709
 800bf80:	dc3a03fd 	.word	0xdc3a03fd
 800bf84:	3feec709 	.word	0x3feec709
 800bf88:	145b01f5 	.word	0x145b01f5
 800bf8c:	be3e2fe0 	.word	0xbe3e2fe0
 800bf90:	00000000 	.word	0x00000000
 800bf94:	3ff00000 	.word	0x3ff00000
 800bf98:	7ff00000 	.word	0x7ff00000
 800bf9c:	43400000 	.word	0x43400000
 800bfa0:	0003988e 	.word	0x0003988e
 800bfa4:	000bb679 	.word	0x000bb679
 800bfa8:	0800cb00 	.word	0x0800cb00
 800bfac:	3ff00000 	.word	0x3ff00000
 800bfb0:	40080000 	.word	0x40080000
 800bfb4:	0800cb20 	.word	0x0800cb20
 800bfb8:	0800cb10 	.word	0x0800cb10
 800bfbc:	a3b5      	add	r3, pc, #724	; (adr r3, 800c294 <__ieee754_pow+0xa3c>)
 800bfbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc2:	4640      	mov	r0, r8
 800bfc4:	4649      	mov	r1, r9
 800bfc6:	f7f4 f969 	bl	800029c <__adddf3>
 800bfca:	4622      	mov	r2, r4
 800bfcc:	ec41 0b1a 	vmov	d10, r0, r1
 800bfd0:	462b      	mov	r3, r5
 800bfd2:	4630      	mov	r0, r6
 800bfd4:	4639      	mov	r1, r7
 800bfd6:	f7f4 f95f 	bl	8000298 <__aeabi_dsub>
 800bfda:	4602      	mov	r2, r0
 800bfdc:	460b      	mov	r3, r1
 800bfde:	ec51 0b1a 	vmov	r0, r1, d10
 800bfe2:	f7f4 fda1 	bl	8000b28 <__aeabi_dcmpgt>
 800bfe6:	2800      	cmp	r0, #0
 800bfe8:	f47f adf8 	bne.w	800bbdc <__ieee754_pow+0x384>
 800bfec:	4aa4      	ldr	r2, [pc, #656]	; (800c280 <__ieee754_pow+0xa28>)
 800bfee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bff2:	4293      	cmp	r3, r2
 800bff4:	f340 810b 	ble.w	800c20e <__ieee754_pow+0x9b6>
 800bff8:	151b      	asrs	r3, r3, #20
 800bffa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800bffe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c002:	fa4a f303 	asr.w	r3, sl, r3
 800c006:	445b      	add	r3, fp
 800c008:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c00c:	4e9d      	ldr	r6, [pc, #628]	; (800c284 <__ieee754_pow+0xa2c>)
 800c00e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c012:	4116      	asrs	r6, r2
 800c014:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c018:	2000      	movs	r0, #0
 800c01a:	ea23 0106 	bic.w	r1, r3, r6
 800c01e:	f1c2 0214 	rsb	r2, r2, #20
 800c022:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c026:	fa4a fa02 	asr.w	sl, sl, r2
 800c02a:	f1bb 0f00 	cmp.w	fp, #0
 800c02e:	4602      	mov	r2, r0
 800c030:	460b      	mov	r3, r1
 800c032:	4620      	mov	r0, r4
 800c034:	4629      	mov	r1, r5
 800c036:	bfb8      	it	lt
 800c038:	f1ca 0a00 	rsblt	sl, sl, #0
 800c03c:	f7f4 f92c 	bl	8000298 <__aeabi_dsub>
 800c040:	ec41 0b19 	vmov	d9, r0, r1
 800c044:	4642      	mov	r2, r8
 800c046:	464b      	mov	r3, r9
 800c048:	ec51 0b19 	vmov	r0, r1, d9
 800c04c:	f7f4 f926 	bl	800029c <__adddf3>
 800c050:	2400      	movs	r4, #0
 800c052:	a379      	add	r3, pc, #484	; (adr r3, 800c238 <__ieee754_pow+0x9e0>)
 800c054:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c058:	4620      	mov	r0, r4
 800c05a:	460d      	mov	r5, r1
 800c05c:	f7f4 fad4 	bl	8000608 <__aeabi_dmul>
 800c060:	ec53 2b19 	vmov	r2, r3, d9
 800c064:	4606      	mov	r6, r0
 800c066:	460f      	mov	r7, r1
 800c068:	4620      	mov	r0, r4
 800c06a:	4629      	mov	r1, r5
 800c06c:	f7f4 f914 	bl	8000298 <__aeabi_dsub>
 800c070:	4602      	mov	r2, r0
 800c072:	460b      	mov	r3, r1
 800c074:	4640      	mov	r0, r8
 800c076:	4649      	mov	r1, r9
 800c078:	f7f4 f90e 	bl	8000298 <__aeabi_dsub>
 800c07c:	a370      	add	r3, pc, #448	; (adr r3, 800c240 <__ieee754_pow+0x9e8>)
 800c07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c082:	f7f4 fac1 	bl	8000608 <__aeabi_dmul>
 800c086:	a370      	add	r3, pc, #448	; (adr r3, 800c248 <__ieee754_pow+0x9f0>)
 800c088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c08c:	4680      	mov	r8, r0
 800c08e:	4689      	mov	r9, r1
 800c090:	4620      	mov	r0, r4
 800c092:	4629      	mov	r1, r5
 800c094:	f7f4 fab8 	bl	8000608 <__aeabi_dmul>
 800c098:	4602      	mov	r2, r0
 800c09a:	460b      	mov	r3, r1
 800c09c:	4640      	mov	r0, r8
 800c09e:	4649      	mov	r1, r9
 800c0a0:	f7f4 f8fc 	bl	800029c <__adddf3>
 800c0a4:	4604      	mov	r4, r0
 800c0a6:	460d      	mov	r5, r1
 800c0a8:	4602      	mov	r2, r0
 800c0aa:	460b      	mov	r3, r1
 800c0ac:	4630      	mov	r0, r6
 800c0ae:	4639      	mov	r1, r7
 800c0b0:	f7f4 f8f4 	bl	800029c <__adddf3>
 800c0b4:	4632      	mov	r2, r6
 800c0b6:	463b      	mov	r3, r7
 800c0b8:	4680      	mov	r8, r0
 800c0ba:	4689      	mov	r9, r1
 800c0bc:	f7f4 f8ec 	bl	8000298 <__aeabi_dsub>
 800c0c0:	4602      	mov	r2, r0
 800c0c2:	460b      	mov	r3, r1
 800c0c4:	4620      	mov	r0, r4
 800c0c6:	4629      	mov	r1, r5
 800c0c8:	f7f4 f8e6 	bl	8000298 <__aeabi_dsub>
 800c0cc:	4642      	mov	r2, r8
 800c0ce:	4606      	mov	r6, r0
 800c0d0:	460f      	mov	r7, r1
 800c0d2:	464b      	mov	r3, r9
 800c0d4:	4640      	mov	r0, r8
 800c0d6:	4649      	mov	r1, r9
 800c0d8:	f7f4 fa96 	bl	8000608 <__aeabi_dmul>
 800c0dc:	a35c      	add	r3, pc, #368	; (adr r3, 800c250 <__ieee754_pow+0x9f8>)
 800c0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e2:	4604      	mov	r4, r0
 800c0e4:	460d      	mov	r5, r1
 800c0e6:	f7f4 fa8f 	bl	8000608 <__aeabi_dmul>
 800c0ea:	a35b      	add	r3, pc, #364	; (adr r3, 800c258 <__ieee754_pow+0xa00>)
 800c0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f0:	f7f4 f8d2 	bl	8000298 <__aeabi_dsub>
 800c0f4:	4622      	mov	r2, r4
 800c0f6:	462b      	mov	r3, r5
 800c0f8:	f7f4 fa86 	bl	8000608 <__aeabi_dmul>
 800c0fc:	a358      	add	r3, pc, #352	; (adr r3, 800c260 <__ieee754_pow+0xa08>)
 800c0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c102:	f7f4 f8cb 	bl	800029c <__adddf3>
 800c106:	4622      	mov	r2, r4
 800c108:	462b      	mov	r3, r5
 800c10a:	f7f4 fa7d 	bl	8000608 <__aeabi_dmul>
 800c10e:	a356      	add	r3, pc, #344	; (adr r3, 800c268 <__ieee754_pow+0xa10>)
 800c110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c114:	f7f4 f8c0 	bl	8000298 <__aeabi_dsub>
 800c118:	4622      	mov	r2, r4
 800c11a:	462b      	mov	r3, r5
 800c11c:	f7f4 fa74 	bl	8000608 <__aeabi_dmul>
 800c120:	a353      	add	r3, pc, #332	; (adr r3, 800c270 <__ieee754_pow+0xa18>)
 800c122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c126:	f7f4 f8b9 	bl	800029c <__adddf3>
 800c12a:	4622      	mov	r2, r4
 800c12c:	462b      	mov	r3, r5
 800c12e:	f7f4 fa6b 	bl	8000608 <__aeabi_dmul>
 800c132:	4602      	mov	r2, r0
 800c134:	460b      	mov	r3, r1
 800c136:	4640      	mov	r0, r8
 800c138:	4649      	mov	r1, r9
 800c13a:	f7f4 f8ad 	bl	8000298 <__aeabi_dsub>
 800c13e:	4604      	mov	r4, r0
 800c140:	460d      	mov	r5, r1
 800c142:	4602      	mov	r2, r0
 800c144:	460b      	mov	r3, r1
 800c146:	4640      	mov	r0, r8
 800c148:	4649      	mov	r1, r9
 800c14a:	f7f4 fa5d 	bl	8000608 <__aeabi_dmul>
 800c14e:	2200      	movs	r2, #0
 800c150:	ec41 0b19 	vmov	d9, r0, r1
 800c154:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c158:	4620      	mov	r0, r4
 800c15a:	4629      	mov	r1, r5
 800c15c:	f7f4 f89c 	bl	8000298 <__aeabi_dsub>
 800c160:	4602      	mov	r2, r0
 800c162:	460b      	mov	r3, r1
 800c164:	ec51 0b19 	vmov	r0, r1, d9
 800c168:	f7f4 fb78 	bl	800085c <__aeabi_ddiv>
 800c16c:	4632      	mov	r2, r6
 800c16e:	4604      	mov	r4, r0
 800c170:	460d      	mov	r5, r1
 800c172:	463b      	mov	r3, r7
 800c174:	4640      	mov	r0, r8
 800c176:	4649      	mov	r1, r9
 800c178:	f7f4 fa46 	bl	8000608 <__aeabi_dmul>
 800c17c:	4632      	mov	r2, r6
 800c17e:	463b      	mov	r3, r7
 800c180:	f7f4 f88c 	bl	800029c <__adddf3>
 800c184:	4602      	mov	r2, r0
 800c186:	460b      	mov	r3, r1
 800c188:	4620      	mov	r0, r4
 800c18a:	4629      	mov	r1, r5
 800c18c:	f7f4 f884 	bl	8000298 <__aeabi_dsub>
 800c190:	4642      	mov	r2, r8
 800c192:	464b      	mov	r3, r9
 800c194:	f7f4 f880 	bl	8000298 <__aeabi_dsub>
 800c198:	460b      	mov	r3, r1
 800c19a:	4602      	mov	r2, r0
 800c19c:	493a      	ldr	r1, [pc, #232]	; (800c288 <__ieee754_pow+0xa30>)
 800c19e:	2000      	movs	r0, #0
 800c1a0:	f7f4 f87a 	bl	8000298 <__aeabi_dsub>
 800c1a4:	e9cd 0100 	strd	r0, r1, [sp]
 800c1a8:	9b01      	ldr	r3, [sp, #4]
 800c1aa:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c1ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c1b2:	da2f      	bge.n	800c214 <__ieee754_pow+0x9bc>
 800c1b4:	4650      	mov	r0, sl
 800c1b6:	ed9d 0b00 	vldr	d0, [sp]
 800c1ba:	f000 f9cd 	bl	800c558 <scalbn>
 800c1be:	ec51 0b10 	vmov	r0, r1, d0
 800c1c2:	ec53 2b18 	vmov	r2, r3, d8
 800c1c6:	f7ff bbe0 	b.w	800b98a <__ieee754_pow+0x132>
 800c1ca:	4b30      	ldr	r3, [pc, #192]	; (800c28c <__ieee754_pow+0xa34>)
 800c1cc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c1d0:	429e      	cmp	r6, r3
 800c1d2:	f77f af0b 	ble.w	800bfec <__ieee754_pow+0x794>
 800c1d6:	4b2e      	ldr	r3, [pc, #184]	; (800c290 <__ieee754_pow+0xa38>)
 800c1d8:	440b      	add	r3, r1
 800c1da:	4303      	orrs	r3, r0
 800c1dc:	d00b      	beq.n	800c1f6 <__ieee754_pow+0x99e>
 800c1de:	a326      	add	r3, pc, #152	; (adr r3, 800c278 <__ieee754_pow+0xa20>)
 800c1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e4:	ec51 0b18 	vmov	r0, r1, d8
 800c1e8:	f7f4 fa0e 	bl	8000608 <__aeabi_dmul>
 800c1ec:	a322      	add	r3, pc, #136	; (adr r3, 800c278 <__ieee754_pow+0xa20>)
 800c1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f2:	f7ff bbca 	b.w	800b98a <__ieee754_pow+0x132>
 800c1f6:	4622      	mov	r2, r4
 800c1f8:	462b      	mov	r3, r5
 800c1fa:	f7f4 f84d 	bl	8000298 <__aeabi_dsub>
 800c1fe:	4642      	mov	r2, r8
 800c200:	464b      	mov	r3, r9
 800c202:	f7f4 fc87 	bl	8000b14 <__aeabi_dcmpge>
 800c206:	2800      	cmp	r0, #0
 800c208:	f43f aef0 	beq.w	800bfec <__ieee754_pow+0x794>
 800c20c:	e7e7      	b.n	800c1de <__ieee754_pow+0x986>
 800c20e:	f04f 0a00 	mov.w	sl, #0
 800c212:	e717      	b.n	800c044 <__ieee754_pow+0x7ec>
 800c214:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c218:	4619      	mov	r1, r3
 800c21a:	e7d2      	b.n	800c1c2 <__ieee754_pow+0x96a>
 800c21c:	491a      	ldr	r1, [pc, #104]	; (800c288 <__ieee754_pow+0xa30>)
 800c21e:	2000      	movs	r0, #0
 800c220:	f7ff bb9e 	b.w	800b960 <__ieee754_pow+0x108>
 800c224:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c228:	f7ff bb9a 	b.w	800b960 <__ieee754_pow+0x108>
 800c22c:	9000      	str	r0, [sp, #0]
 800c22e:	f7ff bb76 	b.w	800b91e <__ieee754_pow+0xc6>
 800c232:	2100      	movs	r1, #0
 800c234:	f7ff bb60 	b.w	800b8f8 <__ieee754_pow+0xa0>
 800c238:	00000000 	.word	0x00000000
 800c23c:	3fe62e43 	.word	0x3fe62e43
 800c240:	fefa39ef 	.word	0xfefa39ef
 800c244:	3fe62e42 	.word	0x3fe62e42
 800c248:	0ca86c39 	.word	0x0ca86c39
 800c24c:	be205c61 	.word	0xbe205c61
 800c250:	72bea4d0 	.word	0x72bea4d0
 800c254:	3e663769 	.word	0x3e663769
 800c258:	c5d26bf1 	.word	0xc5d26bf1
 800c25c:	3ebbbd41 	.word	0x3ebbbd41
 800c260:	af25de2c 	.word	0xaf25de2c
 800c264:	3f11566a 	.word	0x3f11566a
 800c268:	16bebd93 	.word	0x16bebd93
 800c26c:	3f66c16c 	.word	0x3f66c16c
 800c270:	5555553e 	.word	0x5555553e
 800c274:	3fc55555 	.word	0x3fc55555
 800c278:	c2f8f359 	.word	0xc2f8f359
 800c27c:	01a56e1f 	.word	0x01a56e1f
 800c280:	3fe00000 	.word	0x3fe00000
 800c284:	000fffff 	.word	0x000fffff
 800c288:	3ff00000 	.word	0x3ff00000
 800c28c:	4090cbff 	.word	0x4090cbff
 800c290:	3f6f3400 	.word	0x3f6f3400
 800c294:	652b82fe 	.word	0x652b82fe
 800c298:	3c971547 	.word	0x3c971547

0800c29c <__ieee754_sqrt>:
 800c29c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2a0:	ec55 4b10 	vmov	r4, r5, d0
 800c2a4:	4e56      	ldr	r6, [pc, #344]	; (800c400 <__ieee754_sqrt+0x164>)
 800c2a6:	43ae      	bics	r6, r5
 800c2a8:	ee10 0a10 	vmov	r0, s0
 800c2ac:	ee10 3a10 	vmov	r3, s0
 800c2b0:	4629      	mov	r1, r5
 800c2b2:	462a      	mov	r2, r5
 800c2b4:	d110      	bne.n	800c2d8 <__ieee754_sqrt+0x3c>
 800c2b6:	ee10 2a10 	vmov	r2, s0
 800c2ba:	462b      	mov	r3, r5
 800c2bc:	f7f4 f9a4 	bl	8000608 <__aeabi_dmul>
 800c2c0:	4602      	mov	r2, r0
 800c2c2:	460b      	mov	r3, r1
 800c2c4:	4620      	mov	r0, r4
 800c2c6:	4629      	mov	r1, r5
 800c2c8:	f7f3 ffe8 	bl	800029c <__adddf3>
 800c2cc:	4604      	mov	r4, r0
 800c2ce:	460d      	mov	r5, r1
 800c2d0:	ec45 4b10 	vmov	d0, r4, r5
 800c2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2d8:	2d00      	cmp	r5, #0
 800c2da:	dc10      	bgt.n	800c2fe <__ieee754_sqrt+0x62>
 800c2dc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c2e0:	4330      	orrs	r0, r6
 800c2e2:	d0f5      	beq.n	800c2d0 <__ieee754_sqrt+0x34>
 800c2e4:	b15d      	cbz	r5, 800c2fe <__ieee754_sqrt+0x62>
 800c2e6:	ee10 2a10 	vmov	r2, s0
 800c2ea:	462b      	mov	r3, r5
 800c2ec:	ee10 0a10 	vmov	r0, s0
 800c2f0:	f7f3 ffd2 	bl	8000298 <__aeabi_dsub>
 800c2f4:	4602      	mov	r2, r0
 800c2f6:	460b      	mov	r3, r1
 800c2f8:	f7f4 fab0 	bl	800085c <__aeabi_ddiv>
 800c2fc:	e7e6      	b.n	800c2cc <__ieee754_sqrt+0x30>
 800c2fe:	1509      	asrs	r1, r1, #20
 800c300:	d076      	beq.n	800c3f0 <__ieee754_sqrt+0x154>
 800c302:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c306:	07ce      	lsls	r6, r1, #31
 800c308:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800c30c:	bf5e      	ittt	pl
 800c30e:	0fda      	lsrpl	r2, r3, #31
 800c310:	005b      	lslpl	r3, r3, #1
 800c312:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800c316:	0fda      	lsrs	r2, r3, #31
 800c318:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800c31c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800c320:	2000      	movs	r0, #0
 800c322:	106d      	asrs	r5, r5, #1
 800c324:	005b      	lsls	r3, r3, #1
 800c326:	f04f 0e16 	mov.w	lr, #22
 800c32a:	4684      	mov	ip, r0
 800c32c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c330:	eb0c 0401 	add.w	r4, ip, r1
 800c334:	4294      	cmp	r4, r2
 800c336:	bfde      	ittt	le
 800c338:	1b12      	suble	r2, r2, r4
 800c33a:	eb04 0c01 	addle.w	ip, r4, r1
 800c33e:	1840      	addle	r0, r0, r1
 800c340:	0052      	lsls	r2, r2, #1
 800c342:	f1be 0e01 	subs.w	lr, lr, #1
 800c346:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800c34a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c34e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c352:	d1ed      	bne.n	800c330 <__ieee754_sqrt+0x94>
 800c354:	4671      	mov	r1, lr
 800c356:	2720      	movs	r7, #32
 800c358:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800c35c:	4562      	cmp	r2, ip
 800c35e:	eb04 060e 	add.w	r6, r4, lr
 800c362:	dc02      	bgt.n	800c36a <__ieee754_sqrt+0xce>
 800c364:	d113      	bne.n	800c38e <__ieee754_sqrt+0xf2>
 800c366:	429e      	cmp	r6, r3
 800c368:	d811      	bhi.n	800c38e <__ieee754_sqrt+0xf2>
 800c36a:	2e00      	cmp	r6, #0
 800c36c:	eb06 0e04 	add.w	lr, r6, r4
 800c370:	da43      	bge.n	800c3fa <__ieee754_sqrt+0x15e>
 800c372:	f1be 0f00 	cmp.w	lr, #0
 800c376:	db40      	blt.n	800c3fa <__ieee754_sqrt+0x15e>
 800c378:	f10c 0801 	add.w	r8, ip, #1
 800c37c:	eba2 020c 	sub.w	r2, r2, ip
 800c380:	429e      	cmp	r6, r3
 800c382:	bf88      	it	hi
 800c384:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800c388:	1b9b      	subs	r3, r3, r6
 800c38a:	4421      	add	r1, r4
 800c38c:	46c4      	mov	ip, r8
 800c38e:	0052      	lsls	r2, r2, #1
 800c390:	3f01      	subs	r7, #1
 800c392:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800c396:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c39a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c39e:	d1dd      	bne.n	800c35c <__ieee754_sqrt+0xc0>
 800c3a0:	4313      	orrs	r3, r2
 800c3a2:	d006      	beq.n	800c3b2 <__ieee754_sqrt+0x116>
 800c3a4:	1c4c      	adds	r4, r1, #1
 800c3a6:	bf13      	iteet	ne
 800c3a8:	3101      	addne	r1, #1
 800c3aa:	3001      	addeq	r0, #1
 800c3ac:	4639      	moveq	r1, r7
 800c3ae:	f021 0101 	bicne.w	r1, r1, #1
 800c3b2:	1043      	asrs	r3, r0, #1
 800c3b4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c3b8:	0849      	lsrs	r1, r1, #1
 800c3ba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c3be:	07c2      	lsls	r2, r0, #31
 800c3c0:	bf48      	it	mi
 800c3c2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800c3c6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800c3ca:	460c      	mov	r4, r1
 800c3cc:	463d      	mov	r5, r7
 800c3ce:	e77f      	b.n	800c2d0 <__ieee754_sqrt+0x34>
 800c3d0:	0ada      	lsrs	r2, r3, #11
 800c3d2:	3815      	subs	r0, #21
 800c3d4:	055b      	lsls	r3, r3, #21
 800c3d6:	2a00      	cmp	r2, #0
 800c3d8:	d0fa      	beq.n	800c3d0 <__ieee754_sqrt+0x134>
 800c3da:	02d7      	lsls	r7, r2, #11
 800c3dc:	d50a      	bpl.n	800c3f4 <__ieee754_sqrt+0x158>
 800c3de:	f1c1 0420 	rsb	r4, r1, #32
 800c3e2:	fa23 f404 	lsr.w	r4, r3, r4
 800c3e6:	1e4d      	subs	r5, r1, #1
 800c3e8:	408b      	lsls	r3, r1
 800c3ea:	4322      	orrs	r2, r4
 800c3ec:	1b41      	subs	r1, r0, r5
 800c3ee:	e788      	b.n	800c302 <__ieee754_sqrt+0x66>
 800c3f0:	4608      	mov	r0, r1
 800c3f2:	e7f0      	b.n	800c3d6 <__ieee754_sqrt+0x13a>
 800c3f4:	0052      	lsls	r2, r2, #1
 800c3f6:	3101      	adds	r1, #1
 800c3f8:	e7ef      	b.n	800c3da <__ieee754_sqrt+0x13e>
 800c3fa:	46e0      	mov	r8, ip
 800c3fc:	e7be      	b.n	800c37c <__ieee754_sqrt+0xe0>
 800c3fe:	bf00      	nop
 800c400:	7ff00000 	.word	0x7ff00000

0800c404 <fabs>:
 800c404:	ec51 0b10 	vmov	r0, r1, d0
 800c408:	ee10 2a10 	vmov	r2, s0
 800c40c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c410:	ec43 2b10 	vmov	d0, r2, r3
 800c414:	4770      	bx	lr

0800c416 <finite>:
 800c416:	b082      	sub	sp, #8
 800c418:	ed8d 0b00 	vstr	d0, [sp]
 800c41c:	9801      	ldr	r0, [sp, #4]
 800c41e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c422:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c426:	0fc0      	lsrs	r0, r0, #31
 800c428:	b002      	add	sp, #8
 800c42a:	4770      	bx	lr
 800c42c:	0000      	movs	r0, r0
	...

0800c430 <nan>:
 800c430:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c438 <nan+0x8>
 800c434:	4770      	bx	lr
 800c436:	bf00      	nop
 800c438:	00000000 	.word	0x00000000
 800c43c:	7ff80000 	.word	0x7ff80000

0800c440 <rint>:
 800c440:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c442:	ec51 0b10 	vmov	r0, r1, d0
 800c446:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c44a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800c44e:	2e13      	cmp	r6, #19
 800c450:	ee10 4a10 	vmov	r4, s0
 800c454:	460b      	mov	r3, r1
 800c456:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800c45a:	dc58      	bgt.n	800c50e <rint+0xce>
 800c45c:	2e00      	cmp	r6, #0
 800c45e:	da2b      	bge.n	800c4b8 <rint+0x78>
 800c460:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c464:	4302      	orrs	r2, r0
 800c466:	d023      	beq.n	800c4b0 <rint+0x70>
 800c468:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800c46c:	4302      	orrs	r2, r0
 800c46e:	4254      	negs	r4, r2
 800c470:	4314      	orrs	r4, r2
 800c472:	0c4b      	lsrs	r3, r1, #17
 800c474:	0b24      	lsrs	r4, r4, #12
 800c476:	045b      	lsls	r3, r3, #17
 800c478:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800c47c:	ea44 0103 	orr.w	r1, r4, r3
 800c480:	4b32      	ldr	r3, [pc, #200]	; (800c54c <rint+0x10c>)
 800c482:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c486:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c48a:	4602      	mov	r2, r0
 800c48c:	460b      	mov	r3, r1
 800c48e:	4630      	mov	r0, r6
 800c490:	4639      	mov	r1, r7
 800c492:	f7f3 ff03 	bl	800029c <__adddf3>
 800c496:	e9cd 0100 	strd	r0, r1, [sp]
 800c49a:	463b      	mov	r3, r7
 800c49c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c4a0:	4632      	mov	r2, r6
 800c4a2:	f7f3 fef9 	bl	8000298 <__aeabi_dsub>
 800c4a6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c4aa:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800c4ae:	4639      	mov	r1, r7
 800c4b0:	ec41 0b10 	vmov	d0, r0, r1
 800c4b4:	b003      	add	sp, #12
 800c4b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4b8:	4a25      	ldr	r2, [pc, #148]	; (800c550 <rint+0x110>)
 800c4ba:	4132      	asrs	r2, r6
 800c4bc:	ea01 0702 	and.w	r7, r1, r2
 800c4c0:	4307      	orrs	r7, r0
 800c4c2:	d0f5      	beq.n	800c4b0 <rint+0x70>
 800c4c4:	0851      	lsrs	r1, r2, #1
 800c4c6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800c4ca:	4314      	orrs	r4, r2
 800c4cc:	d00c      	beq.n	800c4e8 <rint+0xa8>
 800c4ce:	ea23 0201 	bic.w	r2, r3, r1
 800c4d2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c4d6:	2e13      	cmp	r6, #19
 800c4d8:	fa43 f606 	asr.w	r6, r3, r6
 800c4dc:	bf0c      	ite	eq
 800c4de:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800c4e2:	2400      	movne	r4, #0
 800c4e4:	ea42 0306 	orr.w	r3, r2, r6
 800c4e8:	4918      	ldr	r1, [pc, #96]	; (800c54c <rint+0x10c>)
 800c4ea:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800c4ee:	4622      	mov	r2, r4
 800c4f0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c4f4:	4620      	mov	r0, r4
 800c4f6:	4629      	mov	r1, r5
 800c4f8:	f7f3 fed0 	bl	800029c <__adddf3>
 800c4fc:	e9cd 0100 	strd	r0, r1, [sp]
 800c500:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c504:	4622      	mov	r2, r4
 800c506:	462b      	mov	r3, r5
 800c508:	f7f3 fec6 	bl	8000298 <__aeabi_dsub>
 800c50c:	e7d0      	b.n	800c4b0 <rint+0x70>
 800c50e:	2e33      	cmp	r6, #51	; 0x33
 800c510:	dd07      	ble.n	800c522 <rint+0xe2>
 800c512:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c516:	d1cb      	bne.n	800c4b0 <rint+0x70>
 800c518:	ee10 2a10 	vmov	r2, s0
 800c51c:	f7f3 febe 	bl	800029c <__adddf3>
 800c520:	e7c6      	b.n	800c4b0 <rint+0x70>
 800c522:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800c526:	f04f 36ff 	mov.w	r6, #4294967295
 800c52a:	40d6      	lsrs	r6, r2
 800c52c:	4230      	tst	r0, r6
 800c52e:	d0bf      	beq.n	800c4b0 <rint+0x70>
 800c530:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800c534:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800c538:	bf1f      	itttt	ne
 800c53a:	ea24 0101 	bicne.w	r1, r4, r1
 800c53e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800c542:	fa44 f202 	asrne.w	r2, r4, r2
 800c546:	ea41 0402 	orrne.w	r4, r1, r2
 800c54a:	e7cd      	b.n	800c4e8 <rint+0xa8>
 800c54c:	0800cb30 	.word	0x0800cb30
 800c550:	000fffff 	.word	0x000fffff
 800c554:	00000000 	.word	0x00000000

0800c558 <scalbn>:
 800c558:	b570      	push	{r4, r5, r6, lr}
 800c55a:	ec55 4b10 	vmov	r4, r5, d0
 800c55e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c562:	4606      	mov	r6, r0
 800c564:	462b      	mov	r3, r5
 800c566:	b99a      	cbnz	r2, 800c590 <scalbn+0x38>
 800c568:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c56c:	4323      	orrs	r3, r4
 800c56e:	d036      	beq.n	800c5de <scalbn+0x86>
 800c570:	4b39      	ldr	r3, [pc, #228]	; (800c658 <scalbn+0x100>)
 800c572:	4629      	mov	r1, r5
 800c574:	ee10 0a10 	vmov	r0, s0
 800c578:	2200      	movs	r2, #0
 800c57a:	f7f4 f845 	bl	8000608 <__aeabi_dmul>
 800c57e:	4b37      	ldr	r3, [pc, #220]	; (800c65c <scalbn+0x104>)
 800c580:	429e      	cmp	r6, r3
 800c582:	4604      	mov	r4, r0
 800c584:	460d      	mov	r5, r1
 800c586:	da10      	bge.n	800c5aa <scalbn+0x52>
 800c588:	a32b      	add	r3, pc, #172	; (adr r3, 800c638 <scalbn+0xe0>)
 800c58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c58e:	e03a      	b.n	800c606 <scalbn+0xae>
 800c590:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c594:	428a      	cmp	r2, r1
 800c596:	d10c      	bne.n	800c5b2 <scalbn+0x5a>
 800c598:	ee10 2a10 	vmov	r2, s0
 800c59c:	4620      	mov	r0, r4
 800c59e:	4629      	mov	r1, r5
 800c5a0:	f7f3 fe7c 	bl	800029c <__adddf3>
 800c5a4:	4604      	mov	r4, r0
 800c5a6:	460d      	mov	r5, r1
 800c5a8:	e019      	b.n	800c5de <scalbn+0x86>
 800c5aa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c5ae:	460b      	mov	r3, r1
 800c5b0:	3a36      	subs	r2, #54	; 0x36
 800c5b2:	4432      	add	r2, r6
 800c5b4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c5b8:	428a      	cmp	r2, r1
 800c5ba:	dd08      	ble.n	800c5ce <scalbn+0x76>
 800c5bc:	2d00      	cmp	r5, #0
 800c5be:	a120      	add	r1, pc, #128	; (adr r1, 800c640 <scalbn+0xe8>)
 800c5c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5c4:	da1c      	bge.n	800c600 <scalbn+0xa8>
 800c5c6:	a120      	add	r1, pc, #128	; (adr r1, 800c648 <scalbn+0xf0>)
 800c5c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5cc:	e018      	b.n	800c600 <scalbn+0xa8>
 800c5ce:	2a00      	cmp	r2, #0
 800c5d0:	dd08      	ble.n	800c5e4 <scalbn+0x8c>
 800c5d2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c5d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c5da:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c5de:	ec45 4b10 	vmov	d0, r4, r5
 800c5e2:	bd70      	pop	{r4, r5, r6, pc}
 800c5e4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c5e8:	da19      	bge.n	800c61e <scalbn+0xc6>
 800c5ea:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c5ee:	429e      	cmp	r6, r3
 800c5f0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c5f4:	dd0a      	ble.n	800c60c <scalbn+0xb4>
 800c5f6:	a112      	add	r1, pc, #72	; (adr r1, 800c640 <scalbn+0xe8>)
 800c5f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d1e2      	bne.n	800c5c6 <scalbn+0x6e>
 800c600:	a30f      	add	r3, pc, #60	; (adr r3, 800c640 <scalbn+0xe8>)
 800c602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c606:	f7f3 ffff 	bl	8000608 <__aeabi_dmul>
 800c60a:	e7cb      	b.n	800c5a4 <scalbn+0x4c>
 800c60c:	a10a      	add	r1, pc, #40	; (adr r1, 800c638 <scalbn+0xe0>)
 800c60e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d0b8      	beq.n	800c588 <scalbn+0x30>
 800c616:	a10e      	add	r1, pc, #56	; (adr r1, 800c650 <scalbn+0xf8>)
 800c618:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c61c:	e7b4      	b.n	800c588 <scalbn+0x30>
 800c61e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c622:	3236      	adds	r2, #54	; 0x36
 800c624:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c628:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c62c:	4620      	mov	r0, r4
 800c62e:	4b0c      	ldr	r3, [pc, #48]	; (800c660 <scalbn+0x108>)
 800c630:	2200      	movs	r2, #0
 800c632:	e7e8      	b.n	800c606 <scalbn+0xae>
 800c634:	f3af 8000 	nop.w
 800c638:	c2f8f359 	.word	0xc2f8f359
 800c63c:	01a56e1f 	.word	0x01a56e1f
 800c640:	8800759c 	.word	0x8800759c
 800c644:	7e37e43c 	.word	0x7e37e43c
 800c648:	8800759c 	.word	0x8800759c
 800c64c:	fe37e43c 	.word	0xfe37e43c
 800c650:	c2f8f359 	.word	0xc2f8f359
 800c654:	81a56e1f 	.word	0x81a56e1f
 800c658:	43500000 	.word	0x43500000
 800c65c:	ffff3cb0 	.word	0xffff3cb0
 800c660:	3c900000 	.word	0x3c900000

0800c664 <_init>:
 800c664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c666:	bf00      	nop
 800c668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c66a:	bc08      	pop	{r3}
 800c66c:	469e      	mov	lr, r3
 800c66e:	4770      	bx	lr

0800c670 <_fini>:
 800c670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c672:	bf00      	nop
 800c674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c676:	bc08      	pop	{r3}
 800c678:	469e      	mov	lr, r3
 800c67a:	4770      	bx	lr
